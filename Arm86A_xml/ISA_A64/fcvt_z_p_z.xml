<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2019 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->

<instructionsection id="fcvt_z_p_z" title="FCVT" type="instruction">
  <docvars>
    <docvar key="instr-class" value="sve" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="FCVT" />
  </docvars>
  <heading>FCVT</heading>
  <desc>
    <brief>Floating-point convert precision (predicated)</brief>
    <description>
      <para>Convert the size and precision of each active floating-point element of the source vector, and place the results in the corresponding elements of the destination vector. Inactive elements in the destination vector register remain unmodified.</para>
      <para>Since the input and result types have a different size the smaller type is held unpacked in the least significant bits of elements of the larger size. When the input is the smaller type the upper bits of each source element are ignored. When the result is the smaller type the results are zero-extended to fill each destination element.</para>
    </description>
    <status>Green</status>
    <predicated>True</predicated>
    <takes_movprfx>True</takes_movprfx>
    <takes_pred_movprfx>True</takes_pred_movprfx>
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <classesintro count="6">
      <txt>It has encodings from 6 classes:</txt>
      <a href="#fcvt_z_p_z_h2s">Half-precision to single-precision</a>
      <txt>, </txt>
      <a href="#fcvt_z_p_z_h2d">Half-precision to double-precision</a>
      <txt>, </txt>
      <a href="#fcvt_z_p_z_s2h">Single-precision to half-precision</a>
      <txt>, </txt>
      <a href="#fcvt_z_p_z_s2d">Single-precision to double-precision</a>
      <txt>, </txt>
      <a href="#fcvt_z_p_z_d2h">Double-precision to half-precision</a>
      <txt> and </txt>
      <a href="#fcvt_z_p_z_d2s">Double-precision to single-precision</a>
    </classesintro>
    <iclass name="Half-precision to single-precision" oneof="6" id="fcvt_z_p_z_h2s" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="convert-type" value="half-to-single" />
        <docvar key="instr-class" value="sve" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="FCVT" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <regdiagram form="32" psname="FCVT-Z.P.Z-H2S">
        <box hibit="31" width="8" settings="8">
          <c>0</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="23" name="opc&lt;1&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="22" name="opc&lt;0&gt;" settings="1">
          <c>0</c>
        </box>
        <box hibit="21" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="17" name="opc2&lt;1&gt;" settings="1">
          <c>0</c>
        </box>
        <box hibit="16" name="opc2&lt;0&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="15" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="12" width="3" name="Pg" usename="1">
          <c colspan="3"></c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="fcvt_z_p_z_h2s" oneofinclass="1" oneof="6" label="Half-precision to single-precision">
        <docvars>
          <docvar key="convert-type" value="half-to-single" />
          <docvar key="instr-class" value="sve" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="FCVT" />
        </docvars>
        <asmtemplate><text>FCVT    </text><a link="zd" hover="Destination scalable vector register (field &quot;Zd&quot;)">&lt;Zd&gt;</a><text>.S, </text><a link="pg" hover="Governing scalable predicate register P0-P7 (field &quot;Pg&quot;)">&lt;Pg&gt;</a><text>/M, </text><a link="zn" hover="Source scalable vector register (field &quot;Zn&quot;)">&lt;Zn&gt;</a><text>.H</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="FCVT-Z.P.Z-H2S" mylink="FCVT-Z.P.Z-H2S" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !HaveSVE() then UNDEFINED;
integer esize = 32;
integer g = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pg);
integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
integer s_esize = 16;
integer d_esize = 32;</pstext>
        </ps>
      </ps_section>
    </iclass>
    <iclass name="Half-precision to double-precision" oneof="6" id="fcvt_z_p_z_h2d" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="convert-type" value="half-to-double" />
        <docvar key="instr-class" value="sve" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="FCVT" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <regdiagram form="32" psname="FCVT-Z.P.Z-H2D">
        <box hibit="31" width="8" settings="8">
          <c>0</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="23" name="opc&lt;1&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="22" name="opc&lt;0&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="21" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="17" name="opc2&lt;1&gt;" settings="1">
          <c>0</c>
        </box>
        <box hibit="16" name="opc2&lt;0&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="15" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="12" width="3" name="Pg" usename="1">
          <c colspan="3"></c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="fcvt_z_p_z_h2d" oneofinclass="1" oneof="6" label="Half-precision to double-precision">
        <docvars>
          <docvar key="convert-type" value="half-to-double" />
          <docvar key="instr-class" value="sve" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="FCVT" />
        </docvars>
        <asmtemplate><text>FCVT    </text><a link="zd" hover="Destination scalable vector register (field &quot;Zd&quot;)">&lt;Zd&gt;</a><text>.D, </text><a link="pg" hover="Governing scalable predicate register P0-P7 (field &quot;Pg&quot;)">&lt;Pg&gt;</a><text>/M, </text><a link="zn" hover="Source scalable vector register (field &quot;Zn&quot;)">&lt;Zn&gt;</a><text>.H</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="FCVT-Z.P.Z-H2D" mylink="FCVT-Z.P.Z-H2D" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !HaveSVE() then UNDEFINED;
integer esize = 64;
integer g = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pg);
integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
integer s_esize = 16;
integer d_esize = 64;</pstext>
        </ps>
      </ps_section>
    </iclass>
    <iclass name="Single-precision to half-precision" oneof="6" id="fcvt_z_p_z_s2h" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="convert-type" value="single-to-half" />
        <docvar key="instr-class" value="sve" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="FCVT" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <regdiagram form="32" psname="FCVT-Z.P.Z-S2H">
        <box hibit="31" width="8" settings="8">
          <c>0</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="23" name="opc&lt;1&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="22" name="opc&lt;0&gt;" settings="1">
          <c>0</c>
        </box>
        <box hibit="21" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="17" name="opc2&lt;1&gt;" settings="1">
          <c>0</c>
        </box>
        <box hibit="16" name="opc2&lt;0&gt;" settings="1">
          <c>0</c>
        </box>
        <box hibit="15" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="12" width="3" name="Pg" usename="1">
          <c colspan="3"></c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="fcvt_z_p_z_s2h" oneofinclass="1" oneof="6" label="Single-precision to half-precision">
        <docvars>
          <docvar key="convert-type" value="single-to-half" />
          <docvar key="instr-class" value="sve" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="FCVT" />
        </docvars>
        <asmtemplate><text>FCVT    </text><a link="zd" hover="Destination scalable vector register (field &quot;Zd&quot;)">&lt;Zd&gt;</a><text>.H, </text><a link="pg" hover="Governing scalable predicate register P0-P7 (field &quot;Pg&quot;)">&lt;Pg&gt;</a><text>/M, </text><a link="zn" hover="Source scalable vector register (field &quot;Zn&quot;)">&lt;Zn&gt;</a><text>.S</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="FCVT-Z.P.Z-S2H" mylink="FCVT-Z.P.Z-S2H" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !HaveSVE() then UNDEFINED;
integer esize = 32;
integer g = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pg);
integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
integer s_esize = 32;
integer d_esize = 16;</pstext>
        </ps>
      </ps_section>
    </iclass>
    <iclass name="Single-precision to double-precision" oneof="6" id="fcvt_z_p_z_s2d" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="convert-type" value="single-to-double" />
        <docvar key="instr-class" value="sve" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="FCVT" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <regdiagram form="32" psname="FCVT-Z.P.Z-S2D">
        <box hibit="31" width="8" settings="8">
          <c>0</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="23" name="opc&lt;1&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="22" name="opc&lt;0&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="21" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="17" name="opc2&lt;1&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="16" name="opc2&lt;0&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="15" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="12" width="3" name="Pg" usename="1">
          <c colspan="3"></c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="fcvt_z_p_z_s2d" oneofinclass="1" oneof="6" label="Single-precision to double-precision">
        <docvars>
          <docvar key="convert-type" value="single-to-double" />
          <docvar key="instr-class" value="sve" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="FCVT" />
        </docvars>
        <asmtemplate><text>FCVT    </text><a link="zd" hover="Destination scalable vector register (field &quot;Zd&quot;)">&lt;Zd&gt;</a><text>.D, </text><a link="pg" hover="Governing scalable predicate register P0-P7 (field &quot;Pg&quot;)">&lt;Pg&gt;</a><text>/M, </text><a link="zn" hover="Source scalable vector register (field &quot;Zn&quot;)">&lt;Zn&gt;</a><text>.S</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="FCVT-Z.P.Z-S2D" mylink="FCVT-Z.P.Z-S2D" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !HaveSVE() then UNDEFINED;
integer esize = 64;
integer g = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pg);
integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
integer s_esize = 32;
integer d_esize = 64;</pstext>
        </ps>
      </ps_section>
    </iclass>
    <iclass name="Double-precision to half-precision" oneof="6" id="fcvt_z_p_z_d2h" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="convert-type" value="double-to-half" />
        <docvar key="instr-class" value="sve" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="FCVT" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <regdiagram form="32" psname="FCVT-Z.P.Z-D2H">
        <box hibit="31" width="8" settings="8">
          <c>0</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="23" name="opc&lt;1&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="22" name="opc&lt;0&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="21" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="17" name="opc2&lt;1&gt;" settings="1">
          <c>0</c>
        </box>
        <box hibit="16" name="opc2&lt;0&gt;" settings="1">
          <c>0</c>
        </box>
        <box hibit="15" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="12" width="3" name="Pg" usename="1">
          <c colspan="3"></c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="fcvt_z_p_z_d2h" oneofinclass="1" oneof="6" label="Double-precision to half-precision">
        <docvars>
          <docvar key="convert-type" value="double-to-half" />
          <docvar key="instr-class" value="sve" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="FCVT" />
        </docvars>
        <asmtemplate><text>FCVT    </text><a link="zd" hover="Destination scalable vector register (field &quot;Zd&quot;)">&lt;Zd&gt;</a><text>.H, </text><a link="pg" hover="Governing scalable predicate register P0-P7 (field &quot;Pg&quot;)">&lt;Pg&gt;</a><text>/M, </text><a link="zn" hover="Source scalable vector register (field &quot;Zn&quot;)">&lt;Zn&gt;</a><text>.D</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="FCVT-Z.P.Z-D2H" mylink="FCVT-Z.P.Z-D2H" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !HaveSVE() then UNDEFINED;
integer esize = 64;
integer g = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pg);
integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
integer s_esize = 64;
integer d_esize = 16;</pstext>
        </ps>
      </ps_section>
    </iclass>
    <iclass name="Double-precision to single-precision" oneof="6" id="fcvt_z_p_z_d2s" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="convert-type" value="double-to-single" />
        <docvar key="instr-class" value="sve" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="FCVT" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <regdiagram form="32" psname="FCVT-Z.P.Z-D2S">
        <box hibit="31" width="8" settings="8">
          <c>0</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="23" name="opc&lt;1&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="22" name="opc&lt;0&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="21" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="17" name="opc2&lt;1&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="16" name="opc2&lt;0&gt;" settings="1">
          <c>0</c>
        </box>
        <box hibit="15" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="12" width="3" name="Pg" usename="1">
          <c colspan="3"></c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="fcvt_z_p_z_d2s" oneofinclass="1" oneof="6" label="Double-precision to single-precision">
        <docvars>
          <docvar key="convert-type" value="double-to-single" />
          <docvar key="instr-class" value="sve" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="FCVT" />
        </docvars>
        <asmtemplate><text>FCVT    </text><a link="zd" hover="Destination scalable vector register (field &quot;Zd&quot;)">&lt;Zd&gt;</a><text>.S, </text><a link="pg" hover="Governing scalable predicate register P0-P7 (field &quot;Pg&quot;)">&lt;Pg&gt;</a><text>/M, </text><a link="zn" hover="Source scalable vector register (field &quot;Zn&quot;)">&lt;Zn&gt;</a><text>.D</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="FCVT-Z.P.Z-D2S" mylink="FCVT-Z.P.Z-D2S" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !HaveSVE() then UNDEFINED;
integer esize = 64;
integer g = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pg);
integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
integer s_esize = 64;
integer d_esize = 32;</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="fcvt_z_p_z_d2s, fcvt_z_p_z_h2d, fcvt_z_p_z_s2d, fcvt_z_p_z_s2h, fcvt_z_p_z_h2s, fcvt_z_p_z_d2h" symboldefcount="1">
      <symbol link="zd">&lt;Zd&gt;</symbol>
      <account encodedin="Zd">
        <intro>
          <para>Is the name of the destination scalable vector register, encoded in the "Zd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fcvt_z_p_z_d2s, fcvt_z_p_z_h2d, fcvt_z_p_z_s2d, fcvt_z_p_z_s2h, fcvt_z_p_z_h2s, fcvt_z_p_z_d2h" symboldefcount="1">
      <symbol link="pg">&lt;Pg&gt;</symbol>
      <account encodedin="Pg">
        <intro>
          <para>Is the name of the governing scalable predicate register P0-P7, encoded in the "Pg" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fcvt_z_p_z_d2s, fcvt_z_p_z_h2d, fcvt_z_p_z_s2d, fcvt_z_p_z_s2h, fcvt_z_p_z_h2s, fcvt_z_p_z_d2h" symboldefcount="1">
      <symbol link="zn">&lt;Zn&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the source scalable vector register, encoded in the "Zn" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="FCVT-Z.P.Z-H2S" mylink="commonps" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">CheckSVEEnabled();
integer elements = VL DIV esize;
bits(PL) mask = P[g];
bits(VL) operand  = Z[n];
bits(VL) result = Z[d];

for e = 0 to elements-1
    bits(esize) element = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand, e, esize];
    if ElemP[mask, e, esize] == '1' then
        bits(d_esize) res = FPConvertSVE(element&lt;s_esize-1:0&gt;, FPCR);
        <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, e, esize] = <a link="impl-shared.ZeroExtend.1" file="shared_pseudocode.xml" hover="function: bits(N) ZeroExtend(bits(M) x)">ZeroExtend</a>(res);

Z[d] = result;</pstext>
    </ps>
  </ps_section>
</instructionsection>
