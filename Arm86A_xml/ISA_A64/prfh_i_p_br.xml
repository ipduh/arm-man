<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2019 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->

<instructionsection id="prfh_i_p_br" title="PRFH (scalar plus scalar)" type="instruction">
  <docvars>
    <docvar key="instr-class" value="sve" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="PRFH" />
    <docvar key="sve-esize" value="esize-halfword" />
  </docvars>
  <heading>PRFH (scalar plus scalar)</heading>
  <desc>
    <brief>Contiguous prefetch halfwords (scalar index)</brief>
    <description>
      <para>Contiguous prefetch of halfword elements from the memory address generated by a 64-bit scalar base and scalar index which is multiplied by 2 and added to the base address. After each element prefetch the index value is incremented, but the index register is not updated.</para>
      <para>The predicate may be used to suppress prefetches from unwanted addresses.</para>
    </description>
    <status>Green</status>
    <predicated>True</predicated>
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <iclass name="SVE" oneof="1" id="prfh_i_p_br_s" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="PRFH" />
        <docvar key="sve-esize" value="esize-halfword" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <regdiagram form="32" psname="PRFH-I.P.BR-S">
        <box hibit="31" width="7" settings="7">
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" name="msz&lt;1&gt;" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" name="msz&lt;0&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="22" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="20" width="5" name="Rm" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="15" width="3" settings="3">
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="12" width="3" name="Pg" usename="1">
          <c colspan="3"></c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" settings="1">
          <c>0</c>
        </box>
        <box hibit="3" width="4" name="prfop" usename="1">
          <c colspan="4"></c>
        </box>
      </regdiagram>
      <encoding name="prfh_i_p_br_s" oneofinclass="1" oneof="1" label="SVE">
        <docvars>
          <docvar key="instr-class" value="sve" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="PRFH" />
          <docvar key="sve-esize" value="esize-halfword" />
        </docvars>
        <asmtemplate><text>PRFH    </text><a link="prfop" hover="Prefetch operation specifier (field &quot;prfop&quot;) [#uimm4,PLDL1KEEP,PLDL1STRM,PLDL2KEEP,PLDL2STRM,PLDL3KEEP,PLDL3STRM,PSTL1KEEP,PSTL1STRM,PSTL2KEEP,PSTL2STRM,PSTL3KEEP,PSTL3STRM]">&lt;prfop&gt;</a><text>, </text><a link="pg" hover="Governing scalable predicate register P0-P7 (field &quot;Pg&quot;)">&lt;Pg&gt;</a><text>, [</text><a link="xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>, </text><a link="xm" hover="64-bit general-purpose offset register (field &quot;Rm&quot;)">&lt;Xm&gt;</a><text>, LSL #1]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="PRFH-I.P.BR-S" mylink="PRFH-I.P.BR-S" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !HaveSVE() then UNDEFINED;
if Rm == '11111' then UNDEFINED;
integer esize = 16;
integer g = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pg);
integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rm);
integer level = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(prfop&lt;2:1&gt;);
boolean stream = (prfop&lt;0&gt; == '1');
pref_hint = if prfop&lt;3&gt; == '0' then <a link="Prefetch_READ" file="shared_pseudocode.xml" hover="enumeration PrefetchHint {Prefetch_READ, Prefetch_WRITE, Prefetch_EXEC}">Prefetch_READ</a> else <a link="Prefetch_WRITE" file="shared_pseudocode.xml" hover="enumeration PrefetchHint {Prefetch_READ, Prefetch_WRITE, Prefetch_EXEC}">Prefetch_WRITE</a>;
integer scale = 1;</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="prfh_i_p_br_s" symboldefcount="1">
      <symbol link="prfop">&lt;prfop&gt;</symbol>
      <definition encodedin="prfop">
        <intro>Is the prefetch operation specifier, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">prfop</entry>
                <entry class="symbol">&lt;prfop&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">0000</entry>
                <entry class="symbol">PLDL1KEEP</entry>
              </row>
              <row>
                <entry class="bitfield">0001</entry>
                <entry class="symbol">PLDL1STRM</entry>
              </row>
              <row>
                <entry class="bitfield">0010</entry>
                <entry class="symbol">PLDL2KEEP</entry>
              </row>
              <row>
                <entry class="bitfield">0011</entry>
                <entry class="symbol">PLDL2STRM</entry>
              </row>
              <row>
                <entry class="bitfield">0100</entry>
                <entry class="symbol">PLDL3KEEP</entry>
              </row>
              <row>
                <entry class="bitfield">0101</entry>
                <entry class="symbol">PLDL3STRM</entry>
              </row>
              <row>
                <entry class="bitfield">x11x</entry>
                <entry class="symbol">#uimm4</entry>
              </row>
              <row>
                <entry class="bitfield">1000</entry>
                <entry class="symbol">PSTL1KEEP</entry>
              </row>
              <row>
                <entry class="bitfield">1001</entry>
                <entry class="symbol">PSTL1STRM</entry>
              </row>
              <row>
                <entry class="bitfield">1010</entry>
                <entry class="symbol">PSTL2KEEP</entry>
              </row>
              <row>
                <entry class="bitfield">1011</entry>
                <entry class="symbol">PSTL2STRM</entry>
              </row>
              <row>
                <entry class="bitfield">1100</entry>
                <entry class="symbol">PSTL3KEEP</entry>
              </row>
              <row>
                <entry class="bitfield">1101</entry>
                <entry class="symbol">PSTL3STRM</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="prfh_i_p_br_s" symboldefcount="1">
      <symbol link="pg">&lt;Pg&gt;</symbol>
      <account encodedin="Pg">
        <intro>
          <para>Is the name of the governing scalable predicate register P0-P7, encoded in the "Pg" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="prfh_i_p_br_s" symboldefcount="1">
      <symbol link="xn_sp">&lt;Xn|SP&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="prfh_i_p_br_s" symboldefcount="1">
      <symbol link="xm">&lt;Xm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the 64-bit name of the general-purpose offset register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="PRFH-I.P.BR-S" mylink="commonps" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">CheckSVEEnabled();
integer elements = VL DIV esize;
bits(PL) mask = P[g];
bits(64) base;
bits(64) offset = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[m];
bits(64) addr;

if n == 31 then
    base = <a link="impl-aarch64.SP.read.0" file="shared_pseudocode.xml" hover="accessor: bits(width) SP[]">SP</a>[];
else
    base = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[n];

for e = 0 to elements-1
    if ElemP[mask, e, esize] == '1' then
        addr = base + (<a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(offset) &lt;&lt; scale);
        <a link="impl-shared.Hint_Prefetch.4" file="shared_pseudocode.xml" hover="function: Hint_Prefetch(bits(64) address, PrefetchHint hint, integer target, boolean stream)">Hint_Prefetch</a>(addr, pref_hint, level, stream);
    offset = offset + 1;</pstext>
    </ps>
  </ps_section>
</instructionsection>
