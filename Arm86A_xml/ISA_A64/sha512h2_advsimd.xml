<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2019 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->

<instructionsection id="SHA512H2_advsimd" title="SHA512H2 -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="advsimd" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="SHA512H2" />
  </docvars>
  <heading>SHA512H2</heading>
  <desc>
    <brief>
      <para>SHA512 Hash update part 2</para>
    </brief>
    <authored>
      <para>SHA512 Hash update part 2 takes the values from the three 128-bit source SIMD&amp;FP registers and produces a 128-bit output value that combines the sigma0 and majority functions of two iterations of the SHA512 computation. It returns this value to the destination SIMD&amp;FP register.</para>
      <para>This instruction is implemented only when <xref linkend="v8.2.SHA">ARMv8.2-SHA</xref> is implemented.</para>
    </authored>
  </desc>
  <operationalnotes>
    <para>If PSTATE.DIT is 1:</para>
    <list type="unordered">
      <listitem><content>The execution time of this instruction is independent of:<list type="unordered"><listitem><content>The values of the data supplied in any of its registers.</content></listitem><listitem><content>The values of the NZCV flags.</content></listitem></list></content></listitem>
      <listitem><content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered"><listitem><content>The values of the data supplied in any of its registers.</content></listitem><listitem><content>The values of the NZCV flags.</content></listitem></list></content></listitem>
    </list>
  </operationalnotes>
  <alias_list howmany="0"></alias_list>
  <classes>
    <iclass name="Advanced SIMD" oneof="1" id="SHA512H2_QQV_cryptosha512_3" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="advsimd" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="SHA512H2" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <arch_variants>
        <arch_variant name="ARMv8.2" feature="ARMv8.2-SHA2" />
      </arch_variants>
      <regdiagram form="32" psname="aarch64/instrs/vector/crypto/sha512/sha512h2">
        <box hibit="31" width="11" settings="11">
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Rm" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="15" settings="1">
          <c>1</c>
        </box>
        <box hibit="14" name="O" settings="1">
          <c>0</c>
        </box>
        <box hibit="13" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="11" width="2" name="opcode" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Rd" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="SHA512H2_QQV_cryptosha512_3" oneofinclass="1" oneof="1" label="Advanced SIMD">
        <docvars>
          <docvar key="instr-class" value="advsimd" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="SHA512H2" />
        </docvars>
        <asmtemplate><text>SHA512H2  </text><a link="qd" hover="128-bit SIMD&amp;FP source and destination register (field &quot;Rd&quot;)">&lt;Qd&gt;</a><text>, </text><a link="qn" hover="Second 128-bit SIMD&amp;FP source register (field &quot;Rn&quot;)">&lt;Qn&gt;</a><text>, </text><a link="vm" hover="Third SIMD&amp;FP source register (field &quot;Rm&quot;)">&lt;Vm&gt;</a><text>.2D</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="aarch64/instrs/vector/crypto/sha512/sha512h2" mylink="aarch64.instrs.vector.crypto.sha512.sha512h2" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !<a link="impl-shared.HaveSHA512Ext.0" file="shared_pseudocode.xml" hover="function: boolean HaveSHA512Ext()">HaveSHA512Ext</a>() then UNDEFINED;
integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rd);
integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rm);</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="SHA512H2_QQV_cryptosha512_3" symboldefcount="1">
      <symbol link="qd">&lt;Qd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 128-bit name of the SIMD&amp;FP source and destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="SHA512H2_QQV_cryptosha512_3" symboldefcount="1">
      <symbol link="qn">&lt;Qn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 128-bit name of the second SIMD&amp;FP source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="SHA512H2_QQV_cryptosha512_3" symboldefcount="1">
      <symbol link="vm">&lt;Vm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the name of the third SIMD&amp;FP source register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/vector/crypto/sha512/sha512h2" mylink="commonps" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="AArch64.CheckFPAdvSIMDEnabled.0" file="shared_pseudocode.xml" hover="function: AArch64.CheckFPAdvSIMDEnabled()">AArch64.CheckFPAdvSIMDEnabled</a>();

bits(128) Vtmp;  
bits(64) NSigma0;
bits(64) tmp;
bits(128) X = <a link="impl-aarch64.V.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n]">V</a>[n];
bits(128) Y = <a link="impl-aarch64.V.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n]">V</a>[m];
bits(128) W = <a link="impl-aarch64.V.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n]">V</a>[d];

NSigma0 =  <a link="impl-shared.ROR.2" file="shared_pseudocode.xml" hover="function: bits(N) ROR(bits(N) x, integer shift)">ROR</a>(Y&lt;63:0&gt;, 28) EOR <a link="impl-shared.ROR.2" file="shared_pseudocode.xml" hover="function: bits(N) ROR(bits(N) x, integer shift)">ROR</a>(Y&lt;63:0&gt;,34) EOR <a link="impl-shared.ROR.2" file="shared_pseudocode.xml" hover="function: bits(N) ROR(bits(N) x, integer shift)">ROR</a>(Y&lt;63:0&gt;,39);
Vtmp&lt;127:64&gt; = (X&lt;63:0&gt; AND Y&lt;127:64&gt;) EOR (X&lt;63:0&gt; AND Y&lt;63:0&gt;) EOR (Y&lt;127:64&gt; AND Y&lt;63:0&gt;);
Vtmp&lt;127:64&gt; = (Vtmp&lt;127:64&gt; + NSigma0 +  W&lt;127:64&gt;);
NSigma0 =  <a link="impl-shared.ROR.2" file="shared_pseudocode.xml" hover="function: bits(N) ROR(bits(N) x, integer shift)">ROR</a>(Vtmp&lt;127:64&gt;, 28) EOR <a link="impl-shared.ROR.2" file="shared_pseudocode.xml" hover="function: bits(N) ROR(bits(N) x, integer shift)">ROR</a>(Vtmp&lt;127:64&gt;,34) EOR <a link="impl-shared.ROR.2" file="shared_pseudocode.xml" hover="function: bits(N) ROR(bits(N) x, integer shift)">ROR</a>(Vtmp&lt;127:64&gt;,39);
Vtmp&lt;63:0&gt; =   (Vtmp&lt;127:64&gt; AND Y&lt;63:0&gt;) EOR (Vtmp&lt;127:64&gt; AND Y&lt;127:64&gt;) EOR (Y&lt;127:64&gt; AND Y&lt;63:0&gt;);
Vtmp&lt;63:0&gt; =   (Vtmp&lt;63:0&gt; + NSigma0 + W&lt;63:0&gt;);

<a link="impl-aarch64.V.write.1" file="shared_pseudocode.xml" hover="accessor: V[integer n] = bits(width) value">V</a>[d] = Vtmp;</pstext>
    </ps>
  </ps_section>
</instructionsection>
