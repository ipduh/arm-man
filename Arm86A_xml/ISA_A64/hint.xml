<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2019 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->

<instructionsection id="HINT" title="HINT -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="system" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="HINT" />
  </docvars>
  <heading>HINT</heading>
  <desc>
    <brief>
      <para>Hint instruction</para>
    </brief>
    <authored>
      <para>Hint instruction is for the instruction set space that is reserved for architectural hint instructions.</para>
      <para>Some encodings described here are not allocated in this revision of the architecture, and behave as NOPs. These encodings might be allocated to other hint functionality in future revisions of the architecture and therefore must not be used by software.</para>
    </authored>
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <iclass name="System" oneof="1" id="HINT_HM_hints" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="system" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="HINT" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <regdiagram form="32" psname="aarch64/instrs/system/hints">
        <box hibit="31" width="10" settings="10">
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="21" name="L" settings="1">
          <c>0</c>
        </box>
        <box hibit="20" width="2" name="op0" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="18" width="3" name="op1" settings="3">
          <c>0</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="15" width="4" name="CRn" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="11" width="4" name="CRm" usename="1">
          <c colspan="4"></c>
        </box>
        <box hibit="7" width="3" name="op2" usename="1">
          <c colspan="3"></c>
        </box>
        <box hibit="4" width="5" name="Rt" settings="5">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
      </regdiagram>
      <encoding name="HINT_HM_hints" oneofinclass="1" oneof="1" label="System">
        <docvars>
          <docvar key="instr-class" value="system" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="HINT" />
        </docvars>
        <asmtemplate><text>HINT  #</text><a link="imm" hover="7-bit unsigned immediate [0-127 (field &quot;CRm:op2&quot;)">&lt;imm&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="aarch64/instrs/system/hints" mylink="aarch64.instrs.system.hints" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode"><a link="SystemHintOp" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp</a> op;

case CRm:op2 of
    when '0000 000' op = <a link="SystemHintOp_NOP" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_NOP</a>;
    when '0000 001' op = <a link="SystemHintOp_YIELD" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_YIELD</a>;
    when '0000 010' op = <a link="SystemHintOp_WFE" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_WFE</a>;
    when '0000 011' op = <a link="SystemHintOp_WFI" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_WFI</a>;
    when '0000 100' op = <a link="SystemHintOp_SEV" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_SEV</a>;
    when '0000 101' op = <a link="SystemHintOp_SEVL" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_SEVL</a>;
    when '0000 110'
        if !<a link="impl-shared.HaveDGHExt.0" file="shared_pseudocode.xml" hover="function: boolean HaveDGHExt()">HaveDGHExt</a>() then <a link="impl-shared.EndOfInstruction.0" file="shared_pseudocode.xml" hover="function: EndOfInstruction()">EndOfInstruction</a>();                  // Instruction executes as NOP
        op = <a link="SystemHintOp_DGH" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_DGH</a>;
    when '0000 111' SEE "XPACLRI";
    when '0001 xxx'
        case op2 of
            when '000' SEE "PACIA1716";
            when '010' SEE "PACIB1716";
            when '100' SEE "AUTIA1716";
            when '110' SEE "AUTIB1716";
            otherwise <a link="impl-shared.EndOfInstruction.0" file="shared_pseudocode.xml" hover="function: EndOfInstruction()">EndOfInstruction</a>();                          // Instruction executes as NOP
    when '0010 000'
        if !<a link="impl-shared.HaveRASExt.0" file="shared_pseudocode.xml" hover="function: boolean HaveRASExt()">HaveRASExt</a>() then <a link="impl-shared.EndOfInstruction.0" file="shared_pseudocode.xml" hover="function: EndOfInstruction()">EndOfInstruction</a>();                  // Instruction executes as NOP
        op = <a link="SystemHintOp_ESB" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_ESB</a>;
    when '0010 001'
        if !<a link="impl-shared.HaveStatisticalProfiling.0" file="shared_pseudocode.xml" hover="function: boolean HaveStatisticalProfiling()">HaveStatisticalProfiling</a>() then <a link="impl-shared.EndOfInstruction.0" file="shared_pseudocode.xml" hover="function: EndOfInstruction()">EndOfInstruction</a>();    // Instruction executes as NOP
        op = <a link="SystemHintOp_PSB" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_PSB</a>;
    when '0010 010'
        if !<a link="impl-shared.HaveSelfHostedTrace.0" file="shared_pseudocode.xml" hover="function: boolean HaveSelfHostedTrace()">HaveSelfHostedTrace</a>() then <a link="impl-shared.EndOfInstruction.0" file="shared_pseudocode.xml" hover="function: EndOfInstruction()">EndOfInstruction</a>();         // Instruction executes as NOP
        op = <a link="SystemHintOp_TSB" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_TSB</a>;
    when '0010 100'
        op = <a link="SystemHintOp_CSDB" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_CSDB</a>;
    when '0011 xxx'
        case op2 of
            when '000' SEE "PACIAZ";
            when '001' SEE "PACIASP";
            when '010' SEE "PACIBZ";
            when '011' SEE "PACIBSP";
            when '100' SEE "AUTIAZ";
            when '101' SEE "AUTHASP";
            when '110' SEE "AUTIBZ";
            when '111' SEE "AUTIBSP";
    when '0100 xx0'
        op = <a link="SystemHintOp_BTI" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_BTI</a>;
        // Check branch target compatibility between BTI instruction and PSTATE.BTYPE
        <a link="impl-aarch64.SetBTypeCompatible.1" file="shared_pseudocode.xml" hover="function: SetBTypeCompatible(boolean x)">SetBTypeCompatible</a>(<a link="impl-aarch64.BTypeCompatible_BTI.1" file="shared_pseudocode.xml" hover="function: boolean BTypeCompatible_BTI(bits(2) hintcode)">BTypeCompatible_BTI</a>(op2&lt;2:1&gt;));
    otherwise <a link="impl-shared.EndOfInstruction.0" file="shared_pseudocode.xml" hover="function: EndOfInstruction()">EndOfInstruction</a>();                                 // Instruction executes as NOP</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="HINT_HM_hints" symboldefcount="1">
      <symbol link="imm">&lt;imm&gt;</symbol>
      <account encodedin="CRm:Encoding:Hints:Index:by:op2">
        <intro>
          <para>Is a 7-bit unsigned immediate, in the range 0 to 127 encoded in the "CRm:op2" field.</para>
          <para>The encodings that are allocated to architectural hint functionality are described in the "Hints" table in the "Index by Encoding".</para>
          <note>
            <para>For allocated encodings of "CRm:op2":</para>
            <list type="unordered">
              <listitem><content>A disassembler will disassemble the allocated instruction, rather than the <instruction>HINT</instruction> instruction.</content></listitem>
              <listitem><content>An assembler may support assembly of allocated encodings using <instruction>HINT</instruction> with the corresponding <syntax>&lt;imm&gt;</syntax> value, but it is not required to do so.</content></listitem>
            </list>
          </note>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/system/hints" mylink="commonps" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">case op of
    when <a link="SystemHintOp_YIELD" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_YIELD</a>
        <a link="impl-shared.Hint_Yield.0" file="shared_pseudocode.xml" hover="function: Hint_Yield()">Hint_Yield</a>();

    when <a link="SystemHintOp_DGH" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_DGH</a>
        <a link="impl-shared.Hint_DGH.0" file="shared_pseudocode.xml" hover="function: Hint_DGH()">Hint_DGH</a>();

    when <a link="SystemHintOp_WFE" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_WFE</a>
        if <a link="impl-shared.IsEventRegisterSet.0" file="shared_pseudocode.xml" hover="function: boolean IsEventRegisterSet()">IsEventRegisterSet</a>() then
            <a link="impl-shared.ClearEventRegister.0" file="shared_pseudocode.xml" hover="function: ClearEventRegister()">ClearEventRegister</a>();
        else
            if PSTATE.EL == <a link="EL0" file="shared_pseudocode.xml" hover="constant bits(2) EL0 = '00'">EL0</a> then
                // Check for traps described by the OS which may be EL1 or EL2.
                <a link="AArch64.CheckForWFxTrap.2" file="shared_pseudocode.xml" hover="function: AArch64.CheckForWFxTrap(bits(2) target_el, boolean is_wfe)">AArch64.CheckForWFxTrap</a>(<a link="EL1" file="shared_pseudocode.xml" hover="constant bits(2) EL1 = '01'">EL1</a>, TRUE);
            if PSTATE.EL IN {<a link="EL0" file="shared_pseudocode.xml" hover="constant bits(2) EL0 = '00'">EL0</a>, <a link="EL1" file="shared_pseudocode.xml" hover="constant bits(2) EL1 = '01'">EL1</a>} &amp;&amp; <a link="impl-shared.EL2Enabled.0" file="shared_pseudocode.xml" hover="function: boolean EL2Enabled()">EL2Enabled</a>() &amp;&amp; !<a link="impl-shared.IsInHost.0" file="shared_pseudocode.xml" hover="function: boolean IsInHost()">IsInHost</a>() then
                // Check for traps described by the Hypervisor.
                <a link="AArch64.CheckForWFxTrap.2" file="shared_pseudocode.xml" hover="function: AArch64.CheckForWFxTrap(bits(2) target_el, boolean is_wfe)">AArch64.CheckForWFxTrap</a>(<a link="EL2" file="shared_pseudocode.xml" hover="constant bits(2) EL2 = '10'">EL2</a>, TRUE);
            if <a link="impl-shared.HaveEL.1" file="shared_pseudocode.xml" hover="function: boolean HaveEL(bits(2) el)">HaveEL</a>(<a link="EL3" file="shared_pseudocode.xml" hover="constant bits(2) EL3 = '11'">EL3</a>) &amp;&amp; PSTATE.EL != <a link="EL3" file="shared_pseudocode.xml" hover="constant bits(2) EL3 = '11'">EL3</a> then
                // Check for traps described by the Secure Monitor.
                <a link="AArch64.CheckForWFxTrap.2" file="shared_pseudocode.xml" hover="function: AArch64.CheckForWFxTrap(bits(2) target_el, boolean is_wfe)">AArch64.CheckForWFxTrap</a>(<a link="EL3" file="shared_pseudocode.xml" hover="constant bits(2) EL3 = '11'">EL3</a>, TRUE);
            <a link="impl-shared.WaitForEvent.0" file="shared_pseudocode.xml" hover="function: WaitForEvent()">WaitForEvent</a>();

    when <a link="SystemHintOp_WFI" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_WFI</a>
        if !<a link="impl-shared.InterruptPending.0" file="shared_pseudocode.xml" hover="function: boolean InterruptPending()">InterruptPending</a>() then
            if PSTATE.EL == <a link="EL0" file="shared_pseudocode.xml" hover="constant bits(2) EL0 = '00'">EL0</a> then
                // Check for traps described by the OS which may be EL1 or EL2.
                <a link="AArch64.CheckForWFxTrap.2" file="shared_pseudocode.xml" hover="function: AArch64.CheckForWFxTrap(bits(2) target_el, boolean is_wfe)">AArch64.CheckForWFxTrap</a>(<a link="EL1" file="shared_pseudocode.xml" hover="constant bits(2) EL1 = '01'">EL1</a>, FALSE);
            if PSTATE.EL IN {<a link="EL0" file="shared_pseudocode.xml" hover="constant bits(2) EL0 = '00'">EL0</a>, <a link="EL1" file="shared_pseudocode.xml" hover="constant bits(2) EL1 = '01'">EL1</a>} &amp;&amp; <a link="impl-shared.EL2Enabled.0" file="shared_pseudocode.xml" hover="function: boolean EL2Enabled()">EL2Enabled</a>() &amp;&amp; !<a link="impl-shared.IsInHost.0" file="shared_pseudocode.xml" hover="function: boolean IsInHost()">IsInHost</a>() then
                // Check for traps described by the Hypervisor.
                <a link="AArch64.CheckForWFxTrap.2" file="shared_pseudocode.xml" hover="function: AArch64.CheckForWFxTrap(bits(2) target_el, boolean is_wfe)">AArch64.CheckForWFxTrap</a>(<a link="EL2" file="shared_pseudocode.xml" hover="constant bits(2) EL2 = '10'">EL2</a>, FALSE);
            if <a link="impl-shared.HaveEL.1" file="shared_pseudocode.xml" hover="function: boolean HaveEL(bits(2) el)">HaveEL</a>(<a link="EL3" file="shared_pseudocode.xml" hover="constant bits(2) EL3 = '11'">EL3</a>) &amp;&amp; PSTATE.EL != <a link="EL3" file="shared_pseudocode.xml" hover="constant bits(2) EL3 = '11'">EL3</a> then
                // Check for traps described by the Secure Monitor.
                <a link="AArch64.CheckForWFxTrap.2" file="shared_pseudocode.xml" hover="function: AArch64.CheckForWFxTrap(bits(2) target_el, boolean is_wfe)">AArch64.CheckForWFxTrap</a>(<a link="EL3" file="shared_pseudocode.xml" hover="constant bits(2) EL3 = '11'">EL3</a>, FALSE);
            <a link="impl-shared.WaitForInterrupt.0" file="shared_pseudocode.xml" hover="function: WaitForInterrupt()">WaitForInterrupt</a>();

    when <a link="SystemHintOp_SEV" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_SEV</a>
        <a link="impl-shared.SendEvent.0" file="shared_pseudocode.xml" hover="function: SendEvent()">SendEvent</a>();

    when <a link="SystemHintOp_SEVL" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_SEVL</a>
        <a link="impl-shared.SendEventLocal.0" file="shared_pseudocode.xml" hover="function: SendEventLocal()">SendEventLocal</a>();

    when <a link="SystemHintOp_ESB" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_ESB</a>
        <a link="impl-shared.SynchronizeErrors.0" file="shared_pseudocode.xml" hover="function: SynchronizeErrors()">SynchronizeErrors</a>();
        <a link="AArch64.ESBOperation.0" file="shared_pseudocode.xml" hover="function: AArch64.ESBOperation()">AArch64.ESBOperation</a>();
        if PSTATE.EL IN {<a link="EL0" file="shared_pseudocode.xml" hover="constant bits(2) EL0 = '00'">EL0</a>, <a link="EL1" file="shared_pseudocode.xml" hover="constant bits(2) EL1 = '01'">EL1</a>} &amp;&amp; <a link="impl-shared.EL2Enabled.0" file="shared_pseudocode.xml" hover="function: boolean EL2Enabled()">EL2Enabled</a>() then <a link="AArch64.vESBOperation.0" file="shared_pseudocode.xml" hover="function: AArch64.vESBOperation()">AArch64.vESBOperation</a>();
        <a link="impl-shared.TakeUnmaskedSErrorInterrupts.0" file="shared_pseudocode.xml" hover="function: TakeUnmaskedSErrorInterrupts()">TakeUnmaskedSErrorInterrupts</a>();

    when <a link="SystemHintOp_PSB" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_PSB</a>
        <a link="impl-aarch64.ProfilingSynchronizationBarrier.0" file="shared_pseudocode.xml" hover="function: ProfilingSynchronizationBarrier()">ProfilingSynchronizationBarrier</a>();

    when <a link="SystemHintOp_TSB" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_TSB</a>
        <a link="impl-shared.TraceSynchronizationBarrier.0" file="shared_pseudocode.xml" hover="function: TraceSynchronizationBarrier()">TraceSynchronizationBarrier</a>();

    when <a link="SystemHintOp_CSDB" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_CSDB</a>
        <a link="impl-shared.ConsumptionOfSpeculativeDataBarrier.0" file="shared_pseudocode.xml" hover="function: ConsumptionOfSpeculativeDataBarrier()">ConsumptionOfSpeculativeDataBarrier</a>();

    when <a link="SystemHintOp_BTI" file="shared_pseudocode.xml" hover="enumeration SystemHintOp {&#13; SystemHintOp_NOP,&#13; SystemHintOp_YIELD,&#13; SystemHintOp_WFE,&#13; SystemHintOp_WFI,&#13; SystemHintOp_SEV,&#13; SystemHintOp_SEVL,&#13; SystemHintOp_DGH,&#13; SystemHintOp_ESB,&#13; SystemHintOp_PSB,&#13; SystemHintOp_TSB,&#13; SystemHintOp_BTI,&#13; SystemHintOp_CSDB&#13; }">SystemHintOp_BTI</a>
        <a link="impl-aarch64.SetBTypeNext.1" file="shared_pseudocode.xml" hover="function: SetBTypeNext(bits(2) x)">SetBTypeNext</a>('00');

    otherwise // do nothing</pstext>
    </ps>
  </ps_section>
</instructionsection>
