<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2019 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->

<instructionsection id="STGP" title="STGP -- A64" type="instruction">
  <docvars>
    <docvar key="atomic-ops" value="STGP-pair-64" />
    <docvar key="instr-class" value="general" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="STGP" />
    <docvar key="offset-type" value="off7s_s" />
    <docvar key="reg-type" value="pair-64" />
  </docvars>
  <heading>STGP</heading>
  <desc>
    <brief>
      <para>Store Allocation Tag and Pair of registers</para>
    </brief>
    <authored>
      <para>Store Allocation Tag and Pair of registers stores an Allocation Tag and two 64-bit doublewords to memory, from two registers. The address used for the store is calculated from the base register and an immediate signed offset scaled by the Tag granule. The Allocation Tag is calculated from the Logical Address Tag in the base register.</para>
      <para>This instruction generates an Unchecked access.</para>
    </authored>
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <classesintro count="3">
      <txt>It has encodings from 3 classes:</txt>
      <a href="#STGP_64_ldstpair_post">Post-index</a>
      <txt>, </txt>
      <a href="#STGP_64_ldstpair_pre">Pre-index</a>
      <txt> and </txt>
      <a href="#STGP_64_ldstpair_off">Signed offset</a>
    </classesintro>
    <iclass name="Post-index" oneof="3" id="STGP_64_ldstpair_post" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="address-form" value="post-indexed" />
        <docvar key="address-form-reg-type" value="post-indexed-pair-64" />
        <docvar key="atomic-ops" value="STGP-pair-64" />
        <docvar key="instr-class" value="general" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="STGP" />
        <docvar key="offset-type" value="off7s_s" />
        <docvar key="reg-type" value="pair-64" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <arch_variants>
        <arch_variant name="ARMv8.5" feature="ARMv8.5-MemTag" />
      </arch_variants>
      <regdiagram form="32" psname="aarch64/instrs/integer/tags/mcsettaganddatapairpost">
        <box hibit="31" name="opc&lt;1&gt;" settings="1">
          <c>0</c>
        </box>
        <box hibit="30" name="opc&lt;0&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="29" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="26" name="V" settings="1">
          <c>0</c>
        </box>
        <box hibit="25" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="22" name="L" settings="1">
          <c>0</c>
        </box>
        <box hibit="21" width="7" name="simm7" usename="1">
          <c colspan="7"></c>
        </box>
        <box hibit="14" width="5" name="Xt2" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="9" width="5" name="Xn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Xt" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="STGP_64_ldstpair_post" oneofinclass="1" oneof="3" label="Post-index">
        <docvars>
          <docvar key="address-form" value="post-indexed" />
          <docvar key="address-form-reg-type" value="post-indexed-pair-64" />
          <docvar key="atomic-ops" value="STGP-pair-64" />
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="STGP" />
          <docvar key="offset-type" value="off7s_s" />
          <docvar key="reg-type" value="pair-64" />
        </docvars>
        <asmtemplate><text>STGP  </text><a link="xt1" hover="First 64-bit general-purpose register to be transferred (field &quot;Xt&quot;)">&lt;Xt1&gt;</a><text>, </text><a link="xt2" hover="Second 64-bit general-purpose register to be transferred (field &quot;Xt2&quot;)">&lt;Xt2&gt;</a><text>, [</text><a link="xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Xn&quot;)">&lt;Xn|SP&gt;</a><text>], #</text><a link="imm_1" hover="Signed immediate offset, multiple of 16 [-1024-1008] (field &quot;simm7&quot;)">&lt;imm&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="aarch64/instrs/integer/tags/mcsettaganddatapairpost" mylink="aarch64.instrs.integer.tags.mcsettaganddatapairpost" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Xn);
integer t = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Xt);
integer t2 = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Xt2);
bits(64) offset = <a link="impl-shared.LSL.2" file="shared_pseudocode.xml" hover="function: bits(N) LSL(bits(N) x, integer shift)">LSL</a>(<a link="impl-shared.SignExtend.2" file="shared_pseudocode.xml" hover="function: bits(N) SignExtend(bits(M) x, integer N)">SignExtend</a>(simm7, 64), <a link="LOG2_TAG_GRANULE" file="shared_pseudocode.xml" hover="constant integer LOG2_TAG_GRANULE = 4">LOG2_TAG_GRANULE</a>);
boolean writeback = TRUE;
boolean postindex = TRUE;</pstext>
        </ps>
      </ps_section>
    </iclass>
    <iclass name="Pre-index" oneof="3" id="STGP_64_ldstpair_pre" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="address-form" value="pre-indexed" />
        <docvar key="address-form-reg-type" value="pre-indexed-pair-64" />
        <docvar key="atomic-ops" value="STGP-pair-64" />
        <docvar key="instr-class" value="general" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="STGP" />
        <docvar key="offset-type" value="off7s_s" />
        <docvar key="reg-type" value="pair-64" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <arch_variants>
        <arch_variant name="ARMv8.5" feature="ARMv8.5-MemTag" />
      </arch_variants>
      <regdiagram form="32" psname="aarch64/instrs/integer/tags/mcsettaganddatapairpre">
        <box hibit="31" name="opc&lt;1&gt;" settings="1">
          <c>0</c>
        </box>
        <box hibit="30" name="opc&lt;0&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="29" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="26" name="V" settings="1">
          <c>0</c>
        </box>
        <box hibit="25" width="3" settings="3">
          <c>0</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="22" name="L" settings="1">
          <c>0</c>
        </box>
        <box hibit="21" width="7" name="simm7" usename="1">
          <c colspan="7"></c>
        </box>
        <box hibit="14" width="5" name="Xt2" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="9" width="5" name="Xn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Xt" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="STGP_64_ldstpair_pre" oneofinclass="1" oneof="3" label="Pre-index">
        <docvars>
          <docvar key="address-form" value="pre-indexed" />
          <docvar key="address-form-reg-type" value="pre-indexed-pair-64" />
          <docvar key="atomic-ops" value="STGP-pair-64" />
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="STGP" />
          <docvar key="offset-type" value="off7s_s" />
          <docvar key="reg-type" value="pair-64" />
        </docvars>
        <asmtemplate><text>STGP  </text><a link="xt1" hover="First 64-bit general-purpose register to be transferred (field &quot;Xt&quot;)">&lt;Xt1&gt;</a><text>, </text><a link="xt2" hover="Second 64-bit general-purpose register to be transferred (field &quot;Xt2&quot;)">&lt;Xt2&gt;</a><text>, [</text><a link="xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Xn&quot;)">&lt;Xn|SP&gt;</a><text>, #</text><a link="imm_1" hover="Signed immediate offset, multiple of 16 [-1024-1008] (field &quot;simm7&quot;)">&lt;imm&gt;</a><text>]!</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="aarch64/instrs/integer/tags/mcsettaganddatapairpre" mylink="aarch64.instrs.integer.tags.mcsettaganddatapairpre" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Xn);
integer t = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Xt);
integer t2 = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Xt2);
bits(64) offset = <a link="impl-shared.LSL.2" file="shared_pseudocode.xml" hover="function: bits(N) LSL(bits(N) x, integer shift)">LSL</a>(<a link="impl-shared.SignExtend.2" file="shared_pseudocode.xml" hover="function: bits(N) SignExtend(bits(M) x, integer N)">SignExtend</a>(simm7, 64), <a link="LOG2_TAG_GRANULE" file="shared_pseudocode.xml" hover="constant integer LOG2_TAG_GRANULE = 4">LOG2_TAG_GRANULE</a>);
boolean writeback = TRUE;
boolean postindex = FALSE;</pstext>
        </ps>
      </ps_section>
    </iclass>
    <iclass name="Signed offset" oneof="3" id="STGP_64_ldstpair_off" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="address-form" value="signed-scaled-offset" />
        <docvar key="address-form-reg-type" value="signed-scaled-offset-pair-64" />
        <docvar key="atomic-ops" value="STGP-pair-64" />
        <docvar key="instr-class" value="general" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="STGP" />
        <docvar key="offset-type" value="off7s_s" />
        <docvar key="reg-type" value="pair-64" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <arch_variants>
        <arch_variant name="ARMv8.5" feature="ARMv8.5-MemTag" />
      </arch_variants>
      <regdiagram form="32" psname="aarch64/instrs/integer/tags/mcsettaganddatapair">
        <box hibit="31" name="opc&lt;1&gt;" settings="1">
          <c>0</c>
        </box>
        <box hibit="30" name="opc&lt;0&gt;" settings="1">
          <c>1</c>
        </box>
        <box hibit="29" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="26" name="V" settings="1">
          <c>0</c>
        </box>
        <box hibit="25" width="3" settings="3">
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="22" name="L" settings="1">
          <c>0</c>
        </box>
        <box hibit="21" width="7" name="simm7" usename="1">
          <c colspan="7"></c>
        </box>
        <box hibit="14" width="5" name="Xt2" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="9" width="5" name="Xn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Xt" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="STGP_64_ldstpair_off" oneofinclass="1" oneof="3" label="Signed offset">
        <docvars>
          <docvar key="address-form" value="signed-scaled-offset" />
          <docvar key="address-form-reg-type" value="signed-scaled-offset-pair-64" />
          <docvar key="atomic-ops" value="STGP-pair-64" />
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="STGP" />
          <docvar key="offset-type" value="off7s_s" />
          <docvar key="reg-type" value="pair-64" />
        </docvars>
        <asmtemplate><text>STGP  </text><a link="xt1" hover="First 64-bit general-purpose register to be transferred (field &quot;Xt&quot;)">&lt;Xt1&gt;</a><text>, </text><a link="xt2" hover="Second 64-bit general-purpose register to be transferred (field &quot;Xt2&quot;)">&lt;Xt2&gt;</a><text>, [</text><a link="xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Xn&quot;)">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link="imm" hover="Optional signed immediate offset, multiple of 16 [-1024-1008], default 0 (field &quot;simm7&quot;)">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="aarch64/instrs/integer/tags/mcsettaganddatapair" mylink="aarch64.instrs.integer.tags.mcsettaganddatapair" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Xn);
integer t = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Xt);
integer t2 = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Xt2);
bits(64) offset = <a link="impl-shared.LSL.2" file="shared_pseudocode.xml" hover="function: bits(N) LSL(bits(N) x, integer shift)">LSL</a>(<a link="impl-shared.SignExtend.2" file="shared_pseudocode.xml" hover="function: bits(N) SignExtend(bits(M) x, integer N)">SignExtend</a>(simm7, 64), <a link="LOG2_TAG_GRANULE" file="shared_pseudocode.xml" hover="constant integer LOG2_TAG_GRANULE = 4">LOG2_TAG_GRANULE</a>);
boolean writeback = FALSE;
boolean postindex = FALSE;</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="STGP_64_ldstpair_off, STGP_64_ldstpair_post, STGP_64_ldstpair_pre" symboldefcount="1">
      <symbol link="xt1">&lt;Xt1&gt;</symbol>
      <account encodedin="Xt">
        <intro>
          <para>Is the 64-bit name of the first general-purpose register to be transferred, encoded in the "Xt" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="STGP_64_ldstpair_off, STGP_64_ldstpair_post, STGP_64_ldstpair_pre" symboldefcount="1">
      <symbol link="xt2">&lt;Xt2&gt;</symbol>
      <account encodedin="Xt2">
        <intro>
          <para>Is the 64-bit name of the second general-purpose register to be transferred, encoded in the "Xt2" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="STGP_64_ldstpair_off, STGP_64_ldstpair_post, STGP_64_ldstpair_pre" symboldefcount="1">
      <symbol link="xn_sp">&lt;Xn|SP&gt;</symbol>
      <account encodedin="Xn">
        <intro>
          <para>Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the "Xn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="STGP_64_ldstpair_post, STGP_64_ldstpair_pre" symboldefcount="1">
      <symbol link="imm_1">&lt;imm&gt;</symbol>
      <account encodedin="simm7">
        <intro>
          <para>For the post-index and pre-index variant: is the signed immediate offset, a multiple of 16 in the range -1024 to 1008, encoded in the "simm7" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="STGP_64_ldstpair_off" symboldefcount="2">
      <symbol link="imm">&lt;imm&gt;</symbol>
      <account encodedin="simm7">
        <docvars>
          <docvar key="address-form" value="signed-scaled-offset" />
          <docvar key="address-form-reg-type" value="signed-scaled-offset-pair-64" />
        </docvars>
        <intro>
          <para>For the signed offset variant: is the optional signed immediate offset, a multiple of 16 in the range -1024 to 1008, defaulting to 0 and encoded in the "simm7" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/integer/tags/mcsettaganddatapairpost" mylink="commonps" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">bits(64) address;
bits(64) data1;
bits(64) data2;

<a link="impl-aarch64.SetTagCheckedInstruction.1" file="shared_pseudocode.xml" hover="function: SetTagCheckedInstruction(boolean checked)">SetTagCheckedInstruction</a>(FALSE);

if n == 31 then
    <a link="impl-aarch64.CheckSPAlignment.0" file="shared_pseudocode.xml" hover="function: CheckSPAlignment()">CheckSPAlignment</a>();
    address = <a link="impl-aarch64.SP.read.0" file="shared_pseudocode.xml" hover="accessor: bits(width) SP[]">SP</a>[];
else
    address = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[n];

data1 = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[t];
data2 = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[t2];

if !postindex then
    address = address + offset;

<a link="impl-aarch64.Mem.write.3" file="shared_pseudocode.xml" hover="accessor: Mem[bits(64) address, integer size, AccType acctype] = bits(size*8) value">Mem</a>[address, 8, <a link="AccType_NORMAL" file="shared_pseudocode.xml" hover="enumeration AccType {AccType_NORMAL, AccType_VEC, AccType_STREAM, AccType_VECSTREAM, AccType_ATOMIC, AccType_ATOMICRW, AccType_ORDERED, AccType_ORDEREDRW, AccType_ORDEREDATOMIC, AccType_ORDEREDATOMICRW,&#13; AccType_LIMITEDORDERED, AccType_UNPRIV, AccType_IFETCH, AccType_PTW, AccType_NONFAULT, AccType_CNOTFIRST, AccType_NV2REGISTER,   AccType_DC, AccType_DC_UNPRIV, AccType_IC, AccType_DCZVA, AccType_AT}">AccType_NORMAL</a>] = data1;
<a link="impl-aarch64.Mem.write.3" file="shared_pseudocode.xml" hover="accessor: Mem[bits(64) address, integer size, AccType acctype] = bits(size*8) value">Mem</a>[address+8, 8, <a link="AccType_NORMAL" file="shared_pseudocode.xml" hover="enumeration AccType {AccType_NORMAL, AccType_VEC, AccType_STREAM, AccType_VECSTREAM, AccType_ATOMIC, AccType_ATOMICRW, AccType_ORDERED, AccType_ORDEREDRW, AccType_ORDEREDATOMIC, AccType_ORDEREDATOMICRW,&#13; AccType_LIMITEDORDERED, AccType_UNPRIV, AccType_IFETCH, AccType_PTW, AccType_NONFAULT, AccType_CNOTFIRST, AccType_NV2REGISTER,   AccType_DC, AccType_DC_UNPRIV, AccType_IC, AccType_DCZVA, AccType_AT}">AccType_NORMAL</a>] = data2;

<a link="AArch64.MemTag.write.2" file="shared_pseudocode.xml" hover="accessor: AArch64.MemTag[bits(64) address, AccType acctype] = bits(4) value">AArch64.MemTag</a>[address, <a link="AccType_NORMAL" file="shared_pseudocode.xml" hover="enumeration AccType {AccType_NORMAL, AccType_VEC, AccType_STREAM, AccType_VECSTREAM, AccType_ATOMIC, AccType_ATOMICRW, AccType_ORDERED, AccType_ORDEREDRW, AccType_ORDEREDATOMIC, AccType_ORDEREDATOMICRW,&#13; AccType_LIMITEDORDERED, AccType_UNPRIV, AccType_IFETCH, AccType_PTW, AccType_NONFAULT, AccType_CNOTFIRST, AccType_NV2REGISTER,   AccType_DC, AccType_DC_UNPRIV, AccType_IC, AccType_DCZVA, AccType_AT}">AccType_NORMAL</a>] = <a link="AArch64.AllocationTagFromAddress.1" file="shared_pseudocode.xml" hover="function: bits(4) AArch64.AllocationTagFromAddress(bits(64) tagged_address)">AArch64.AllocationTagFromAddress</a>(address);

if writeback then
    if postindex then
        address = address + offset;

    if n == 31 then
        <a link="impl-aarch64.SP.write.0" file="shared_pseudocode.xml" hover="accessor: SP[] = bits(width) value">SP</a>[] = address;
    else
        <a link="impl-aarch64.X.write.1" file="shared_pseudocode.xml" hover="accessor: X[integer n] = bits(width) value">X</a>[n] = address;</pstext>
    </ps>
  </ps_section>
</instructionsection>
