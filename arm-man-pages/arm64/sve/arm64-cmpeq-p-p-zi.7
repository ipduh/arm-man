.nh
.TH "CMP<cc> (immediate)" "7" " "  "instruction" "sve"
.SS CMP<cc> (immediate)
 Compare vector to immediate

 Compare active integer elements in the source vector with an immediate, and
 place the boolean results of the specified comparison in the corresponding
 elements of the destination predicate. Inactive elements in the destination
 predicate register are set to zero. Sets the First (N), None (Z), !Last (C)
 condition flags based on the predicate result, and the V flag to zero.



 The <cc> symbol specifies one of the standard ARM condition codes: EQ, GE, GT,
 HI, HS, LE, LO, LS, LT or NE.

 Status : Green

 Predicated : True

 takes_pred_movprfx : False


It has encodings from 10 classes: Equal, Greater than, Greater than or equal, Higher, Higher or same, Less than, Less than or equal, Lower, Lower or same and Not equal

.SS Equal - A64 - cmpeq_p_p_zi_
 
                                       13                          
                                     14 |                          
                       21          15 | |                          
                 24  22 |        16 | | |    10         5 4       0
                  |   | |         | | | |     |         | |       |
   0 0 1 0 0 1 0 1|. .|0|. . . . .|1|0|0|. . .|. . . . .|0|. . . .|
                  |     |         |   | |     |         | |
                  |     `-imm5    |   | `-Pg  `-Zn      | `-Pd
                  `-size          |   `-o2              `-ne
                                  `-op
  
  
 
.SS Equal
 
 CMPEQ   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Pd);
 SVECmp op = Cmp_EQ;
 integer imm = SInt(imm5);
 boolean unsigned = FALSE;
.SS Greater than - A64 - cmpgt_p_p_zi_
 
                                       13                          
                                     14 |                          
                       21          15 | |                          
                 24  22 |        16 | | |    10         5 4       0
                  |   | |         | | | |     |         | |       |
   0 0 1 0 0 1 0 1|. .|0|. . . . .|0|0|0|. . .|. . . . .|1|. . . .|
                  |     |         |   | |     |         | |
                  |     `-imm5    |   | `-Pg  `-Zn      | `-Pd
                  `-size          |   `-lt              `-ne
                                  `-op
  
  
 
.SS Greater than
 
 CMPGT   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Pd);
 SVECmp op = Cmp_GT;
 integer imm = SInt(imm5);
 boolean unsigned = FALSE;
.SS Greater than or equal - A64 - cmpge_p_p_zi_
 
                                       13                          
                                     14 |                          
                       21          15 | |                          
                 24  22 |        16 | | |    10         5 4       0
                  |   | |         | | | |     |         | |       |
   0 0 1 0 0 1 0 1|. .|0|. . . . .|0|0|0|. . .|. . . . .|0|. . . .|
                  |     |         |   | |     |         | |
                  |     `-imm5    |   | `-Pg  `-Zn      | `-Pd
                  `-size          |   `-lt              `-ne
                                  `-op
  
  
 
.SS Greater than or equal
 
 CMPGE   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Pd);
 SVECmp op = Cmp_GE;
 integer imm = SInt(imm5);
 boolean unsigned = FALSE;
.SS Higher - A64 - cmphi_p_p_zi_
 
                                                                   
                                                                   
                       21              13                          
                 24  22 |            14 |    10         5 4       0
                  |   | |             | |     |         | |       |
   0 0 1 0 0 1 0 0|. .|1|. . . . . . .|0|. . .|. . . . .|1|. . . .|
                  |     |             | |     |         | |
                  |     `-imm7        | `-Pg  `-Zn      | `-Pd
                  `-size              `-lt              `-ne
  
  
 
.SS Higher
 
 CMPHI   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Pd);
 SVECmp op = Cmp_GT;
 integer imm = UInt(imm7);
 boolean unsigned = TRUE;
.SS Higher or same - A64 - cmphs_p_p_zi_
 
                                                                   
                                                                   
                       21              13                          
                 24  22 |            14 |    10         5 4       0
                  |   | |             | |     |         | |       |
   0 0 1 0 0 1 0 0|. .|1|. . . . . . .|0|. . .|. . . . .|0|. . . .|
                  |     |             | |     |         | |
                  |     `-imm7        | `-Pg  `-Zn      | `-Pd
                  `-size              `-lt              `-ne
  
  
 
.SS Higher or same
 
 CMPHS   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Pd);
 SVECmp op = Cmp_GE;
 integer imm = UInt(imm7);
 boolean unsigned = TRUE;
.SS Less than - A64 - cmplt_p_p_zi_
 
                                       13                          
                                     14 |                          
                       21          15 | |                          
                 24  22 |        16 | | |    10         5 4       0
                  |   | |         | | | |     |         | |       |
   0 0 1 0 0 1 0 1|. .|0|. . . . .|0|0|1|. . .|. . . . .|0|. . . .|
                  |     |         |   | |     |         | |
                  |     `-imm5    |   | `-Pg  `-Zn      | `-Pd
                  `-size          |   `-lt              `-ne
                                  `-op
  
  
 
.SS Less than
 
 CMPLT   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Pd);
 SVECmp op = Cmp_LT;
 integer imm = SInt(imm5);
 boolean unsigned = FALSE;
.SS Less than or equal - A64 - cmple_p_p_zi_
 
                                       13                          
                                     14 |                          
                       21          15 | |                          
                 24  22 |        16 | | |    10         5 4       0
                  |   | |         | | | |     |         | |       |
   0 0 1 0 0 1 0 1|. .|0|. . . . .|0|0|1|. . .|. . . . .|1|. . . .|
                  |     |         |   | |     |         | |
                  |     `-imm5    |   | `-Pg  `-Zn      | `-Pd
                  `-size          |   `-lt              `-ne
                                  `-op
  
  
 
.SS Less than or equal
 
 CMPLE   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Pd);
 SVECmp op = Cmp_LE;
 integer imm = SInt(imm5);
 boolean unsigned = FALSE;
.SS Lower - A64 - cmplo_p_p_zi_
 
                                                                   
                                                                   
                       21              13                          
                 24  22 |            14 |    10         5 4       0
                  |   | |             | |     |         | |       |
   0 0 1 0 0 1 0 0|. .|1|. . . . . . .|1|. . .|. . . . .|0|. . . .|
                  |     |             | |     |         | |
                  |     `-imm7        | `-Pg  `-Zn      | `-Pd
                  `-size              `-lt              `-ne
  
  
 
.SS Lower
 
 CMPLO   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Pd);
 SVECmp op = Cmp_LT;
 integer imm = UInt(imm7);
 boolean unsigned = TRUE;
.SS Lower or same - A64 - cmpls_p_p_zi_
 
                                                                   
                                                                   
                       21              13                          
                 24  22 |            14 |    10         5 4       0
                  |   | |             | |     |         | |       |
   0 0 1 0 0 1 0 0|. .|1|. . . . . . .|1|. . .|. . . . .|1|. . . .|
                  |     |             | |     |         | |
                  |     `-imm7        | `-Pg  `-Zn      | `-Pd
                  `-size              `-lt              `-ne
  
  
 
.SS Lower or same
 
 CMPLS   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Pd);
 SVECmp op = Cmp_LE;
 integer imm = UInt(imm7);
 boolean unsigned = TRUE;
.SS Not equal - A64 - cmpne_p_p_zi_
 
                                       13                          
                                     14 |                          
                       21          15 | |                          
                 24  22 |        16 | | |    10         5 4       0
                  |   | |         | | | |     |         | |       |
   0 0 1 0 0 1 0 1|. .|0|. . . . .|1|0|0|. . .|. . . . .|1|. . . .|
                  |     |         |   | |     |         | |
                  |     `-imm5    |   | `-Pg  `-Zn      | `-Pd
                  `-size          |   `-o2              `-ne
                                  `-op
  
  
 
.SS Not equal
 
 CMPNE   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, #<imm>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Pd);
 SVECmp op = Cmp_NE;
 integer imm = SInt(imm5);
 boolean unsigned = FALSE;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[n];
 bits(PL) result;
 
 for e = 0 to elements-1
     integer element1 = Int(Elem[operand1, e, esize], unsigned);
     if ElemP[mask, e, esize] == '1' then
         boolean cond;
         case op of
             when Cmp_EQ cond = element1 == imm;
             when Cmp_NE cond = element1 != imm;
             when Cmp_GE cond = element1 >= imm;
             when Cmp_LT cond = element1 <  imm;
             when Cmp_GT cond = element1 >  imm;
             when Cmp_LE cond = element1 <= imm;
         ElemP[result, e, esize] = if cond then '1' else '0';
     else
         ElemP[result, e, esize] = '0';
 
 PSTATE.<N,Z,C,V> = PredTest(mask, result, esize);
 P[d] = result;
 

.SS Assembler Symbols

 <Pd>
  Encoded in Pd
  Is the name of the destination scalable predicate register, encoded in the
  "Pd" field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T> 
  00   B   
  01   H   
  10   S   
  11   D   

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zn>
  Encoded in Zn
  Is the name of the source scalable vector register, encoded in the "Zn" field.

 <imm>
  Encoded in imm5
  For the equal, greater than, greater than or equal, less than, less than or
  equal and not equal variant: is the signed immediate operand, in the range -16
  to 15, encoded in the "imm5" field.

 <imm>
  Encoded in imm7
  For the higher, higher or same, lower and lower or same variant: is the
  unsigned immediate operand, in the range 0 to 127, encoded in the "imm7"
  field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[n];
 bits(PL) result;
 
 for e = 0 to elements-1
     integer element1 = Int(Elem[operand1, e, esize], unsigned);
     if ElemP[mask, e, esize] == '1' then
         boolean cond;
         case op of
             when Cmp_EQ cond = element1 == imm;
             when Cmp_NE cond = element1 != imm;
             when Cmp_GE cond = element1 >= imm;
             when Cmp_LT cond = element1 <  imm;
             when Cmp_GT cond = element1 >  imm;
             when Cmp_LE cond = element1 <= imm;
         ElemP[result, e, esize] = if cond then '1' else '0';
     else
         ElemP[result, e, esize] = '0';
 
 PSTATE.<N,Z,C,V> = PredTest(mask, result, esize);
 P[d] = result;

