.nh
.TH "CTERMEQ, CTERMNE" "7" " "  "instruction" "sve"
.SS CTERMEQ, CTERMNE
 Compare and terminate loop

 Detect termination conditions in serialized vector loops. Tests whether the
 comparison between the scalar source operands holds true and if not tests the
 state of the !Last condition flag (C) which indicates whether the previous
 flag-setting predicate instruction selected the last element of the vector
 partition.

 The Z and C condition flags are preserved by this instruction. The N and V
 condition flags are set as a pair to generate one of the following conditions
 for a subsequent conditional instruction:



 * GE (N=0 & V=0): continue loop (compare failed and last element not selected);

 * LT (N=0 & V=1): terminate loop (last element selected);

 * LT (N=1 & V=0): terminate loop (compare succeeded);

 The scalar source operands are 32-bit or 64-bit general-purpose registers of
 the same size.

 Status : Green

 Predicated : False

 takes_pred_movprfx : False


It has encodings from 2 classes: Equal and Not equal

.SS Equal - A64 - ctermeq_rr_
 
                       21                                          
                     22 |                                          
                   23 | |                                          
     30          24 | | |        16          10         5 4 3 2   0
      |           | | | |         |           |         | | | |   |
   0 0|1 0 0 1 0 1|1|.|1|. . . . .|0 0 1 0 0 0|. . . . .|0|0|0|0 0|
                  | |   |                     |         |
                  | |   `-Rm                  `-Rn      `-ne
                  | `-sz
                  `-op
  
  
 
.SS Equal
 
 CTERMEQ <R><n>, <R><m>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 32 << UInt(sz);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 SVECmp op = Cmp_EQ;
.SS Not equal - A64 - ctermne_rr_
 
                       21                                          
                     22 |                                          
                   23 | |                                          
     30          24 | | |        16          10         5 4 3 2   0
      |           | | | |         |           |         | | | |   |
   0 0|1 0 0 1 0 1|1|.|1|. . . . .|0 0 1 0 0 0|. . . . .|1|0|0|0 0|
                  | |   |                     |         |
                  | |   `-Rm                  `-Rn      `-ne
                  | `-sz
                  `-op
  
  
 
.SS Not equal
 
 CTERMNE <R><n>, <R><m>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 32 << UInt(sz);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 SVECmp op = Cmp_NE;
 
 CheckSVEEnabled();
 bits(esize) operand1 = X[n];
 bits(esize) operand2 = X[m];
 integer element1 = UInt(operand1);
 integer element2 = UInt(operand2);
 boolean term;
 
 case op of
     when Cmp_EQ term = element1 == element2;
     when Cmp_NE term = element1 != element2;
 if term then
     PSTATE.N = '1';
     PSTATE.V = '0';
 else
     PSTATE.N = '0';
     PSTATE.V = (NOT PSTATE.C);
 

.SS Assembler Symbols

 <R>
  Encoded in sz
  Is a width specifier,

  sz <R> 
  0  W   
  1  X   

 <n>
  Encoded in Rn
  Is the number [0-30] of the source general-purpose register or the name ZR
  (31), encoded in the "Rn" field.

 <m>
  Encoded in Rm
  Is the number [0-30] of the source general-purpose register or the name ZR
  (31), encoded in the "Rm" field.



.SS Operation

 CheckSVEEnabled();
 bits(esize) operand1 = X[n];
 bits(esize) operand2 = X[m];
 integer element1 = UInt(operand1);
 integer element2 = UInt(operand2);
 boolean term;
 
 case op of
     when Cmp_EQ term = element1 == element2;
     when Cmp_NE term = element1 != element2;
 if term then
     PSTATE.N = '1';
     PSTATE.V = '0';
 else
     PSTATE.N = '0';
     PSTATE.V = (NOT PSTATE.C);

