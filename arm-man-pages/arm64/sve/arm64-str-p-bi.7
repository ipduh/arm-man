.nh
.TH "STR (predicate)" "7" " "  "instruction" "sve"
.SS STR (predicate)
 Store predicate register

 Store a predicate register to a memory address generated by a 64-bit scalar
 base, plus an immediate offset in the range -256 to 255 which is multiplied by
 the current predicate register size in bytes. This instruction is unpredicated.

 The store is performed as a stream of bytes containing 8 consecutive predicate
 bits in ascending element order, without any endian conversion.

 Status : Green



.SS SVE - A64 - str_p_bi_
 
                                                                   
                                                                   
                                                                   
                     22          16    13    10         5 4       0
                      |           |     |     |         | |       |
   1 1 1 0 0 1 0 1 1 0|. . . . . .|0 0 0|. . .|. . . . .|0|. . . .|
                      |                 |     |           |
                      `-imm9h           |     `-Rn        `-Pt
                                        `-imm9l
  
  
 
.SS SVE
 
 STR     <Pt>, [<Xn|SP>{, #<imm>, MUL VL}]
 
 if !HaveSVE() then UNDEFINED;
 integer t = UInt(Pt);
 integer n = UInt(Rn);
 integer imm = SInt(imm9h:imm9l);
 
 CheckSVEEnabled();
 integer elements = PL DIV 8;
 bits(PL) src;
 bits(64) base;
 integer offset = imm * elements;
 
 if n == 31 then
     CheckSPAlignment();
     if HaveMTEExt() then SetTagCheckedInstruction(FALSE);
     base = SP[];
 else
     if HaveMTEExt() then SetTagCheckedInstruction(TRUE);
     base = X[n];
 
 src = P[t];
 boolean aligned = AArch64.CheckAlignment(base + offset, 2, AccType_NORMAL, TRUE);
 for e = 0 to elements-1
     AArch64.MemSingle[base + offset, 1, AccType_NORMAL, aligned] = Elem[src, e, 8];
     offset = offset + 1;
 

.SS Assembler Symbols

 <Pt>
  Encoded in Pt
  Is the name of the scalable predicate transfer register, encoded in the "Pt"
  field.

 <Xn|SP>
  Encoded in Rn
  Is the 64-bit name of the general-purpose base register or stack pointer,
  encoded in the "Rn" field.

 <imm>
  Encoded in imm9h:imm9l
  Is the optional signed immediate vector offset, in the range -256 to 255,
  defaulting to 0, encoded in the "imm9h:imm9l" fields.



.SS Operation

 CheckSVEEnabled();
 integer elements = PL DIV 8;
 bits(PL) src;
 bits(64) base;
 integer offset = imm * elements;
 
 if n == 31 then
     CheckSPAlignment();
     if HaveMTEExt() then SetTagCheckedInstruction(FALSE);
     base = SP[];
 else
     if HaveMTEExt() then SetTagCheckedInstruction(TRUE);
     base = X[n];
 
 src = P[t];
 boolean aligned = AArch64.CheckAlignment(base + offset, 2, AccType_NORMAL, TRUE);
 for e = 0 to elements-1
     AArch64.MemSingle[base + offset, 1, AccType_NORMAL, aligned] = Elem[src, e, 8];
     offset = offset + 1;

