.nh
.TH "LD1SB (scalar plus scalar)" "7" " "  "instruction" "sve"
.SS LD1SB (scalar plus scalar)
 Contiguous load signed bytes to vector (scalar index)

 Contiguous load of signed bytes to elements of a vector register from the
 memory address generated by a 64-bit scalar base and scalar index which is
 added to the base address. After each element access the index value is
 incremented, but the index register is not updated. Inactive elements will not
 read Device memory or signal a fault, and are set to zero in the destination
 vector.

 Status : Green

 Predicated : True


It has encodings from 3 classes: 16-bit element, 32-bit element and 64-bit element

.SS 16-bit element - A64 - ld1sb_z_p_br_s16
 
                                                                   
                                                                   
                       21                                          
               25    22 |        16    13    10         5         0
                |     | |         |     |     |         |         |
   1 0 1 0 0 1 0|1 1 1|0|. . . . .|0 1 0|. . .|. . . . .|. . . . .|
                |     | |               |     |         |
                |     | `-Rm            `-Pg  `-Rn      `-Zt
                |     `-dtype<0>
                `-dtype<3:1>
  
  
 
.SS 16-bit element
 
 LD1SB   { <Zt>.H }, <Pg>/Z, [<Xn|SP>, <Xm>]
 
 if !HaveSVE() then UNDEFINED;
 if Rm == '11111' then UNDEFINED;
 integer t = UInt(Zt);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 integer g = UInt(Pg);
 integer esize = 16;
 integer msize = 8;
 boolean unsigned = FALSE;
.SS 32-bit element - A64 - ld1sb_z_p_br_s32
 
                                                                   
                                                                   
                       21                                          
               25    22 |        16    13    10         5         0
                |     | |         |     |     |         |         |
   1 0 1 0 0 1 0|1 1 0|1|. . . . .|0 1 0|. . .|. . . . .|. . . . .|
                |     | |               |     |         |
                |     | `-Rm            `-Pg  `-Rn      `-Zt
                |     `-dtype<0>
                `-dtype<3:1>
  
  
 
.SS 32-bit element
 
 LD1SB   { <Zt>.S }, <Pg>/Z, [<Xn|SP>, <Xm>]
 
 if !HaveSVE() then UNDEFINED;
 if Rm == '11111' then UNDEFINED;
 integer t = UInt(Zt);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 integer g = UInt(Pg);
 integer esize = 32;
 integer msize = 8;
 boolean unsigned = FALSE;
.SS 64-bit element - A64 - ld1sb_z_p_br_s64
 
                                                                   
                                                                   
                       21                                          
               25    22 |        16    13    10         5         0
                |     | |         |     |     |         |         |
   1 0 1 0 0 1 0|1 1 0|0|. . . . .|0 1 0|. . .|. . . . .|. . . . .|
                |     | |               |     |         |
                |     | `-Rm            `-Pg  `-Rn      `-Zt
                |     `-dtype<0>
                `-dtype<3:1>
  
  
 
.SS 64-bit element
 
 LD1SB   { <Zt>.D }, <Pg>/Z, [<Xn|SP>, <Xm>]
 
 if !HaveSVE() then UNDEFINED;
 if Rm == '11111' then UNDEFINED;
 integer t = UInt(Zt);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 integer g = UInt(Pg);
 integer esize = 64;
 integer msize = 8;
 boolean unsigned = FALSE;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(64) base;
 bits(64) addr;
 bits(PL) mask = P[g];
 bits(VL) result;
 bits(msize) data;
 bits(64) offset = X[m];
 constant integer mbytes = msize DIV 8;
 
 if HaveMTEExt() then SetTagCheckedInstruction(TRUE);
 
 if n == 31 then
     CheckSPAlignment();
     base = SP[];
 else
     base = X[n];
 
 for e = 0 to elements-1
     addr = base + UInt(offset) * mbytes;
     if ElemP[mask, e, esize] == '1' then
         data = Mem[addr, mbytes, AccType_NORMAL];
         Elem[result, e, esize] = Extend(data, esize, unsigned);
     else
         Elem[result, e, esize] = Zeros();
     offset = offset + 1;
 
 Z[t] = result;
 

.SS Assembler Symbols

 <Zt>
  Encoded in Zt
  Is the name of the scalable vector register to be transferred, encoded in the
  "Zt" field.

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Xn|SP>
  Encoded in Rn
  Is the 64-bit name of the general-purpose base register or stack pointer,
  encoded in the "Rn" field.

 <Xm>
  Encoded in Rm
  Is the 64-bit name of the general-purpose offset register, encoded in the "Rm"
  field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(64) base;
 bits(64) addr;
 bits(PL) mask = P[g];
 bits(VL) result;
 bits(msize) data;
 bits(64) offset = X[m];
 constant integer mbytes = msize DIV 8;
 
 if HaveMTEExt() then SetTagCheckedInstruction(TRUE);
 
 if n == 31 then
     CheckSPAlignment();
     base = SP[];
 else
     base = X[n];
 
 for e = 0 to elements-1
     addr = base + UInt(offset) * mbytes;
     if ElemP[mask, e, esize] == '1' then
         data = Mem[addr, mbytes, AccType_NORMAL];
         Elem[result, e, esize] = Extend(data, esize, unsigned);
     else
         Elem[result, e, esize] = Zeros();
     offset = offset + 1;
 
 Z[t] = result;

