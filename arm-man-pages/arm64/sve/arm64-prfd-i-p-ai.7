.nh
.TH "PRFD (vector plus immediate)" "7" " "  "instruction" "sve"
.SS PRFD (vector plus immediate)
 Gather prefetch doublewords (vector plus immediate)

 Gather prefetch of doublewords from the active memory addresses generated by a
 vector base plus immediate index. The index is a multiple of 8 in the range 0
 to 248. Inactive addresses are not prefetched from memory.

 The <prfop> symbol specifies the prefetch hint as a combination of three
 options: access type PLD for load or PST for store; target cache level L1, L2
 or L3; temporality (KEEP for temporal or STRM for non-temporal).

 Status : Green

 Predicated : True


It has encodings from 2 classes: 32-bit element and 64-bit element

.SS 32-bit element - A64 - prfd_i_p_ai_s
 
                                                                   
                   23                                              
                 24 |                                              
               25 | |  21        16    13    10         5 4       0
                | | |   |         |     |     |         | |       |
   1 0 0 0 0 1 0|1|1|0 0|. . . . .|1 1 1|. . .|. . . . .|0|. . . .|
                | |     |               |     |           |
                | |     `-imm5          `-Pg  `-Zn        `-prfop
                | `-msz<0>
                `-msz<1>
  
  
 
.SS 32-bit element
 
 PRFD    <prfop>, <Pg>, [<Zn>.S{, #<imm>}]
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 32;
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer level = UInt(prfop<2:1>);
 boolean stream = (prfop<0> == '1');
 pref_hint = if prfop<3> == '0' then Prefetch_READ else Prefetch_WRITE;
 integer scale = 3;
 integer offset = UInt(imm5);
.SS 64-bit element - A64 - prfd_i_p_ai_d
 
                                                                   
                   23                                              
                 24 |                                              
               25 | |  21        16    13    10         5 4       0
                | | |   |         |     |     |         | |       |
   1 1 0 0 0 1 0|1|1|0 0|. . . . .|1 1 1|. . .|. . . . .|0|. . . .|
                | |     |               |     |           |
                | |     `-imm5          `-Pg  `-Zn        `-prfop
                | `-msz<0>
                `-msz<1>
  
  
 
.SS 64-bit element
 
 PRFD    <prfop>, <Pg>, [<Zn>.D{, #<imm>}]
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 64;
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer level = UInt(prfop<2:1>);
 boolean stream = (prfop<0> == '1');
 pref_hint = if prfop<3> == '0' then Prefetch_READ else Prefetch_WRITE;
 integer scale = 3;
 integer offset = UInt(imm5);
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) base;
 bits(64) addr;
 base = Z[n];
 
 for e = 0 to elements-1
     if ElemP[mask, e, esize] == '1' then
         addr = ZeroExtend(Elem[base, e, esize], 64) + (offset << scale);
         Hint_Prefetch(addr, pref_hint, level, stream);
 

.SS Assembler Symbols

 <prfop>
  Encoded in prfop
  Is the prefetch operation specifier,

  prfop <prfop>   
  0000  PLDL1KEEP 
  0001  PLDL1STRM 
  0010  PLDL2KEEP 
  0011  PLDL2STRM 
  0100  PLDL3KEEP 
  0101  PLDL3STRM 
  x11x  #uimm4    
  1000  PSTL1KEEP 
  1001  PSTL1STRM 
  1010  PSTL2KEEP 
  1011  PSTL2STRM 
  1100  PSTL3KEEP 
  1101  PSTL3STRM 

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zn>
  Encoded in Zn
  Is the name of the base scalable vector register, encoded in the "Zn" field.

 <imm>
  Encoded in imm5
  Is the optional unsigned immediate byte offset, a multiple of 8 in the range 0
  to 248, defaulting to 0, encoded in the "imm5" field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) base;
 bits(64) addr;
 base = Z[n];
 
 for e = 0 to elements-1
     if ElemP[mask, e, esize] == '1' then
         addr = ZeroExtend(Elem[base, e, esize], 64) + (offset << scale);
         Hint_Prefetch(addr, pref_hint, level, stream);

