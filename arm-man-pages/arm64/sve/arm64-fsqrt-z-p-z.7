.nh
.TH "FSQRT" "7" " "  "instruction" "sve"
.SS FSQRT
 Floating-point square root (predicated)

 Calculate the square root of each active floating-point element of the source
 vector, and place the results in the corresponding elements of the destination
 vector. Inactive elements in the destination vector register remain unmodified.

 Status : Green

 Predicated : True

 takes_pred_movprfx : True



.SS SVE - A64 - fsqrt_z_p_z_
 
                                                                   
                                 16                                
                               17 |                                
                 24  22      18 | |    13    10         5         0
                  |   |       | | |     |     |         |         |
   0 1 1 0 0 1 0 1|. .|0 0 1 1|0|1|1 0 1|. . .|. . . . .|. . . . .|
                  |           | |       |     |         |
                  `-size      | |       `-Pg  `-Zn      `-Zd
                              | `-opc<0>
                              `-opc<1>
  
  
 
.SS SVE
 
 FSQRT   <Zd>.<T>, <Pg>/M, <Zn>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand = Z[n];
 bits(VL) result = Z[d];
 
 for e = 0 to elements-1
     bits(esize) element = Elem[operand, e, esize];
     if ElemP[mask, e, esize] == '1' then
         Elem[result, e, esize] = FPSqrt(element, FPCR);
 
 Z[d] = result;
 

.SS Assembler Symbols

 <Zd>
  Encoded in Zd
  Is the name of the destination scalable vector register, encoded in the "Zd"
  field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T>      
  00   RESERVED 
  01   H        
  10   S        
  11   D        

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zn>
  Encoded in Zn
  Is the name of the source scalable vector register, encoded in the "Zn" field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand = Z[n];
 bits(VL) result = Z[d];
 
 for e = 0 to elements-1
     bits(esize) element = Elem[operand, e, esize];
     if ElemP[mask, e, esize] == '1' then
         Elem[result, e, esize] = FPSqrt(element, FPCR);
 
 Z[d] = result;

