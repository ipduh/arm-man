.nh
.TH "CLASTB (scalar)" "7" " "  "instruction" "sve"
.SS CLASTB (scalar)
 Conditionally extract last element to general-purpose register

 From the source vector register extract the last active element, and then zero-
 extend that element to destructively place in the destination and first source
 general-purpose register. If there are no active elements then destructively
 zero-extend the least significant element-size bits of the destination and
 first source general-purpose register.

 Status : Green

 Predicated : True

 takes_pred_movprfx : False



.SS SVE - A64 - clastb_r_p_z_
 
                                                                   
                                                                   
                                 16                                
                 24  22        17 |    13    10         5         0
                  |   |         | |     |     |         |         |
   0 0 0 0 0 1 0 1|. .|1 1 0 0 0|1|1 0 1|. . .|. . . . .|. . . . .|
                  |             |       |     |         |
                  `-size        `-B     `-Pg  `-Zm      `-Rdn
  
  
 
.SS SVE
 
 CLASTB  <R><dn>, <Pg>, <R><dn>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer dn = UInt(Rdn);
 integer m = UInt(Zm);
 integer csize = if esize < 64 then 32 else 64;
 boolean isBefore = TRUE;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(esize) operand1 = X[dn];
 bits(VL) operand2 = Z[m];
 bits(csize) result;
 integer last = LastActiveElement(mask, esize);
 
 if last < 0 then
     result = ZeroExtend(operand1);
 else
     if !isBefore then
         last = last + 1;
         if last >= elements then last = 0;
     result = ZeroExtend(Elem[operand2, last, esize]);
 
 X[dn] = result;
 

.SS Assembler Symbols

 <R>
  Encoded in size
  Is a width specifier,

  size <R> 
  01   W   
  x0   W   
  11   X   

 <dn>
  Encoded in Rdn
  Is the number [0-30] of the source and destination general-purpose register or
  the name ZR (31), encoded in the "Rdn" field.

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zm>
  Encoded in Zm
  Is the name of the source scalable vector register, encoded in the "Zm" field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T> 
  00   B   
  01   H   
  10   S   
  11   D   



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(esize) operand1 = X[dn];
 bits(VL) operand2 = Z[m];
 bits(csize) result;
 integer last = LastActiveElement(mask, esize);
 
 if last < 0 then
     result = ZeroExtend(operand1);
 else
     if !isBefore then
         last = last + 1;
         if last >= elements then last = 0;
     result = ZeroExtend(Elem[operand2, last, esize]);
 
 X[dn] = result;

