.nh
.TH "COMPACT" "7" " "  "instruction" "sve"
.SS COMPACT
 Shuffle active elements of vector to the right and fill with zero

 Read the active elements from the source vector and pack them into the lowest-
 numbered elements of the destination vector. Then set any remaining elements of
 the destination vector to zero.

 Status : Green

 Predicated : True

 takes_pred_movprfx : False



.SS SVE - A64 - compact_z_p_z_
 
                                                                   
                                                                   
                                                                   
                 24  22                13    10         5         0
                  |   |                 |     |         |         |
   0 0 0 0 0 1 0 1|. .|1 0 0 0 0 1 1 0 0|. . .|. . . . .|. . . . .|
                  |                     |     |         |
                  `-size                `-Pg  `-Zn      `-Zd
  
  
 
.SS SVE
 
 COMPACT <Zd>.<T>, <Pg>, <Zn>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '0x' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[n];
 bits(VL) result;
 integer x = 0;
 
 for e = 0 to elements-1
     Elem[result, e, esize] = Zeros();
     if ElemP[mask, e, esize] == '1' then
         bits(esize) element = Elem[operand1, e, esize];
         Elem[result, x, esize] = element;
         x = x + 1;
 
 Z[d] = result;
 

.SS Assembler Symbols

 <Zd>
  Encoded in Zd
  Is the name of the destination scalable vector register, encoded in the "Zd"
  field.

 <T>
  Encoded in size<0>
  Is the size specifier,

  size<0> <T> 
  0       S   
  1       D   

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zn>
  Encoded in Zn
  Is the name of the source scalable vector register, encoded in the "Zn" field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[n];
 bits(VL) result;
 integer x = 0;
 
 for e = 0 to elements-1
     Elem[result, e, esize] = Zeros();
     if ElemP[mask, e, esize] == '1' then
         bits(esize) element = Elem[operand1, e, esize];
         Elem[result, x, esize] = element;
         x = x + 1;
 
 Z[d] = result;

