.nh
.TH "FADDA" "7" " "  "instruction" "sve"
.SS FADDA
 Floating-point add strictly-ordered reduction, accumulating in scalar

 Floating-point add a SIMD&FP scalar source and all active lanes of the vector
 source and place the result destructively in the SIMD&FP scalar source
 register. Vector elements are processed strictly in order from low to high,
 with the scalar source providing the initial value. Inactive elements in the
 source vector are ignored.

 Status : Green

 Predicated : True

 takes_pred_movprfx : False



.SS SVE - A64 - fadda_v_p_z_
 
                                                                   
                                                                   
                                 16                                
                 24  22    19  17 |    13    10         5         0
                  |   |     |   | |     |     |         |         |
   0 1 1 0 0 1 0 1|. .|0 1 1|0 0|0|0 0 1|. . .|. . . . .|. . . . .|
                  |         |   |       |     |         |
                  `-size    |   |       `-Pg  `-Zm      `-Vdn
                            |   `-opc<0>
                            `-opc<2:1>
  
  
 
.SS SVE
 
 FADDA   <V><dn>, <Pg>, <V><dn>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer dn = UInt(Vdn);
 integer m = UInt(Zm);
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(esize) operand1 = V[dn];
 bits(VL) operand2 = Z[m];
 bits(esize) result = operand1;
 
 for e = 0 to elements-1
     if ElemP[mask, e, esize] == '1' then
         bits(esize) element = Elem[operand2, e, esize];
         result = FPAdd(result, element, FPCR);
 
 V[dn] = result;
 

.SS Assembler Symbols

 <V>
  Encoded in size
  Is a width specifier,

  size <V>      
  00   RESERVED 
  01   H        
  10   S        
  11   D        

 <dn>
  Encoded in Vdn
  Is the number [0-31] of the source and destination SIMD&FP register, encoded
  in the "Vdn" field.

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zm>
  Encoded in Zm
  Is the name of the source scalable vector register, encoded in the "Zm" field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T>      
  00   RESERVED 
  01   H        
  10   S        
  11   D        



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(esize) operand1 = V[dn];
 bits(VL) operand2 = Z[m];
 bits(esize) result = operand1;
 
 for e = 0 to elements-1
     if ElemP[mask, e, esize] == '1' then
         bits(esize) element = Elem[operand2, e, esize];
         result = FPAdd(result, element, FPCR);
 
 V[dn] = result;

