.nh
.TH "SEL (vectors)" "7" " "  "instruction" "sve"
.SS SEL (vectors)
 Conditionally select elements from two vectors

 Read active elements from the first source vector and inactive elements from
 the second source vector and place in the corresponding elements of the
 destination vector.

 Status : Green

 Predicated : True

 takes_pred_movprfx : False



.SS SVE - A64 - sel_z_p_zz_
 
                                                                   
                                                                   
                       21                                          
                 24  22 |        16  14      10         5         0
                  |   | |         |   |       |         |         |
   0 0 0 0 0 1 0 1|. .|1|. . . . .|1 1|. . . .|. . . . .|. . . . .|
                  |     |             |       |         |
                  |     `-Zm          `-Pg    `-Zn      `-Zd
                  `-size
  
  
 
.SS SVE
 
 SEL     <Zd>.<T>, <Pg>, <Zn>.<T>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer d = UInt(Zd);
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(VL) result;
 
 for e = 0 to elements-1
     bits(esize) element1 = Elem[operand1, e, esize];
     bits(esize) element2 = Elem[operand2, e, esize];
     if ElemP[mask, e, esize] == '1' then
         Elem[result, e, esize] = element1;
     else
         Elem[result, e, esize] = element2;
 
 Z[d] = result;
 

.SS Assembler Symbols

 <Zd>
  Encoded in Zd
  Is the name of the destination scalable vector register, encoded in the "Zd"
  field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T> 
  00   B   
  01   H   
  10   S   
  11   D   

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register, encoded in the "Pg"
  field.

 <Zn>
  Encoded in Zn
  Is the name of the first source scalable vector register, encoded in the "Zn"
  field.

 <Zm>
  Encoded in Zm
  Is the name of the second source scalable vector register, encoded in the "Zm"
  field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(VL) result;
 
 for e = 0 to elements-1
     bits(esize) element1 = Elem[operand1, e, esize];
     bits(esize) element2 = Elem[operand2, e, esize];
     if ElemP[mask, e, esize] == '1' then
         Elem[result, e, esize] = element1;
     else
         Elem[result, e, esize] = element2;
 
 Z[d] = result;

