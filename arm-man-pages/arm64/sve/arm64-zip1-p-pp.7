.nh
.TH "ZIP1, ZIP2 (predicates)" "7" " "  "instruction" "sve"
.SS ZIP1, ZIP2 (predicates)
 Interleave elements from two half predicates

 Interleave alternating elements from the lowest or highest halves of the first
 and second source predicates and place in elements of the destination
 predicate. This instruction is unpredicated.

 Status : Green

 Predicated : False

 takes_pred_movprfx : False


It has encodings from 2 classes: High halves and Low halves

.SS High halves - A64 - zip2_p_pp_
 
                                             10                    
                                           11 |                    
                                         12 | |                    
                 24  22  20      16    13 | | | 9       5 4       0
                  |   |   |       |     | | | | |       | |       |
   0 0 0 0 0 1 0 1|. .|1 0|. . . .|0 1 0|0|0|1|0|. . . .|0|. . . .|
                  |       |             | | |   |         |
                  `-size  `-Pm          | | `-H `-Pn      `-Pd
                                        | `-opc<0>
                                        `-opc<1>
  
  
 
.SS High halves
 
 ZIP2    <Pd>.<T>, <Pn>.<T>, <Pm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer n = UInt(Pn);
 integer m = UInt(Pm);
 integer d = UInt(Pd);
 integer part = 1;
.SS Low halves - A64 - zip1_p_pp_
 
                                             10                    
                                           11 |                    
                                         12 | |                    
                 24  22  20      16    13 | | | 9       5 4       0
                  |   |   |       |     | | | | |       | |       |
   0 0 0 0 0 1 0 1|. .|1 0|. . . .|0 1 0|0|0|0|0|. . . .|0|. . . .|
                  |       |             | | |   |         |
                  `-size  `-Pm          | | `-H `-Pn      `-Pd
                                        | `-opc<0>
                                        `-opc<1>
  
  
 
.SS Low halves
 
 ZIP1    <Pd>.<T>, <Pn>.<T>, <Pm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer n = UInt(Pn);
 integer m = UInt(Pm);
 integer d = UInt(Pd);
 integer part = 0;
 
 CheckSVEEnabled();
 integer pairs = VL DIV (esize * 2);
 bits(PL) operand1 = P[n];
 bits(PL) operand2 = P[m];
 bits(PL) result;
 
 integer base = part * pairs;
 for p = 0 to pairs-1
     Elem[result, 2*p+0, esize DIV 8] = Elem[operand1, base+p, esize DIV 8];
     Elem[result, 2*p+1, esize DIV 8] = Elem[operand2, base+p, esize DIV 8];
 
 P[d] = result;
 

.SS Assembler Symbols

 <Pd>
  Encoded in Pd
  Is the name of the destination scalable predicate register, encoded in the
  "Pd" field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T> 
  00   B   
  01   H   
  10   S   
  11   D   

 <Pn>
  Encoded in Pn
  Is the name of the first source scalable predicate register, encoded in the
  "Pn" field.

 <Pm>
  Encoded in Pm
  Is the name of the second source scalable predicate register, encoded in the
  "Pm" field.



.SS Operation

 CheckSVEEnabled();
 integer pairs = VL DIV (esize * 2);
 bits(PL) operand1 = P[n];
 bits(PL) operand2 = P[m];
 bits(PL) result;
 
 integer base = part * pairs;
 for p = 0 to pairs-1
     Elem[result, 2*p+0, esize DIV 8] = Elem[operand1, base+p, esize DIV 8];
     Elem[result, 2*p+1, esize DIV 8] = Elem[operand2, base+p, esize DIV 8];
 
 P[d] = result;

