.nh
.TH "SQADD (vectors)" "7" " "  "instruction" "sve"
.SS SQADD (vectors)
 Signed saturating add vectors (unpredicated)

 Signed saturating add all elements of the second source vector to corresponding
 elements of the first source vector and place the results in the corresponding
 elements of the destination vector. Each result element is saturated to the
 N-bit element's signed integer range -2(N-1)  to (2(N-1) )-1. This instruction
 is unpredicated.

 Status : Green

 Predicated : False

 takes_pred_movprfx : False



.SS SVE - A64 - sqadd_z_zz_
 
                                                                   
                                                                   
                       21                    10                    
                 24  22 |        16    13  11 |         5         0
                  |   | |         |     |   | |         |         |
   0 0 0 0 0 1 0 0|. .|1|. . . . .|0 0 0|1 0|0|. . . . .|. . . . .|
                  |     |                   | |         |
                  |     `-Zm                | `-Zn      `-Zd
                  `-size                    `-U
  
  
 
.SS SVE
 
 SQADD   <Zd>.<T>, <Zn>.<T>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer d = UInt(Zd);
 boolean unsigned = FALSE;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(VL) result;
 
 for e = 0 to elements-1
     integer element1 = Int(Elem[operand1, e, esize], unsigned);
     integer element2 = Int(Elem[operand2, e, esize], unsigned);
     (Elem[result, e, esize], -) = SatQ(element1 + element2, esize, unsigned);
 
 Z[d] = result;
 

.SS Assembler Symbols

 <Zd>
  Encoded in Zd
  Is the name of the destination scalable vector register, encoded in the "Zd"
  field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T> 
  00   B   
  01   H   
  10   S   
  11   D   

 <Zn>
  Encoded in Zn
  Is the name of the first source scalable vector register, encoded in the "Zn"
  field.

 <Zm>
  Encoded in Zm
  Is the name of the second source scalable vector register, encoded in the "Zm"
  field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(VL) result;
 
 for e = 0 to elements-1
     integer element1 = Int(Elem[operand1, e, esize], unsigned);
     integer element2 = Int(Elem[operand2, e, esize], unsigned);
     (Elem[result, e, esize], -) = SatQ(element1 + element2, esize, unsigned);
 
 Z[d] = result;

