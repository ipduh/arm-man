.nh
.TH "SDIVR" "7" " "  "instruction" "sve"
.SS SDIVR
 Signed reversed divide (predicated)

 Signed reversed divide active elements of the second source vector by
 corresponding elements of the first source vector and destructively place the
 quotient in the corresponding elements of the first source vector. Inactive
 elements in the destination vector register remain unmodified.

 Status : Green

 Predicated : True

 takes_pred_movprfx : True



.SS SVE - A64 - sdivr_z_p_zz_
 
                                                                   
                                 16                                
                               17 |                                
                 24  22      18 | |    13    10         5         0
                  |   |       | | |     |     |         |         |
   0 0 0 0 0 1 0 0|. .|0 1 0 1|1|0|0 0 0|. . .|. . . . .|. . . . .|
                  |           | |       |     |         |
                  `-size      | `-U     `-Pg  `-Zm      `-Zdn
                              `-R
  
  
 
.SS SVE
 
 SDIVR   <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '0x' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer dn = UInt(Zdn);
 integer m = UInt(Zm);
 boolean unsigned = FALSE;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[dn];
 bits(VL) operand2 = Z[m];
 bits(VL) result;
 
 for e = 0 to elements-1
     integer element1 = Int(Elem[operand1, e, esize], unsigned);
     integer element2 = Int(Elem[operand2, e, esize], unsigned);
     if ElemP[mask, e, esize] == '1' then
         integer quotient;
         if element1 == 0 then
             quotient = 0;
         else
             quotient = RoundTowardsZero(Real(element2) / Real(element1));
         Elem[result, e, esize] = quotient<esize-1:0>;
     else
         Elem[result, e, esize] = Elem[operand1, e, esize];
 
 Z[dn] = result;
 

.SS Assembler Symbols

 <Zdn>
  Encoded in Zdn
  Is the name of the first source and destination scalable vector register,
  encoded in the "Zdn" field.

 <T>
  Encoded in size<0>
  Is the size specifier,

  size<0> <T> 
  0       S   
  1       D   

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zm>
  Encoded in Zm
  Is the name of the second source scalable vector register, encoded in the "Zm"
  field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[dn];
 bits(VL) operand2 = Z[m];
 bits(VL) result;
 
 for e = 0 to elements-1
     integer element1 = Int(Elem[operand1, e, esize], unsigned);
     integer element2 = Int(Elem[operand2, e, esize], unsigned);
     if ElemP[mask, e, esize] == '1' then
         integer quotient;
         if element1 == 0 then
             quotient = 0;
         else
             quotient = RoundTowardsZero(Real(element2) / Real(element1));
         Elem[result, e, esize] = quotient<esize-1:0>;
     else
         Elem[result, e, esize] = Elem[operand1, e, esize];
 
 Z[dn] = result;

