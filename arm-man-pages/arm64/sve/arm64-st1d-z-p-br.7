.nh
.TH "ST1D (scalar plus scalar)" "7" " "  "instruction" "sve"
.SS ST1D (scalar plus scalar)
 Contiguous store doublewords from vector (scalar index)

 Contiguous store of doublewords from elements of a vector register to the
 memory address generated by a 64-bit scalar base and scalar index which is
 multiplied by 8 and added to the base address. After each element access the
 index value is incremented, but the index register is not updated. Inactive
 elements are not written to memory.

 Status : Green

 Predicated : True



.SS SVE - A64 - st1d_z_p_br_
 
                                                                   
                       21                                          
                     22 |                                          
               25  23 | |        16    13    10         5         0
                |   | | |         |     |     |         |         |
   1 1 1 0 0 1 0|1 1|1|1|. . . . .|0 1 0|. . .|. . . . .|. . . . .|
                |   | | |               |     |         |
                |   | | `-Rm            `-Pg  `-Rn      `-Zt
                |   | `-o2
                |   `-opc<0>
                `-opc<2:1>
  
  
 
.SS SVE
 
 ST1D    { <Zt>.D }, <Pg>, [<Xn|SP>, <Xm>, LSL #3]
 
 if !HaveSVE() then UNDEFINED;
 if Rm == '11111' then UNDEFINED;
 integer t = UInt(Zt);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 integer g = UInt(Pg);
 integer esize = 64;
 integer msize = 64;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(64) base;
 bits(64) addr;
 bits(PL) mask = P[g];
 bits(64) offset = X[m];
 bits(VL) src = Z[t];
 constant integer mbytes = msize DIV 8;
 
 if HaveMTEExt() then SetTagCheckedInstruction(TRUE);
 
 if n == 31 then
     CheckSPAlignment();
     base = SP[];
 else
     base = X[n];
 
 for e = 0 to elements-1
     addr = base + UInt(offset) * mbytes;
     if ElemP[mask, e, esize] == '1' then
         Mem[addr, mbytes, AccType_NORMAL] = Elem[src, e, esize]<msize-1:0>;
     offset = offset + 1;
 

.SS Assembler Symbols

 <Zt>
  Encoded in Zt
  Is the name of the scalable vector register to be transferred, encoded in the
  "Zt" field.

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Xn|SP>
  Encoded in Rn
  Is the 64-bit name of the general-purpose base register or stack pointer,
  encoded in the "Rn" field.

 <Xm>
  Encoded in Rm
  Is the 64-bit name of the general-purpose offset register, encoded in the "Rm"
  field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(64) base;
 bits(64) addr;
 bits(PL) mask = P[g];
 bits(64) offset = X[m];
 bits(VL) src = Z[t];
 constant integer mbytes = msize DIV 8;
 
 if HaveMTEExt() then SetTagCheckedInstruction(TRUE);
 
 if n == 31 then
     CheckSPAlignment();
     base = SP[];
 else
     base = X[n];
 
 for e = 0 to elements-1
     addr = base + UInt(offset) * mbytes;
     if ElemP[mask, e, esize] == '1' then
         Mem[addr, mbytes, AccType_NORMAL] = Elem[src, e, esize]<msize-1:0>;
     offset = offset + 1;

