.nh
.TH "BFMLALB (vectors)" "7" " "  "instruction" "sve"
.SS BFMLALB (vectors)
 BFloat16 floating-point multiply-add long to single-precision (bottom)

 This BFloat16 floating-point multiply-add long instruction widens the even-
 numbered 16-bit BFloat16 elements in the first source vector and the
 corresponding elements in the second source vector to single-precision format
 and then destructively multiplies and adds these values without intermediate
 rounding to the overlapping 32-bit single-precision elements of the addend and
 destination vector. This instruction is unpredicated.

 Unlike the BFloat16 matrix multiplication and dot product instructions, this
 instruction performs a fused multiply-add that honors all of the FPCR bits that
 apply to single-precision arithmetic. It can also generate a floating-point
 exception that causes cumulative exception bits in the FPSR to be set, or a
 synchronous exception to be taken, depending on the enable bits in the FPCR.

 ID_AA64ZFR0_EL1.BF16 indicates whether this instruction is implemented.

 Status : Green

 Predicated : False

 takes_pred_movprfx : False



.SS SVE - A64 - bfmlalb_z_zzz_
 
                                                                   
                       21                                          
                     22 |              13    10                    
                   23 | |        16  14 |  11 |         5         0
                    | | |         |   | |   | |         |         |
   0 1 1 0 0 1 0 0 1|1|1|. . . . .|1 0|0|0 0|0|. . . . .|. . . . .|
                    |   |             |     | |         |
                    |   `-Zm          `-op  | `-Zn      `-Zda
                    `-o2                    `-T
  
  
 
.SS SVE
 
 BFMLALB <Zda>.S, <Zn>.H, <Zm>.H
 
 if !HaveSVE() || !HaveBF16Ext() then UNDEFINED;
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer da = UInt(Zda);
 
 CheckSVEEnabled();
 integer elements = VL DIV 32;
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(VL) operand3 = Z[da];
 bits(VL) result;
 
 for e = 0 to elements-1
     bits(32) element1 = Elem[operand1, 2 * e + 0, 16] : Zeros(16);
     bits(32) element2 = Elem[operand2, 2 * e + 0, 16] : Zeros(16);
     bits(32) element3 = Elem[operand3, e, 32];
     Elem[result, e, 32] = FPMulAdd(element3, element1, element2, FPCR);
 
 Z[da] = result;
 

.SS Assembler Symbols

 <Zda>
  Encoded in Zda
  Is the name of the third source and destination scalable vector register,
  encoded in the "Zda" field.

 <Zn>
  Encoded in Zn
  Is the name of the first source scalable vector register, encoded in the "Zn"
  field.

 <Zm>
  Encoded in Zm
  Is the name of the second source scalable vector register, encoded in the "Zm"
  field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV 32;
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(VL) operand3 = Z[da];
 bits(VL) result;
 
 for e = 0 to elements-1
     bits(32) element1 = Elem[operand1, 2 * e + 0, 16] : Zeros(16);
     bits(32) element2 = Elem[operand2, 2 * e + 0, 16] : Zeros(16);
     bits(32) element3 = Elem[operand3, e, 32];
     Elem[result, e, 32] = FPMulAdd(element3, element1, element2, FPCR);
 
 Z[da] = result;

