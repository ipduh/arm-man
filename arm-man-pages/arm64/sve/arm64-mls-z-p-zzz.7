.nh
.TH "MLS" "7" " "  "instruction" "sve"
.SS MLS
 Multiply-subtract vectors (predicated), writing addend [Zda = Zda - Zn * Zm]

 Multiply the corresponding active elements of the first and second source
 vectors and subtract from elements of the third source (addend) vector.
 Destructively place the results in the destination and third source (addend)
 vector. Inactive elements in the destination vector register remain unmodified.

 Status : Green

 Predicated : True

 takes_pred_movprfx : True



.SS SVE - A64 - mls_z_p_zzz_
 
                                                                   
                                                                   
                       21              13                          
                 24  22 |        16  14 |    10         5         0
                  |   | |         |   | |     |         |         |
   0 0 0 0 0 1 0 0|. .|0|. . . . .|0 1|1|. . .|. . . . .|. . . . .|
                  |     |             | |     |         |
                  |     `-Zm          | `-Pg  `-Zn      `-Zda
                  `-size              `-op
  
  
 
.SS SVE
 
 MLS     <Zda>.<T>, <Pg>/M, <Zn>.<T>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer da = UInt(Zda);
 boolean sub_op = TRUE;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(VL) operand3 = Z[da];
 bits(VL) result;
 
 for e = 0 to elements-1
     integer element1 = UInt(Elem[operand1, e, esize]);
     integer element2 = UInt(Elem[operand2, e, esize]);
     if ElemP[mask, e, esize] == '1' then
         integer product = element1 * element2;
         if sub_op then
             Elem[result, e, esize] = Elem[operand3, e, esize] - product;
         else
             Elem[result, e, esize] = Elem[operand3, e, esize] + product;
     else
         Elem[result, e, esize] = Elem[operand3, e, esize];
 
 Z[da] = result;
 

.SS Assembler Symbols

 <Zda>
  Encoded in Zda
  Is the name of the third source and destination scalable vector register,
  encoded in the "Zda" field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T> 
  00   B   
  01   H   
  10   S   
  11   D   

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zn>
  Encoded in Zn
  Is the name of the first source scalable vector register, encoded in the "Zn"
  field.

 <Zm>
  Encoded in Zm
  Is the name of the second source scalable vector register, encoded in the "Zm"
  field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(VL) operand3 = Z[da];
 bits(VL) result;
 
 for e = 0 to elements-1
     integer element1 = UInt(Elem[operand1, e, esize]);
     integer element2 = UInt(Elem[operand2, e, esize]);
     if ElemP[mask, e, esize] == '1' then
         integer product = element1 * element2;
         if sub_op then
             Elem[result, e, esize] = Elem[operand3, e, esize] - product;
         else
             Elem[result, e, esize] = Elem[operand3, e, esize] + product;
     else
         Elem[result, e, esize] = Elem[operand3, e, esize];
 
 Z[da] = result;

