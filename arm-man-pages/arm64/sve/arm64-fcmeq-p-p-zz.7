.nh
.TH "FCM<cc> (vectors)" "7" " "  "instruction" "sve"
.SS FCM<cc> (vectors)
 Floating-point compare vectors

 Compare active floating-point elements in the first source vector with
 corresponding elements in the second source vector, and place the boolean
 results of the specified comparison in the corresponding elements of the
 destination predicate. Inactive elements in the destination predicate register
 are set to zero. Does not set the condition flags.



 The <cc> symbol specifies one of the standard ARM condition codes: EQ, GE, GT,
 or NE, with the addition of UO for an unordered comparison.

 Status : Green

 Predicated : True

 takes_pred_movprfx : False


It has encodings from 5 classes: Equal, Greater than, Greater than or equal, Not equal and Unordered

.SS Equal - A64 - fcmeq_p_p_zz_
 
                                       13                          
                                     14 |                          
                       21          15 | |                          
                 24  22 |        16 | | |    10         5 4       0
                  |   | |         | | | |     |         | |       |
   0 1 1 0 0 1 0 1|. .|0|. . . . .|0|1|1|. . .|. . . . .|0|. . . .|
                  |     |         |   | |     |         | |
                  |     `-Zm      |   | `-Pg  `-Zn      | `-Pd
                  `-size          |   `-cmph            `-cmpl
                                  `-op
  
  
 
.SS Equal
 
 FCMEQ   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer d = UInt(Pd);
 SVECmp op = Cmp_EQ;
.SS Greater than - A64 - fcmgt_p_p_zz_
 
                                       13                          
                                     14 |                          
                       21          15 | |                          
                 24  22 |        16 | | |    10         5 4       0
                  |   | |         | | | |     |         | |       |
   0 1 1 0 0 1 0 1|. .|0|. . . . .|0|1|0|. . .|. . . . .|1|. . . .|
                  |     |         |   | |     |         | |
                  |     `-Zm      |   | `-Pg  `-Zn      | `-Pd
                  `-size          |   `-cmph            `-cmpl
                                  `-op
  
  
 
.SS Greater than
 
 FCMGT   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer d = UInt(Pd);
 SVECmp op = Cmp_GT;
.SS Greater than or equal - A64 - fcmge_p_p_zz_
 
                                       13                          
                                     14 |                          
                       21          15 | |                          
                 24  22 |        16 | | |    10         5 4       0
                  |   | |         | | | |     |         | |       |
   0 1 1 0 0 1 0 1|. .|0|. . . . .|0|1|0|. . .|. . . . .|0|. . . .|
                  |     |         |   | |     |         | |
                  |     `-Zm      |   | `-Pg  `-Zn      | `-Pd
                  `-size          |   `-cmph            `-cmpl
                                  `-op
  
  
 
.SS Greater than or equal
 
 FCMGE   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer d = UInt(Pd);
 SVECmp op = Cmp_GE;
.SS Not equal - A64 - fcmne_p_p_zz_
 
                                       13                          
                                     14 |                          
                       21          15 | |                          
                 24  22 |        16 | | |    10         5 4       0
                  |   | |         | | | |     |         | |       |
   0 1 1 0 0 1 0 1|. .|0|. . . . .|0|1|1|. . .|. . . . .|1|. . . .|
                  |     |         |   | |     |         | |
                  |     `-Zm      |   | `-Pg  `-Zn      | `-Pd
                  `-size          |   `-cmph            `-cmpl
                                  `-op
  
  
 
.SS Not equal
 
 FCMNE   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer d = UInt(Pd);
 SVECmp op = Cmp_NE;
.SS Unordered - A64 - fcmuo_p_p_zz_
 
                                       13                          
                                     14 |                          
                       21          15 | |                          
                 24  22 |        16 | | |    10         5 4       0
                  |   | |         | | | |     |         | |       |
   0 1 1 0 0 1 0 1|. .|0|. . . . .|1|1|0|. . .|. . . . .|0|. . . .|
                  |     |         |   | |     |         | |
                  |     `-Zm      |   | `-Pg  `-Zn      | `-Pd
                  `-size          |   `-o2              `-o3
                                  `-op
  
  
 
.SS Unordered
 
 FCMUO   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer d = UInt(Pd);
 SVECmp op = Cmp_UN;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(PL) result;
 
 for e = 0 to elements-1
     bits(esize) element1 = Elem[operand1, e, esize];
     bits(esize) element2 = Elem[operand2, e, esize];
     if ElemP[mask, e, esize] == '1' then
         case op of
             when Cmp_EQ res = FPCompareEQ(element1, element2, FPCR);
             when Cmp_GE res = FPCompareGE(element1, element2, FPCR);
             when Cmp_GT res = FPCompareGT(element1, element2, FPCR);
             when Cmp_UN res = FPCompareUN(element1, element2, FPCR);
             when Cmp_NE res = FPCompareNE(element1, element2, FPCR);
             when Cmp_LT res = FPCompareGT(element2, element1, FPCR);
             when Cmp_LE res = FPCompareGE(element2, element1, FPCR);
         ElemP[result, e, esize] = if res then '1' else '0';
     else
         ElemP[result, e, esize] = '0';
 
 P[d] = result;
 

.SS Assembler Symbols

 <Pd>
  Encoded in Pd
  Is the name of the destination scalable predicate register, encoded in the
  "Pd" field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T>      
  00   RESERVED 
  01   H        
  10   S        
  11   D        

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zn>
  Encoded in Zn
  Is the name of the first source scalable vector register, encoded in the "Zn"
  field.

 <Zm>
  Encoded in Zm
  Is the name of the second source scalable vector register, encoded in the "Zm"
  field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(PL) result;
 
 for e = 0 to elements-1
     bits(esize) element1 = Elem[operand1, e, esize];
     bits(esize) element2 = Elem[operand2, e, esize];
     if ElemP[mask, e, esize] == '1' then
         case op of
             when Cmp_EQ res = FPCompareEQ(element1, element2, FPCR);
             when Cmp_GE res = FPCompareGE(element1, element2, FPCR);
             when Cmp_GT res = FPCompareGT(element1, element2, FPCR);
             when Cmp_UN res = FPCompareUN(element1, element2, FPCR);
             when Cmp_NE res = FPCompareNE(element1, element2, FPCR);
             when Cmp_LT res = FPCompareGT(element2, element1, FPCR);
             when Cmp_LE res = FPCompareGE(element2, element1, FPCR);
         ElemP[result, e, esize] = if res then '1' else '0';
     else
         ElemP[result, e, esize] = '0';
 
 P[d] = result;

