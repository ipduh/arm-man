.nh
.TH "PRFB (scalar plus scalar)" "7" " "  "instruction" "sve"
.SS PRFB (scalar plus scalar)
 Contiguous prefetch bytes (scalar index)

 Contiguous prefetch of byte elements from the memory address generated by a
 64-bit scalar base and scalar index which is added to the base address. After
 each element prefetch the index value is incremented, but the index register is
 not updated.

 The predicate may be used to suppress prefetches from unwanted addresses.

 Status : Green

 Predicated : True



.SS SVE - A64 - prfb_i_p_br_s
 
                                                                   
                   23                                              
                 24 |                                              
               25 | |  21        16    13    10         5 4       0
                | | |   |         |     |     |         | |       |
   1 0 0 0 0 1 0|0|0|0 0|. . . . .|1 1 0|. . .|. . . . .|0|. . . .|
                | |     |               |     |           |
                | |     `-Rm            `-Pg  `-Rn        `-prfop
                | `-msz<0>
                `-msz<1>
  
  
 
.SS SVE
 
 PRFB    <prfop>, <Pg>, [<Xn|SP>, <Xm>]
 
 if !HaveSVE() then UNDEFINED;
 if Rm == '11111' then UNDEFINED;
 integer esize = 8;
 integer g = UInt(Pg);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 integer level = UInt(prfop<2:1>);
 boolean stream = (prfop<0> == '1');
 pref_hint = if prfop<3> == '0' then Prefetch_READ else Prefetch_WRITE;
 integer scale = 0;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(64) base;
 bits(64) offset = X[m];
 bits(64) addr;
 
 if n == 31 then
     base = SP[];
 else
     base = X[n];
 
 for e = 0 to elements-1
     if ElemP[mask, e, esize] == '1' then
         addr = base + (UInt(offset) << scale);
         Hint_Prefetch(addr, pref_hint, level, stream);
     offset = offset + 1;
 

.SS Assembler Symbols

 <prfop>
  Encoded in prfop
  Is the prefetch operation specifier,

  prfop <prfop>   
  0000  PLDL1KEEP 
  0001  PLDL1STRM 
  0010  PLDL2KEEP 
  0011  PLDL2STRM 
  0100  PLDL3KEEP 
  0101  PLDL3STRM 
  x11x  #uimm4    
  1000  PSTL1KEEP 
  1001  PSTL1STRM 
  1010  PSTL2KEEP 
  1011  PSTL2STRM 
  1100  PSTL3KEEP 
  1101  PSTL3STRM 

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Xn|SP>
  Encoded in Rn
  Is the 64-bit name of the general-purpose base register or stack pointer,
  encoded in the "Rn" field.

 <Xm>
  Encoded in Rm
  Is the 64-bit name of the general-purpose offset register, encoded in the "Rm"
  field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(64) base;
 bits(64) offset = X[m];
 bits(64) addr;
 
 if n == 31 then
     base = SP[];
 else
     base = X[n];
 
 for e = 0 to elements-1
     if ElemP[mask, e, esize] == '1' then
         addr = base + (UInt(offset) << scale);
         Hint_Prefetch(addr, pref_hint, level, stream);
     offset = offset + 1;

