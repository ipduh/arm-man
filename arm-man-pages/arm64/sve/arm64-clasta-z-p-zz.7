.nh
.TH "CLASTA (vectors)" "7" " "  "instruction" "sve"
.SS CLASTA (vectors)
 Conditionally extract element after last to vector register

 From the second source vector register extract the element after the last
 active element, or if the last active element is the final element extract
 element zero, and then replicate that element to destructively fill the
 destination and first source vector.

 If there are no active elements then leave the destination and source vector
 unmodified.

 Status : Green

 Predicated : True

 takes_pred_movprfx : False



.SS SVE - A64 - clasta_z_p_zz_
 
                                                                   
                                                                   
                                 16                                
                 24  22        17 |    13    10         5         0
                  |   |         | |     |     |         |         |
   0 0 0 0 0 1 0 1|. .|1 0 1 0 0|0|1 0 0|. . .|. . . . .|. . . . .|
                  |             |       |     |         |
                  `-size        `-B     `-Pg  `-Zm      `-Zdn
  
  
 
.SS SVE
 
 CLASTA  <Zdn>.<T>, <Pg>, <Zdn>.<T>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer dn = UInt(Zdn);
 integer m = UInt(Zm);
 boolean isBefore = FALSE;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[dn];
 bits(VL) operand2 = Z[m];
 bits(VL) result;
 integer last = LastActiveElement(mask, esize);
 
 if last < 0 then
     result = operand1;
 else
     if !isBefore then
         last = last + 1;
         if last >= elements then last = 0;
     for e = 0 to elements-1
         Elem[result, e, esize] = Elem[operand2, last, esize];
 
 Z[dn] = result;
 

.SS Assembler Symbols

 <Zdn>
  Encoded in Zdn
  Is the name of the first source and destination scalable vector register,
  encoded in the "Zdn" field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T> 
  00   B   
  01   H   
  10   S   
  11   D   

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zm>
  Encoded in Zm
  Is the name of the second source scalable vector register, encoded in the "Zm"
  field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[dn];
 bits(VL) operand2 = Z[m];
 bits(VL) result;
 integer last = LastActiveElement(mask, esize);
 
 if last < 0 then
     result = operand1;
 else
     if !isBefore then
         last = last + 1;
         if last >= elements then last = 0;
     for e = 0 to elements-1
         Elem[result, e, esize] = Elem[operand2, last, esize];
 
 Z[dn] = result;

