.nh
.TH "LD1RD" "7" " "  "instruction" "sve"
.SS LD1RD
 Load and broadcast doubleword to vector

 Load a single doubleword from a memory address generated by a 64-bit scalar
 base address plus an immediate offset which is a multiple of 8 in the range 0
 to 504.

 Broadcast the loaded data into all active elements of the destination vector,
 setting the inactive elements to zero. If all elements are inactive then the
 instruction will not perform a read from Device memory or cause a data abort.

 Status : Green

 Predicated : True



.SS SVE - A64 - ld1rd_z_p_bi_u64
 
                     22                13                          
                   23 |              14 |                          
                 24 | |            15 | |                          
               25 | | |          16 | | |    10         5         0
                | | | |           | | | |     |         |         |
   1 0 0 0 0 1 0|1|1|1|. . . . . .|1|1|1|. . .|. . . . .|. . . . .|
                | |   |             | | |     |         |
                | |   `-imm6        | | `-Pg  `-Rn      `-Zt
                | `-dtypeh<0>       | `-dtypel<0>
                `-dtypeh<1>         `-dtypel<1>
  
  
 
.SS SVE
 
 LD1RD   { <Zt>.D }, <Pg>/Z, [<Xn|SP>{, #<imm>}]
 
 if !HaveSVE() then UNDEFINED;
 integer t = UInt(Zt);
 integer n = UInt(Rn);
 integer g = UInt(Pg);
 integer esize = 64;
 integer msize = 64;
 boolean unsigned = TRUE;
 integer offset = UInt(imm6);
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(64) base;
 bits(64) addr;
 bits(PL) mask = P[g];
 bits(VL) result;
 bits(msize) data;
 constant integer mbytes = msize DIV 8;
 
 if HaveMTEExt() then SetTagCheckedInstruction(TRUE);
 
 if n == 31 then
     CheckSPAlignment();
     base = SP[];
 else
     base = X[n];
 
 integer last = LastActiveElement(mask, esize);
 if last >= 0 then
     addr = base + offset * mbytes;
     data = Mem[addr, mbytes, AccType_NORMAL];
 
 for e = 0 to elements-1
     if ElemP[mask, e, esize] == '1' then
         Elem[result, e, esize] = Extend(data, esize, unsigned);
     else
         Elem[result, e, esize] = Zeros();
 
 Z[t] = result;
 

.SS Assembler Symbols

 <Zt>
  Encoded in Zt
  Is the name of the scalable vector register to be transferred, encoded in the
  "Zt" field.

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Xn|SP>
  Encoded in Rn
  Is the 64-bit name of the general-purpose base register or stack pointer,
  encoded in the "Rn" field.

 <imm>
  Encoded in imm6
  Is the optional unsigned immediate byte offset, a multiple of 8 in the range 0
  to 504, defaulting to 0, encoded in the "imm6" field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(64) base;
 bits(64) addr;
 bits(PL) mask = P[g];
 bits(VL) result;
 bits(msize) data;
 constant integer mbytes = msize DIV 8;
 
 if HaveMTEExt() then SetTagCheckedInstruction(TRUE);
 
 if n == 31 then
     CheckSPAlignment();
     base = SP[];
 else
     base = X[n];
 
 integer last = LastActiveElement(mask, esize);
 if last >= 0 then
     addr = base + offset * mbytes;
     data = Mem[addr, mbytes, AccType_NORMAL];
 
 for e = 0 to elements-1
     if ElemP[mask, e, esize] == '1' then
         Elem[result, e, esize] = Extend(data, esize, unsigned);
     else
         Elem[result, e, esize] = Zeros();
 
 Z[t] = result;

