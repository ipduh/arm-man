.nh
.TH "ST1W (vector plus immediate)" "7" " "  "instruction" "sve"
.SS ST1W (vector plus immediate)
 Scatter store words from a vector (immediate index)

 Scatter store of words from the active elements of a vector register to the
 memory addresses generated by a vector base plus immediate index. The index is
 a multiple of 4 in the range 0 to 124. Inactive elements are not written to
 memory.

 Status : Green

 Predicated : True


It has encodings from 2 classes: 32-bit element and 64-bit element

.SS 32-bit element - A64 - st1w_z_p_ai_s
 
                                                                   
                   23                                              
                 24 |                                              
               25 | |  21        16    13    10         5         0
                | | |   |         |     |     |         |         |
   1 1 1 0 0 1 0|1|0|1 1|. . . . .|1 0 1|. . .|. . . . .|. . . . .|
                | |     |               |     |         |
                | |     `-imm5          `-Pg  `-Zn      `-Zt
                | `-msz<0>
                `-msz<1>
  
  
 
.SS 32-bit element
 
 ST1W    { <Zt>.S }, <Pg>, [<Zn>.S{, #<imm>}]
 
 if !HaveSVE() then UNDEFINED;
 integer t = UInt(Zt);
 integer n = UInt(Zn);
 integer g = UInt(Pg);
 integer esize = 32;
 integer msize = 32;
 integer offset = UInt(imm5);
.SS 64-bit element - A64 - st1w_z_p_ai_d
 
                                                                   
                   23                                              
                 24 |                                              
               25 | |  21        16    13    10         5         0
                | | |   |         |     |     |         |         |
   1 1 1 0 0 1 0|1|0|1 0|. . . . .|1 0 1|. . .|. . . . .|. . . . .|
                | |     |               |     |         |
                | |     `-imm5          `-Pg  `-Zn      `-Zt
                | `-msz<0>
                `-msz<1>
  
  
 
.SS 64-bit element
 
 ST1W    { <Zt>.D }, <Pg>, [<Zn>.D{, #<imm>}]
 
 if !HaveSVE() then UNDEFINED;
 integer t = UInt(Zt);
 integer n = UInt(Zn);
 integer g = UInt(Pg);
 integer esize = 64;
 integer msize = 32;
 integer offset = UInt(imm5);
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(VL) base = Z[n];
 bits(VL) src = Z[t];
 bits(PL) mask = P[g];
 bits(64) addr;
 constant integer mbytes = msize DIV 8;
 
 if HaveMTEExt() then SetTagCheckedInstruction(TRUE);
 
 for e = 0 to elements-1
     if ElemP[mask, e, esize] == '1' then
         addr = ZeroExtend(Elem[base, e, esize], 64) + offset * mbytes;
         Mem[addr, mbytes, AccType_NORMAL] = Elem[src, e, esize]<msize-1:0>;
 

.SS Assembler Symbols

 <Zt>
  Encoded in Zt
  Is the name of the scalable vector register to be transferred, encoded in the
  "Zt" field.

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zn>
  Encoded in Zn
  Is the name of the base scalable vector register, encoded in the "Zn" field.

 <imm>
  Encoded in imm5
  Is the optional unsigned immediate byte offset, a multiple of 4 in the range 0
  to 124, defaulting to 0, encoded in the "imm5" field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(VL) base = Z[n];
 bits(VL) src = Z[t];
 bits(PL) mask = P[g];
 bits(64) addr;
 constant integer mbytes = msize DIV 8;
 
 if HaveMTEExt() then SetTagCheckedInstruction(TRUE);
 
 for e = 0 to elements-1
     if ElemP[mask, e, esize] == '1' then
         addr = ZeroExtend(Elem[base, e, esize], 64) + offset * mbytes;
         Mem[addr, mbytes, AccType_NORMAL] = Elem[src, e, esize]<msize-1:0>;

