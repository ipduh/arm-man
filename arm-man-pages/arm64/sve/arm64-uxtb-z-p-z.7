.nh
.TH "UXTB, UXTH, UXTW" "7" " "  "instruction" "sve"
.SS UXTB, UXTH, UXTW
 Unsigned byte / halfword / word extend (predicated)

 Zero-extend the least-significant sub-element of each active element of the
 source vector, and place the results in the corresponding elements of the
 destination vector. Inactive elements in the destination vector register remain
 unmodified.

 Status : Green

 Predicated : True

 takes_pred_movprfx : True


It has encodings from 3 classes: Byte, Halfword and Word

.SS Byte - A64 - uxtb_z_p_z_
 
                                                                   
                                                                   
                                 16                                
                 24  22    19  17 |    13    10         5         0
                  |   |     |   | |     |     |         |         |
   0 0 0 0 0 1 0 0|. .|0 1 0|0 0|1|1 0 1|. . .|. . . . .|. . . . .|
                  |             |       |     |         |
                  `-size        `-U     `-Pg  `-Zn      `-Zd
  
  
 
.SS Byte
 
 UXTB    <Zd>.<T>, <Pg>/M, <Zn>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer s_esize = 8;
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 boolean unsigned = TRUE;
.SS Halfword - A64 - uxth_z_p_z_
 
                                                                   
                                                                   
                                 16                                
                 24  22    19  17 |    13    10         5         0
                  |   |     |   | |     |     |         |         |
   0 0 0 0 0 1 0 0|. .|0 1 0|0 1|1|1 0 1|. . .|. . . . .|. . . . .|
                  |             |       |     |         |
                  `-size        `-U     `-Pg  `-Zn      `-Zd
  
  
 
.SS Halfword
 
 UXTH    <Zd>.<T>, <Pg>/M, <Zn>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size != '1x' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer s_esize = 16;
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 boolean unsigned = TRUE;
.SS Word - A64 - uxtw_z_p_z_
 
                                                                   
                                                                   
                                 16                                
                 24  22    19  17 |    13    10         5         0
                  |   |     |   | |     |     |         |         |
   0 0 0 0 0 1 0 0|. .|0 1 0|1 0|1|1 0 1|. . .|. . . . .|. . . . .|
                  |             |       |     |         |
                  `-size        `-U     `-Pg  `-Zn      `-Zd
  
  
 
.SS Word
 
 UXTW    <Zd>.D, <Pg>/M, <Zn>.D
 
 if !HaveSVE() then UNDEFINED;
 if size != '11' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer s_esize = 32;
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 boolean unsigned = TRUE;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand  = Z[n];
 bits(VL) result = Z[d];
 
 for e = 0 to elements-1
     bits(esize) element = Elem[operand, e, esize];
     if ElemP[mask, e, esize] == '1' then
         Elem[result, e, esize] = Extend(element<s_esize-1:0>, esize, unsigned);
 
 Z[d] = result;
 

.SS Assembler Symbols

 <Zd>
  Encoded in Zd
  Is the name of the destination scalable vector register, encoded in the "Zd"
  field.

 <T>
  Encoded in size
  For the byte variant: is the size specifier,

  size <T>      
  00   RESERVED 
  01   H        
  10   S        
  11   D        

 <T>
  Encoded in size<0>
  For the halfword variant: is the size specifier,

  size<0> <T> 
  0       S   
  1       D   

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zn>
  Encoded in Zn
  Is the name of the source scalable vector register, encoded in the "Zn" field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand  = Z[n];
 bits(VL) result = Z[d];
 
 for e = 0 to elements-1
     bits(esize) element = Elem[operand, e, esize];
     if ElemP[mask, e, esize] == '1' then
         Elem[result, e, esize] = Extend(element<s_esize-1:0>, esize, unsigned);
 
 Z[d] = result;

