.nh
.TH "LDFF1H (vector plus immediate)" "7" " "  "instruction" "sve"
.SS LDFF1H (vector plus immediate)
 Gather load first-fault unsigned halfwords to vector (immediate index)

 Gather load with first-faulting behavior of unsigned halfwords to active
 elements of a vector register from memory addresses generated by a vector base
 plus immediate index. The index is a multiple of 2 in the range 0 to 62.
 Inactive elements will not read Device memory or signal faults, and are set to
 zero in the destination vector.

 Status : Green

 Predicated : True


It has encodings from 2 classes: 32-bit element and 64-bit element

.SS 32-bit element - A64 - ldff1h_z_p_ai_s
 
                                       13                          
                   23                14 |                          
                 24 |              15 | |                          
               25 | |  21        16 | | |    10         5         0
                | | |   |         | | | |     |         |         |
   1 0 0 0 0 1 0|0|1|0 1|. . . . .|1|1|1|. . .|. . . . .|. . . . .|
                | |     |           | | |     |         |
                | |     `-imm5      | | `-Pg  `-Zn      `-Zt
                | `-msz<0>          | `-ff
                `-msz<1>            `-U
  
  
 
.SS 32-bit element
 
 LDFF1H  { <Zt>.S }, <Pg>/Z, [<Zn>.S{, #<imm>}]
 
 if !HaveSVE() then UNDEFINED;
 integer t = UInt(Zt);
 integer n = UInt(Zn);
 integer g = UInt(Pg);
 integer esize = 32;
 integer msize = 16;
 boolean unsigned = TRUE;
 integer offset = UInt(imm5);
.SS 64-bit element - A64 - ldff1h_z_p_ai_d
 
                                       13                          
                   23                14 |                          
                 24 |              15 | |                          
               25 | |  21        16 | | |    10         5         0
                | | |   |         | | | |     |         |         |
   1 1 0 0 0 1 0|0|1|0 1|. . . . .|1|1|1|. . .|. . . . .|. . . . .|
                | |     |           | | |     |         |
                | |     `-imm5      | | `-Pg  `-Zn      `-Zt
                | `-msz<0>          | `-ff
                `-msz<1>            `-U
  
  
 
.SS 64-bit element
 
 LDFF1H  { <Zt>.D }, <Pg>/Z, [<Zn>.D{, #<imm>}]
 
 if !HaveSVE() then UNDEFINED;
 integer t = UInt(Zt);
 integer n = UInt(Zn);
 integer g = UInt(Pg);
 integer esize = 64;
 integer msize = 16;
 boolean unsigned = TRUE;
 integer offset = UInt(imm5);
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(VL) base = Z[n];
 bits(64) addr;
 bits(PL) mask = P[g];
 bits(VL) result;
 bits(VL) orig = Z[t];
 bits(msize) data;
 constant integer mbytes = msize DIV 8;
 boolean first = TRUE;
 boolean fault = FALSE;
 boolean faulted = FALSE;
 boolean unknown = FALSE;
 
 if HaveMTEExt() then SetTagCheckedInstruction(TRUE);
 
 for e = 0 to elements-1
     if ElemP[mask, e, esize] == '1' then
         addr = ZeroExtend(Elem[base, e, esize], 64) + offset * mbytes;
         if first then
             // Mem[] will not return if a fault is detected for the first active element
             data = Mem[addr, mbytes, AccType_NORMAL];
             first = FALSE;
         else
             // MemNF[] will return fault=TRUE if access is not performed for any reason
             (data, fault) = MemNF[addr, mbytes, AccType_NONFAULT];
     else
         (data, fault) = (Zeros(msize), FALSE);
 
     // FFR elements set to FALSE following a supressed access/fault
     faulted = faulted || fault;
     if faulted then
         ElemFFR[e, esize] = '0';
 
     // Value becomes CONSTRAINED UNPREDICTABLE after an FFR element is FALSE
     unknown = unknown || ElemFFR[e, esize] == '0';
     if unknown then
         if !fault && ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then
             Elem[result, e, esize] = Extend(data, esize, unsigned);
         elsif ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then
             Elem[result, e, esize] = Zeros();
         else  // merge
             Elem[result, e, esize] = Elem[orig, e, esize];
     else
         Elem[result, e, esize] = Extend(data, esize, unsigned);
 
 Z[t] = result;
 

.SS Assembler Symbols

 <Zt>
  Encoded in Zt
  Is the name of the scalable vector register to be transferred, encoded in the
  "Zt" field.

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zn>
  Encoded in Zn
  Is the name of the base scalable vector register, encoded in the "Zn" field.

 <imm>
  Encoded in imm5
  Is the optional unsigned immediate byte offset, a multiple of 2 in the range 0
  to 62, defaulting to 0, encoded in the "imm5" field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(VL) base = Z[n];
 bits(64) addr;
 bits(PL) mask = P[g];
 bits(VL) result;
 bits(VL) orig = Z[t];
 bits(msize) data;
 constant integer mbytes = msize DIV 8;
 boolean first = TRUE;
 boolean fault = FALSE;
 boolean faulted = FALSE;
 boolean unknown = FALSE;
 
 if HaveMTEExt() then SetTagCheckedInstruction(TRUE);
 
 for e = 0 to elements-1
     if ElemP[mask, e, esize] == '1' then
         addr = ZeroExtend(Elem[base, e, esize], 64) + offset * mbytes;
         if first then
             // Mem[] will not return if a fault is detected for the first active element
             data = Mem[addr, mbytes, AccType_NORMAL];
             first = FALSE;
         else
             // MemNF[] will return fault=TRUE if access is not performed for any reason
             (data, fault) = MemNF[addr, mbytes, AccType_NONFAULT];
     else
         (data, fault) = (Zeros(msize), FALSE);
 
     // FFR elements set to FALSE following a supressed access/fault
     faulted = faulted || fault;
     if faulted then
         ElemFFR[e, esize] = '0';
 
     // Value becomes CONSTRAINED UNPREDICTABLE after an FFR element is FALSE
     unknown = unknown || ElemFFR[e, esize] == '0';
     if unknown then
         if !fault && ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then
             Elem[result, e, esize] = Extend(data, esize, unsigned);
         elsif ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then
             Elem[result, e, esize] = Zeros();
         else  // merge
             Elem[result, e, esize] = Elem[orig, e, esize];
     else
         Elem[result, e, esize] = Extend(data, esize, unsigned);
 
 Z[t] = result;

