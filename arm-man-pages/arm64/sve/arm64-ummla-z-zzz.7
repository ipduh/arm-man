.nh
.TH "UMMLA" "7" " "  "instruction" "sve"
.SS UMMLA
 Unsigned integer matrix multiply-accumulate

 The unsigned integer matrix multiply-accumulate instruction multiplies the 2×8
 matrix of unsigned 8-bit integer values held in each 128-bit segment of the
 first source vector by the 8×2 matrix of unsigned 8-bit integer values in the
 corresponding segment of the second source vector. The resulting 2×2 widened
 32-bit integer matrix product is then destructively added to the 32-bit integer
 matrix accumulator held in the corresponding segment of the addend and
 destination vector. This is equivalent to performing an 8-way dot product per
 destination element.

 This instruction is unpredicated.

 ID_AA64ZFR0_EL1.I8MM indicates whether this instruction is implemented.

 Status : Green

 Predicated : False

 takes_pred_movprfx : False



.SS SVE - A64 - ummla_z_zzz_
 
                       21                                          
                     22 |                                          
                   23 | |                                          
                 24 | | |        16          10         5         0
                  | | | |         |           |         |         |
   0 1 0 0 0 1 0 1|1|1|0|. . . . .|1 0 0 1 1 0|. . . . .|. . . . .|
                  | |   |                     |         |
                  | |   `-Zm                  `-Zn      `-Zda
                  | `-uns<0>
                  `-uns<1>
  
  
 
.SS SVE
 
 UMMLA   <Zda>.S, <Zn>.B, <Zm>.B
 
 if !HaveSVE() || !HaveInt8MatMulExt() then UNDEFINED;
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer da = UInt(Zda);
 boolean op1_unsigned = TRUE;
 boolean op2_unsigned = TRUE;
 
 CheckSVEEnabled();
 integer segments = VL DIV 128;
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(VL) operand3 = Z[da];
 bits(VL) result = Zeros();
 bits(128) op1, op2;
 bits(128) res, addend;
 
 for s = 0 to segments-1
     op1    = Elem[operand1, s, 128];
     op2    = Elem[operand2, s, 128];
     addend = Elem[operand3, s, 128];
     res    = MatMulAdd(addend, op1, op2, op1_unsigned, op2_unsigned);
     Elem[result, s, 128] = res;
 
 Z[da] = result;
 

.SS Assembler Symbols

 <Zda>
  Encoded in Zda
  Is the name of the third source and destination scalable vector register,
  encoded in the "Zda" field.

 <Zn>
  Encoded in Zn
  Is the name of the first source scalable vector register, encoded in the "Zn"
  field.

 <Zm>
  Encoded in Zm
  Is the name of the second source scalable vector register, encoded in the "Zm"
  field.



.SS Operation

 CheckSVEEnabled();
 integer segments = VL DIV 128;
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(VL) operand3 = Z[da];
 bits(VL) result = Zeros();
 bits(128) op1, op2;
 bits(128) res, addend;
 
 for s = 0 to segments-1
     op1    = Elem[operand1, s, 128];
     op2    = Elem[operand2, s, 128];
     addend = Elem[operand3, s, 128];
     res    = MatMulAdd(addend, op1, op2, op1_unsigned, op2_unsigned);
     Elem[result, s, 128] = res;
 
 Z[da] = result;

