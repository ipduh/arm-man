.nh
.TH "UUNPKHI, UUNPKLO" "7" " "  "instruction" "sve"
.SS UUNPKHI, UUNPKLO
 Unsigned unpack and extend half of vector

 Unpack elements from the lowest or highest half of the source vector and then
 zero-extend them to place in elements of twice their size within the
 destination vector. This instruction is unpredicated.

 Status : Green

 Predicated : False

 takes_pred_movprfx : False


It has encodings from 2 classes: High half and Low half

.SS High half - A64 - uunpkhi_z_z_
 
                                                                   
                                 16                                
                               17 |                                
                 24  22      18 | |          10         5         0
                  |   |       | | |           |         |         |
   0 0 0 0 0 1 0 1|. .|1 1 0 0|1|1|0 0 1 1 1 0|. . . . .|. . . . .|
                  |           | |             |         |
                  `-size      | `-H           `-Zn      `-Zd
                              `-U
  
  
 
.SS High half
 
 UUNPKHI <Zd>.<T>, <Zn>.<Tb>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 boolean unsigned = TRUE;
 boolean hi = TRUE;
.SS Low half - A64 - uunpklo_z_z_
 
                                                                   
                                 16                                
                               17 |                                
                 24  22      18 | |          10         5         0
                  |   |       | | |           |         |         |
   0 0 0 0 0 1 0 1|. .|1 1 0 0|1|0|0 0 1 1 1 0|. . . . .|. . . . .|
                  |           | |             |         |
                  `-size      | `-H           `-Zn      `-Zd
                              `-U
  
  
 
.SS Low half
 
 UUNPKLO <Zd>.<T>, <Zn>.<Tb>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 boolean unsigned = TRUE;
 boolean hi = FALSE;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 integer hsize = esize DIV 2;
 bits(VL) operand = Z[n];
 bits(VL) result;
 
 for e = 0 to elements-1
     bits(hsize) element = if hi then Elem[operand, e + elements, hsize] else Elem[operand, e, hsize];
     Elem[result, e, esize] = Extend(element, esize, unsigned);
 
 Z[d] = result;
 

.SS Assembler Symbols

 <Zd>
  Encoded in Zd
  Is the name of the destination scalable vector register, encoded in the "Zd"
  field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T>      
  00   RESERVED 
  01   H        
  10   S        
  11   D        

 <Zn>
  Encoded in Zn
  Is the name of the source scalable vector register, encoded in the "Zn" field.

 <Tb>
  Encoded in size
  Is the size specifier,

  size <Tb>     
  00   RESERVED 
  01   B        
  10   H        
  11   S        



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 integer hsize = esize DIV 2;
 bits(VL) operand = Z[n];
 bits(VL) result;
 
 for e = 0 to elements-1
     bits(hsize) element = if hi then Elem[operand, e + elements, hsize] else Elem[operand, e, hsize];
     Elem[result, e, esize] = Extend(element, esize, unsigned);
 
 Z[d] = result;

