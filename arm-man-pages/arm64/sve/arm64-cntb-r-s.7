.nh
.TH "CNTB, CNTD, CNTH, CNTW" "7" " "  "instruction" "sve"
.SS CNTB, CNTD, CNTH, CNTW
 Set scalar to multiple of predicate constraint element count

 Determines the number of active elements implied by the named predicate
 constraint, multiplies that by an immediate in the range 1 to 16 inclusive, and
 then places the result in the scalar destination.

 The named predicate constraint limits the number of active elements in a single
 predicate to:

 * A fixed number (VL1 to VL256)

 * The largest power of two (POW2)

 * The largest multiple of three or four (MUL3 or MUL4)

 * All available, implicitly a multiple of two (ALL).

 Unspecified or out of range constraint encodings generate an empty predicate or
 zero element count rather than Undefined Instruction exception.

 Status : Green

 Predicated : False

 takes_pred_movprfx : False


It has encodings from 4 classes: Byte, Doubleword, Halfword and Word

.SS Byte - A64 - cntb_r_s_
 
                                                                   
                     22                                            
                   23 |                      10                    
                 24 | |  20      16        11 |         5         0
                  | | |   |       |         | |         |         |
   0 0 0 0 0 1 0 0|0|0|1 0|. . . .|1 1 1 0 0|0|. . . . .|. . . . .|
                  | |     |                 | |         |
                  | |     `-imm4            | `-pattern `-Rd
                  | `-size<0>               `-op
                  `-size<1>
  
  
 
.SS Byte
 
 CNTB    <Xd>{, <pattern>{, MUL #<imm>}}
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8;
 integer d = UInt(Rd);
 bits(5) pat = pattern;
 integer imm = UInt(imm4) + 1;
.SS Doubleword - A64 - cntd_r_s_
 
                                                                   
                     22                                            
                   23 |                      10                    
                 24 | |  20      16        11 |         5         0
                  | | |   |       |         | |         |         |
   0 0 0 0 0 1 0 0|1|1|1 0|. . . .|1 1 1 0 0|0|. . . . .|. . . . .|
                  | |     |                 | |         |
                  | |     `-imm4            | `-pattern `-Rd
                  | `-size<0>               `-op
                  `-size<1>
  
  
 
.SS Doubleword
 
 CNTD    <Xd>{, <pattern>{, MUL #<imm>}}
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 64;
 integer d = UInt(Rd);
 bits(5) pat = pattern;
 integer imm = UInt(imm4) + 1;
.SS Halfword - A64 - cnth_r_s_
 
                                                                   
                     22                                            
                   23 |                      10                    
                 24 | |  20      16        11 |         5         0
                  | | |   |       |         | |         |         |
   0 0 0 0 0 1 0 0|0|1|1 0|. . . .|1 1 1 0 0|0|. . . . .|. . . . .|
                  | |     |                 | |         |
                  | |     `-imm4            | `-pattern `-Rd
                  | `-size<0>               `-op
                  `-size<1>
  
  
 
.SS Halfword
 
 CNTH    <Xd>{, <pattern>{, MUL #<imm>}}
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 16;
 integer d = UInt(Rd);
 bits(5) pat = pattern;
 integer imm = UInt(imm4) + 1;
.SS Word - A64 - cntw_r_s_
 
                                                                   
                     22                                            
                   23 |                      10                    
                 24 | |  20      16        11 |         5         0
                  | | |   |       |         | |         |         |
   0 0 0 0 0 1 0 0|1|0|1 0|. . . .|1 1 1 0 0|0|. . . . .|. . . . .|
                  | |     |                 | |         |
                  | |     `-imm4            | `-pattern `-Rd
                  | `-size<0>               `-op
                  `-size<1>
  
  
 
.SS Word
 
 CNTW    <Xd>{, <pattern>{, MUL #<imm>}}
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 32;
 integer d = UInt(Rd);
 bits(5) pat = pattern;
 integer imm = UInt(imm4) + 1;
 
 CheckSVEEnabled();
 integer count = DecodePredCount(pat, esize);
 
 X[d] = (count * imm)<63:0>;
 

.SS Assembler Symbols

 <Xd>
  Encoded in Rd
  Is the 64-bit name of the destination general-purpose register, encoded in the
  "Rd" field.

 <pattern>
  Encoded in pattern
  Is the optional pattern specifier, defaulting to ALL,

  pattern <pattern> 
  00000   POW2      
  00001   VL1       
  00010   VL2       
  00011   VL3       
  00100   VL4       
  00101   VL5       
  00110   VL6       
  00111   VL7       
  01000   VL8       
  01001   VL16      
  01010   VL32      
  01011   VL64      
  01100   VL128     
  01101   VL256     
  0111x   #uimm5    
  101x1   #uimm5    
  10110   #uimm5    
  1x0x1   #uimm5    
  1x010   #uimm5    
  1xx00   #uimm5    
  11101   MUL4      
  11110   MUL3      
  11111   ALL       

 <imm>
  Encoded in imm4
  Is the immediate multiplier, in the range 1 to 16, defaulting to 1, encoded in
  the "imm4" field.



.SS Operation

 CheckSVEEnabled();
 integer count = DecodePredCount(pat, esize);
 
 X[d] = (count * imm)<63:0>;

