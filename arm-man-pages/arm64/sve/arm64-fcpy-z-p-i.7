.nh
.TH "FCPY" "7" " "  "instruction" "sve"
.SS FCPY
 Copy 8-bit floating-point immediate to vector elements (predicated)

 Copy a floating-point immediate into each active element in the destination
 vector. Inactive elements in the destination vector register remain unmodified.

 Status : Green

 Predicated : True

 takes_pred_movprfx : True



.SS SVE - A64 - fcpy_z_p_i_
 
                                                                   
                                                                   
                                                                   
                 24  22  20      16    13               5         0
                  |   |   |       |     |               |         |
   0 0 0 0 0 1 0 1|. .|0 1|. . . .|1 1 0|. . . . . . . .|. . . . .|
                  |       |             |               |
                  `-size  `-Pg          `-imm8          `-Zd
  
  
 
.SS SVE
 
 FCPY    <Zd>.<T>, <Pg>/M, #<const>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer d = UInt(Zd);
 bits(esize) imm = VFPExpandImm(imm8);
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) result = Z[d];
 
 for e = 0 to elements-1
     if ElemP[mask, e, esize] == '1' then
         Elem[result, e, esize] = imm;
 
 Z[d] = result;
 

.SS Assembler Symbols

 <Zd>
  Encoded in Zd
  Is the name of the destination scalable vector register, encoded in the "Zd"
  field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T>      
  00   RESERVED 
  01   H        
  10   S        
  11   D        

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register, encoded in the "Pg"
  field.

 <const>
  Encoded in imm8
  Is a floating-point immediate value expressable as ±n÷16×2^r, where n and r
  are integers such that 16 ≤ n ≤ 31 and -3 ≤ r ≤ 4, i.e. a normalized binary
  floating-point encoding with 1 sign bit, 3-bit exponent, and 4-bit fractional
  part, encoded in the "imm8" field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) result = Z[d];
 
 for e = 0 to elements-1
     if ElemP[mask, e, esize] == '1' then
         Elem[result, e, esize] = imm;
 
 Z[d] = result;

