.nh
.TH "FDUP" "7" " "  "instruction" "sve"
.SS FDUP
 Broadcast 8-bit floating-point immediate to vector elements (unpredicated)

 Unconditionally broadcast the floating-point immediate into each element of the
 destination vector. This instruction is unpredicated.

 Status : Green

 Predicated : False

 takes_pred_movprfx : False



.SS SVE - A64 - fdup_z_i_
 
                                                                   
                               17                                  
                             18 |      13                          
                 24  22    19 | |    14 |               5         0
                  |   |     | | |     | |               |         |
   0 0 1 0 0 1 0 1|. .|1 1 1|0|0|1 1 1|0|. . . . . . . .|. . . . .|
                  |         | |       | |               |
                  `-size    | |       | `-imm8          `-Zd
                            | |       `-o2
                            | `-opc<0>
                            `-opc<1>
  
  
 
.SS SVE
 
 FDUP    <Zd>.<T>, #<const>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer d = UInt(Zd);
 bits(esize) imm = VFPExpandImm(imm8);
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(VL) result;
 
 for e = 0 to elements-1
     Elem[result, e, esize] = imm;
 
 Z[d] = result;
 

.SS Assembler Symbols

 <Zd>
  Encoded in Zd
  Is the name of the destination scalable vector register, encoded in the "Zd"
  field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T>      
  00   RESERVED 
  01   H        
  10   S        
  11   D        

 <const>
  Encoded in imm8
  Is a floating-point immediate value expressable as ±n÷16×2^r, where n and r
  are integers such that 16 ≤ n ≤ 31 and -3 ≤ r ≤ 4, i.e. a normalized binary
  floating-point encoding with 1 sign bit, 3-bit exponent, and 4-bit fractional
  part, encoded in the "imm8" field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(VL) result;
 
 for e = 0 to elements-1
     Elem[result, e, esize] = imm;
 
 Z[d] = result;

