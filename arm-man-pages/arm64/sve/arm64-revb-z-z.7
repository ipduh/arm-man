.nh
.TH "REVB, REVH, REVW" "7" " "  "instruction" "sve"
.SS REVB, REVH, REVW
 Reverse bytes / halfwords / words within elements (predicated)

 Reverse the order of 8-bit bytes, 16-bit halfwords or 32-bit words within each
 active element of the source vector, and place the results in the corresponding
 elements of the destination vector. Inactive elements in the destination vector
 register remain unmodified.

 Status : Green

 Predicated : True

 takes_pred_movprfx : True


It has encodings from 3 classes: Byte, Halfword and Word

.SS Byte - A64 - revb_z_z_
 
                                                                   
                                 16                                
                               17 |                                
                 24  22      18 | |    13    10         5         0
                  |   |       | | |     |     |         |         |
   0 0 0 0 0 1 0 1|. .|1 0 0 1|0|0|1 0 0|. . .|. . . . .|. . . . .|
                  |           | |       |     |         |
                  `-size      | |       `-Pg  `-Zn      `-Zd
                              | `-opc<0>
                              `-opc<1>
  
  
 
.SS Byte
 
 REVB    <Zd>.<T>, <Pg>/M, <Zn>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 integer swsize = 8;
.SS Halfword - A64 - revh_z_z_
 
                                                                   
                                 16                                
                               17 |                                
                 24  22      18 | |    13    10         5         0
                  |   |       | | |     |     |         |         |
   0 0 0 0 0 1 0 1|. .|1 0 0 1|0|1|1 0 0|. . .|. . . . .|. . . . .|
                  |           | |       |     |         |
                  `-size      | |       `-Pg  `-Zn      `-Zd
                              | `-opc<0>
                              `-opc<1>
  
  
 
.SS Halfword
 
 REVH    <Zd>.<T>, <Pg>/M, <Zn>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size != '1x' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 integer swsize = 16;
.SS Word - A64 - revw_z_z_
 
                                                                   
                                 16                                
                               17 |                                
                 24  22      18 | |    13    10         5         0
                  |   |       | | |     |     |         |         |
   0 0 0 0 0 1 0 1|. .|1 0 0 1|1|0|1 0 0|. . .|. . . . .|. . . . .|
                  |           | |       |     |         |
                  `-size      | |       `-Pg  `-Zn      `-Zd
                              | `-opc<0>
                              `-opc<1>
  
  
 
.SS Word
 
 REVW    <Zd>.D, <Pg>/M, <Zn>.D
 
 if !HaveSVE() then UNDEFINED;
 if size != '11' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 integer swsize = 32;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand = Z[n];
 bits(VL) result = Z[d];
 
 for e = 0 to elements-1
     if ElemP[mask, e, esize] == '1' then
         bits(esize) element = Elem[operand, e, esize];
         Elem[result, e, esize] = Reverse(element, swsize);
 
 Z[d] = result;
 

.SS Assembler Symbols

 <Zd>
  Encoded in Zd
  Is the name of the destination scalable vector register, encoded in the "Zd"
  field.

 <T>
  Encoded in size
  For the byte variant: is the size specifier,

  size <T>      
  00   RESERVED 
  01   H        
  10   S        
  11   D        

 <T>
  Encoded in size<0>
  For the halfword variant: is the size specifier,

  size<0> <T> 
  0       S   
  1       D   

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zn>
  Encoded in Zn
  Is the name of the source scalable vector register, encoded in the "Zn" field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand = Z[n];
 bits(VL) result = Z[d];
 
 for e = 0 to elements-1
     if ElemP[mask, e, esize] == '1' then
         bits(esize) element = Elem[operand, e, esize];
         Elem[result, e, esize] = Reverse(element, swsize);
 
 Z[d] = result;

