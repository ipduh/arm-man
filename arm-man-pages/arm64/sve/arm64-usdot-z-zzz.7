.nh
.TH "USDOT (vectors)" "7" " "  "instruction" "sve"
.SS USDOT (vectors)
 Unsigned by signed integer dot product

 The unsigned by signed integer dot product instruction computes the dot product
 of a group of four unsigned 8-bit integer values held in each 32-bit element of
 the first source vector multiplied by a group of four signed 8-bit integer
 values in the corresponding 32-bit element of the second source vector, and
 then destructively adds the widened dot product to the corresponding 32-bit
 element of the destination vector.

 This instruction is unpredicated.

 ID_AA64ZFR0_EL1.I8MM indicates whether this instruction is implemented.

 Status : Green

 Predicated : False

 takes_pred_movprfx : False



.SS SVE - A64 - usdot_z_zzz_s
 
                       21                                          
                     22 |                                          
                   23 | |                                          
                 24 | | |        16          10         5         0
                  | | | |         |           |         |         |
   0 1 0 0 0 1 0 0|1|0|0|. . . . .|0 1 1 1 1 0|. . . . .|. . . . .|
                  | |   |                     |         |
                  | |   `-Zm                  `-Zn      `-Zda
                  | `-size<0>
                  `-size<1>
  
  
 
.SS SVE
 
 USDOT   <Zda>.S, <Zn>.B, <Zm>.B
 
 if !HaveSVE() || !HaveInt8MatMulExt() then UNDEFINED;
 integer esize = 32;
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer da = UInt(Zda);
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(VL) operand3 = Z[da];
 bits(VL) result;
 
 for e = 0 to elements-1
     bits(esize) res = Elem[operand3, e, esize];
     for i = 0 to 3
         integer element1 = UInt(Elem[operand1, 4 * e + i, esize DIV 4]);
         integer element2 = SInt(Elem[operand2, 4 * e + i, esize DIV 4]);
         res = res + element1 * element2;
     Elem[result, e, esize] = res;
 
 Z[da] = result;
 

.SS Assembler Symbols

 <Zda>
  Encoded in Zda
  Is the name of the third source and destination scalable vector register,
  encoded in the "Zda" field.

 <Zn>
  Encoded in Zn
  Is the name of the first source scalable vector register, encoded in the "Zn"
  field.

 <Zm>
  Encoded in Zm
  Is the name of the second source scalable vector register, encoded in the "Zm"
  field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(VL) operand3 = Z[da];
 bits(VL) result;
 
 for e = 0 to elements-1
     bits(esize) res = Elem[operand3, e, esize];
     for i = 0 to 3
         integer element1 = UInt(Elem[operand1, 4 * e + i, esize DIV 4]);
         integer element2 = SInt(Elem[operand2, 4 * e + i, esize DIV 4]);
         res = res + element1 * element2;
     Elem[result, e, esize] = res;
 
 Z[da] = result;

