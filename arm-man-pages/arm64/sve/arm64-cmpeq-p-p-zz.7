.nh
.TH "CMP<cc> (vectors)" "7" " "  "instruction" "sve"
.SS CMP<cc> (vectors)
 Compare vectors

 Compare active integer elements in the first source vector with corresponding
 elements in the second source vector, and place the boolean results of the
 specified comparison in the corresponding elements of the destination
 predicate. Inactive elements in the destination predicate register are set to
 zero. Sets the First (N), None (Z), !Last (C) condition flags based on the
 predicate result, and the V flag to zero.



 The <cc> symbol specifies one of the standard ARM condition codes: EQ, GE, GT,
 HI, HS or NE.

 Status : Green

 Predicated : True

 takes_pred_movprfx : False


It has encodings from 6 classes: Equal, Greater than, Greater than or equal, Higher, Higher or same and Not equal

.SS Equal - A64 - cmpeq_p_p_zz_
 
                                       13                          
                                     14 |                          
                       21          15 | |                          
                 24  22 |        16 | | |    10         5 4       0
                  |   | |         | | | |     |         | |       |
   0 0 1 0 0 1 0 0|. .|0|. . . . .|1|0|1|. . .|. . . . .|0|. . . .|
                  |     |         |   | |     |         | |
                  |     `-Zm      |   | `-Pg  `-Zn      | `-Pd
                  `-size          |   `-o2              `-ne
                                  `-op
  
  
 
.SS Equal
 
 CMPEQ   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer d = UInt(Pd);
 SVECmp op = Cmp_EQ;
 boolean unsigned = FALSE;
.SS Greater than - A64 - cmpgt_p_p_zz_
 
                                       13                          
                                     14 |                          
                       21          15 | |                          
                 24  22 |        16 | | |    10         5 4       0
                  |   | |         | | | |     |         | |       |
   0 0 1 0 0 1 0 0|. .|0|. . . . .|1|0|0|. . .|. . . . .|1|. . . .|
                  |     |         |   | |     |         | |
                  |     `-Zm      |   | `-Pg  `-Zn      | `-Pd
                  `-size          |   `-o2              `-ne
                                  `-op
  
  
 
.SS Greater than
 
 CMPGT   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer d = UInt(Pd);
 SVECmp op = Cmp_GT;
 boolean unsigned = FALSE;
.SS Greater than or equal - A64 - cmpge_p_p_zz_
 
                                       13                          
                                     14 |                          
                       21          15 | |                          
                 24  22 |        16 | | |    10         5 4       0
                  |   | |         | | | |     |         | |       |
   0 0 1 0 0 1 0 0|. .|0|. . . . .|1|0|0|. . .|. . . . .|0|. . . .|
                  |     |         |   | |     |         | |
                  |     `-Zm      |   | `-Pg  `-Zn      | `-Pd
                  `-size          |   `-o2              `-ne
                                  `-op
  
  
 
.SS Greater than or equal
 
 CMPGE   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer d = UInt(Pd);
 SVECmp op = Cmp_GE;
 boolean unsigned = FALSE;
.SS Higher - A64 - cmphi_p_p_zz_
 
                                       13                          
                                     14 |                          
                       21          15 | |                          
                 24  22 |        16 | | |    10         5 4       0
                  |   | |         | | | |     |         | |       |
   0 0 1 0 0 1 0 0|. .|0|. . . . .|0|0|0|. . .|. . . . .|1|. . . .|
                  |     |         |   | |     |         | |
                  |     `-Zm      |   | `-Pg  `-Zn      | `-Pd
                  `-size          |   `-o2              `-ne
                                  `-op
  
  
 
.SS Higher
 
 CMPHI   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer d = UInt(Pd);
 SVECmp op = Cmp_GT;
 boolean unsigned = TRUE;
.SS Higher or same - A64 - cmphs_p_p_zz_
 
                                       13                          
                                     14 |                          
                       21          15 | |                          
                 24  22 |        16 | | |    10         5 4       0
                  |   | |         | | | |     |         | |       |
   0 0 1 0 0 1 0 0|. .|0|. . . . .|0|0|0|. . .|. . . . .|0|. . . .|
                  |     |         |   | |     |         | |
                  |     `-Zm      |   | `-Pg  `-Zn      | `-Pd
                  `-size          |   `-o2              `-ne
                                  `-op
  
  
 
.SS Higher or same
 
 CMPHS   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer d = UInt(Pd);
 SVECmp op = Cmp_GE;
 boolean unsigned = TRUE;
.SS Not equal - A64 - cmpne_p_p_zz_
 
                                       13                          
                                     14 |                          
                       21          15 | |                          
                 24  22 |        16 | | |    10         5 4       0
                  |   | |         | | | |     |         | |       |
   0 0 1 0 0 1 0 0|. .|0|. . . . .|1|0|1|. . .|. . . . .|1|. . . .|
                  |     |         |   | |     |         | |
                  |     `-Zm      |   | `-Pg  `-Zn      | `-Pd
                  `-size          |   `-o2              `-ne
                                  `-op
  
  
 
.SS Not equal
 
 CMPNE   <Pd>.<T>, <Pg>/Z, <Zn>.<T>, <Zm>.<T>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer d = UInt(Pd);
 SVECmp op = Cmp_NE;
 boolean unsigned = FALSE;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(PL) result;
 
 for e = 0 to elements-1
     integer element1 = Int(Elem[operand1, e, esize], unsigned);
     integer element2 = Int(Elem[operand2, e, esize], unsigned);
     if ElemP[mask, e, esize] == '1' then
         boolean cond;
         case op of
             when Cmp_EQ cond = element1 == element2;
             when Cmp_NE cond = element1 != element2;
             when Cmp_GE cond = element1 >= element2;
             when Cmp_LT cond = element1 <  element2;
             when Cmp_GT cond = element1 >  element2;
             when Cmp_LE cond = element1 <= element2;
         ElemP[result, e, esize] = if cond then '1' else '0';
     else
         ElemP[result, e, esize] = '0';
 
 PSTATE.<N,Z,C,V> = PredTest(mask, result, esize);
 P[d] = result;
 

.SS Assembler Symbols

 <Pd>
  Encoded in Pd
  Is the name of the destination scalable predicate register, encoded in the
  "Pd" field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T> 
  00   B   
  01   H   
  10   S   
  11   D   

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zn>
  Encoded in Zn
  Is the name of the first source scalable vector register, encoded in the "Zn"
  field.

 <Zm>
  Encoded in Zm
  Is the name of the second source scalable vector register, encoded in the "Zm"
  field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(PL) result;
 
 for e = 0 to elements-1
     integer element1 = Int(Elem[operand1, e, esize], unsigned);
     integer element2 = Int(Elem[operand2, e, esize], unsigned);
     if ElemP[mask, e, esize] == '1' then
         boolean cond;
         case op of
             when Cmp_EQ cond = element1 == element2;
             when Cmp_NE cond = element1 != element2;
             when Cmp_GE cond = element1 >= element2;
             when Cmp_LT cond = element1 <  element2;
             when Cmp_GT cond = element1 >  element2;
             when Cmp_LE cond = element1 <= element2;
         ElemP[result, e, esize] = if cond then '1' else '0';
     else
         ElemP[result, e, esize] = '0';
 
 PSTATE.<N,Z,C,V> = PredTest(mask, result, esize);
 P[d] = result;

