.nh
.TH "UDOT (vectors)" "7" " "  "instruction" "sve"
.SS UDOT (vectors)
 Unsigned integer dot product

 The unsigned integer dot product instruction computes the dot product of a
 group of four unsigned 8-bit or 16-bit integer values held in each 32-bit or
 64-bit element of the first source vector multiplied by a group of four
 unsigned 8-bit or 16-bit integer values in the corresponding 32-bit or 64-bit
 element of the second source vector, and then destructively adds the widened
 dot product to the corresponding 32-bit or 64-bit element of the destination
 vector.

 This instruction is unpredicated.

 Status : Green

 Predicated : False

 takes_pred_movprfx : False



.SS SVE - A64 - udot_z_zzz_
 
                                                                   
                                                                   
                       21                    10                    
                 24  22 |        16        11 |         5         0
                  |   | |         |         | |         |         |
   0 1 0 0 0 1 0 0|. .|0|. . . . .|0 0 0 0 0|1|. . . . .|. . . . .|
                  |     |                   | |         |
                  |     `-Zm                | `-Zn      `-Zda
                  `-size                    `-U
  
  
 
.SS SVE
 
 UDOT    <Zda>.<T>, <Zn>.<Tb>, <Zm>.<Tb>
 
 if !HaveSVE() then UNDEFINED;
 if size == '0x' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer da = UInt(Zda);
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(VL) operand3 = Z[da];
 bits(VL) result;
 
 for e = 0 to elements-1
     bits(esize) res = Elem[operand3, e, esize];
     for i = 0 to 3
         integer element1 = UInt(Elem[operand1, 4 * e + i, esize DIV 4]);
         integer element2 = UInt(Elem[operand2, 4 * e + i, esize DIV 4]);
         res = res + element1 * element2;
     Elem[result, e, esize] = res;
 
 Z[da] = result;
 

.SS Assembler Symbols

 <Zda>
  Encoded in Zda
  Is the name of the third source and destination scalable vector register,
  encoded in the "Zda" field.

 <T>
  Encoded in size<0>
  Is the size specifier,

  size<0> <T> 
  0       S   
  1       D   

 <Zn>
  Encoded in Zn
  Is the name of the first source scalable vector register, encoded in the "Zn"
  field.

 <Tb>
  Encoded in size<0>
  Is the size specifier,

  size<0> <Tb> 
  0       B    
  1       H    

 <Zm>
  Encoded in Zm
  Is the name of the second source scalable vector register, encoded in the "Zm"
  field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(VL) operand3 = Z[da];
 bits(VL) result;
 
 for e = 0 to elements-1
     bits(esize) res = Elem[operand3, e, esize];
     for i = 0 to 3
         integer element1 = UInt(Elem[operand1, 4 * e + i, esize DIV 4]);
         integer element2 = UInt(Elem[operand2, 4 * e + i, esize DIV 4]);
         res = res + element1 * element2;
     Elem[result, e, esize] = res;
 
 Z[da] = result;

