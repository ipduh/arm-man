.nh
.TH "BFCVT" "7" " "  "instruction" "sve"
.SS BFCVT
 Floating-point down convert to BFloat16 format (predicated)

 Convert to BFloat16 from single-precision in each active floating-point element
 of the source vector, and place the results in the corresponding elements of
 the destination vector. Inactive elements in the destination vector register
 remain unmodified.

 Since the result type is smaller than the input type, the results are zero-
 extended to fill each destination element.

 Unlike the BFloat16 matrix multiplication and dot product instructions, this
 instruction honors all of the FPCR bits that apply to single-precision
 arithmetic. It can also generate a floating-point exception that causes
 cumulative exception bits in the FPSR to be set, or a synchronous exception to
 be taken, depending on the enable bits in the FPCR.

 ID_AA64ZFR0_EL1.BF16 indicates whether this instruction is implemented.

 Status : Green

 Predicated : True

 takes_pred_movprfx : True



.SS SVE - A64 - bfcvt_z_p_z_s2bf
 
                                                                   
                     22          16                                
                   23 |        17 |                                
                 24 | |      18 | |    13    10         5         0
                  | | |       | | |     |     |         |         |
   0 1 1 0 0 1 0 1|1|0|0 0 1 0|1|0|1 0 1|. . .|. . . . .|. . . . .|
                  | |         | |       |     |         |
                  | `-opc<0>  | |       `-Pg  `-Zn      `-Zd
                  `-opc<1>    | `-opc2<0>
                              `-opc2<1>
  
  
 
.SS SVE
 
 BFCVT   <Zd>.H, <Pg>/M, <Zn>.S
 
 if !HaveSVE() || !HaveBF16Ext() then UNDEFINED;
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 
 CheckSVEEnabled();
 integer elements = VL DIV 32;
 bits(PL) mask = P[g];
 bits(VL) operand  = Z[n];
 bits(VL) result = Z[d];
 
 for e = 0 to elements-1
     bits(32) element = Elem[operand, e, 32];
     if ElemP[mask, e, 32] == '1' then
         Elem[result, 2*e, 16] = FPConvertBF(element, FPCR);
         Elem[result, 2*e+1, 16] = Zeros();
 
 Z[d] = result;
 

.SS Assembler Symbols

 <Zd>
  Encoded in Zd
  Is the name of the destination scalable vector register, encoded in the "Zd"
  field.

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zn>
  Encoded in Zn
  Is the name of the source scalable vector register, encoded in the "Zn" field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV 32;
 bits(PL) mask = P[g];
 bits(VL) operand  = Z[n];
 bits(VL) result = Z[d];
 
 for e = 0 to elements-1
     bits(32) element = Elem[operand, e, 32];
     if ElemP[mask, e, 32] == '1' then
         Elem[result, 2*e, 16] = FPConvertBF(element, FPCR);
         Elem[result, 2*e+1, 16] = Zeros();
 
 Z[d] = result;

