.nh
.TH "BRKPA, BRKPAS" "7" " "  "instruction" "sve"
.SS BRKPA, BRKPAS
 Break after first true condition, propagating from previous partition

 If the last active element of the first source predicate is false then set the
 destination predicate to all-false. Otherwise sets destination predicate
 elements up to and including the first active and true source element to true,
 then sets subsequent elements to false. Inactive elements in the destination
 predicate register are set to zero. Optionally sets the First (N), None (Z),
 !Last (C) condition flags based on the predicate result, and the V flag to
 zero.

 Status : Green

 Predicated : True

 takes_pred_movprfx : False


It has encodings from 2 classes: Not setting the condition flags and Setting the condition flags

.SS Not setting the condition flags - A64 - brkpa_p_p_pp_
 
                                                                   
                     22                                            
                   23 |                                            
                 24 | |  20      16  14      10 9       5 4       0
                  | | |   |       |   |       | |       | |       |
   0 0 1 0 0 1 0 1|0|0|0 0|. . . .|1 1|. . . .|0|. . . .|0|. . . .|
                  | |     |           |         |       | |
                  | `-S   `-Pm        `-Pg      `-Pn    | `-Pd
                  `-op                                  `-B
  
  
 
.SS Not setting the condition flags
 
 BRKPA   <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8;
 integer g = UInt(Pg);
 integer n = UInt(Pn);
 integer m = UInt(Pm);
 integer d = UInt(Pd);
 boolean setflags = FALSE;
.SS Setting the condition flags - A64 - brkpas_p_p_pp_
 
                                                                   
                     22                                            
                   23 |                                            
                 24 | |  20      16  14      10 9       5 4       0
                  | | |   |       |   |       | |       | |       |
   0 0 1 0 0 1 0 1|0|1|0 0|. . . .|1 1|. . . .|0|. . . .|0|. . . .|
                  | |     |           |         |       | |
                  | `-S   `-Pm        `-Pg      `-Pn    | `-Pd
                  `-op                                  `-B
  
  
 
.SS Setting the condition flags
 
 BRKPAS  <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8;
 integer g = UInt(Pg);
 integer n = UInt(Pn);
 integer m = UInt(Pm);
 integer d = UInt(Pd);
 boolean setflags = TRUE;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(PL) operand1 = P[n];
 bits(PL) operand2 = P[m];
 bits(PL) result;
 boolean last = (LastActive(mask, operand1, 8) == '1');
 
 for e = 0 to elements-1
     if ElemP[mask, e, 8] == '1' then
         ElemP[result, e, 8] = if last then '1' else '0';
         last = last && (ElemP[operand2, e, 8] == '0');
     else
         ElemP[result, e, 8] = '0';
 
 if setflags then
     PSTATE.<N,Z,C,V> = PredTest(mask, result, esize);
 P[d] = result;
 

.SS Assembler Symbols

 <Pd>
  Encoded in Pd
  Is the name of the destination scalable predicate register, encoded in the
  "Pd" field.

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register, encoded in the "Pg"
  field.

 <Pn>
  Encoded in Pn
  Is the name of the first source scalable predicate register, encoded in the
  "Pn" field.

 <Pm>
  Encoded in Pm
  Is the name of the second source scalable predicate register, encoded in the
  "Pm" field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(PL) operand1 = P[n];
 bits(PL) operand2 = P[m];
 bits(PL) result;
 boolean last = (LastActive(mask, operand1, 8) == '1');
 
 for e = 0 to elements-1
     if ElemP[mask, e, 8] == '1' then
         ElemP[result, e, 8] = if last then '1' else '0';
         last = last && (ElemP[operand2, e, 8] == '0');
     else
         ElemP[result, e, 8] = '0';
 
 if setflags then
     PSTATE.<N,Z,C,V> = PredTest(mask, result, esize);
 P[d] = result;

