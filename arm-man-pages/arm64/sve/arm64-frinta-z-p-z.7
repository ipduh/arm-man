.nh
.TH "FRINT<r>" "7" " "  "instruction" "sve"
.SS FRINT<r>
 Floating-point round to integral value (predicated)

 Round to an integral floating-point value with the specified rounding option
 from each active floating-point element of the source vector, and place the
 results in the corresponding elements of the destination vector. Inactive
 elements in the destination vector register remain unmodified.



 The <r> symbol specifies one of the following rounding options: N (to nearest,
 with ties to even), A (to nearest, with ties away from zero), M (toward minus
 Infinity), P (toward plus Infinity), Z (toward zero), I (current FPCR rounding
 mode), or X (current FPCR rounding mode, signalling inexact).

 Status : Green

 Predicated : True

 takes_pred_movprfx : True


It has encodings from 7 classes: Current mode, Current mode signalling inexact, Nearest with ties to away, Nearest with ties to even, Toward zero, Toward minus infinity and Toward plus infinity

.SS Current mode - A64 - frinti_z_p_z_
 
                                                                   
                                                                   
                                 16                                
                 24  22    19  17 |    13    10         5         0
                  |   |     |   | |     |     |         |         |
   0 1 1 0 0 1 0 1|. .|0 0 0|1 1|1|1 0 1|. . .|. . . . .|. . . . .|
                  |         |   |       |     |         |
                  `-size    |   |       `-Pg  `-Zn      `-Zd
                            |   `-opc<0>
                            `-opc<2:1>
  
  
 
.SS Current mode
 
 FRINTI  <Zd>.<T>, <Pg>/M, <Zn>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 boolean exact = FALSE;
 FPRounding rounding = FPRoundingMode(FPCR);
.SS Current mode signalling inexact - A64 - frintx_z_p_z_
 
                                                                   
                                                                   
                                 16                                
                 24  22    19  17 |    13    10         5         0
                  |   |     |   | |     |     |         |         |
   0 1 1 0 0 1 0 1|. .|0 0 0|1 1|0|1 0 1|. . .|. . . . .|. . . . .|
                  |         |   |       |     |         |
                  `-size    |   |       `-Pg  `-Zn      `-Zd
                            |   `-opc<0>
                            `-opc<2:1>
  
  
 
.SS Current mode signalling inexact
 
 FRINTX  <Zd>.<T>, <Pg>/M, <Zn>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 boolean exact = TRUE;
 FPRounding rounding = FPRoundingMode(FPCR);
.SS Nearest with ties to away - A64 - frinta_z_p_z_
 
                                                                   
                                                                   
                                 16                                
                 24  22    19  17 |    13    10         5         0
                  |   |     |   | |     |     |         |         |
   0 1 1 0 0 1 0 1|. .|0 0 0|1 0|0|1 0 1|. . .|. . . . .|. . . . .|
                  |         |   |       |     |         |
                  `-size    |   |       `-Pg  `-Zn      `-Zd
                            |   `-opc<0>
                            `-opc<2:1>
  
  
 
.SS Nearest with ties to away
 
 FRINTA  <Zd>.<T>, <Pg>/M, <Zn>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 boolean exact = FALSE;
 FPRounding rounding = FPRounding_TIEAWAY;
.SS Nearest with ties to even - A64 - frintn_z_p_z_
 
                                                                   
                                                                   
                                 16                                
                 24  22    19  17 |    13    10         5         0
                  |   |     |   | |     |     |         |         |
   0 1 1 0 0 1 0 1|. .|0 0 0|0 0|0|1 0 1|. . .|. . . . .|. . . . .|
                  |         |   |       |     |         |
                  `-size    |   |       `-Pg  `-Zn      `-Zd
                            |   `-opc<0>
                            `-opc<2:1>
  
  
 
.SS Nearest with ties to even
 
 FRINTN  <Zd>.<T>, <Pg>/M, <Zn>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 boolean exact = FALSE;
 FPRounding rounding = FPRounding_TIEEVEN;
.SS Toward zero - A64 - frintz_z_p_z_
 
                                                                   
                                                                   
                                 16                                
                 24  22    19  17 |    13    10         5         0
                  |   |     |   | |     |     |         |         |
   0 1 1 0 0 1 0 1|. .|0 0 0|0 1|1|1 0 1|. . .|. . . . .|. . . . .|
                  |         |   |       |     |         |
                  `-size    |   |       `-Pg  `-Zn      `-Zd
                            |   `-opc<0>
                            `-opc<2:1>
  
  
 
.SS Toward zero
 
 FRINTZ  <Zd>.<T>, <Pg>/M, <Zn>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 boolean exact = FALSE;
 FPRounding rounding = FPRounding_ZERO;
.SS Toward minus infinity - A64 - frintm_z_p_z_
 
                                                                   
                                                                   
                                 16                                
                 24  22    19  17 |    13    10         5         0
                  |   |     |   | |     |     |         |         |
   0 1 1 0 0 1 0 1|. .|0 0 0|0 1|0|1 0 1|. . .|. . . . .|. . . . .|
                  |         |   |       |     |         |
                  `-size    |   |       `-Pg  `-Zn      `-Zd
                            |   `-opc<0>
                            `-opc<2:1>
  
  
 
.SS Toward minus infinity
 
 FRINTM  <Zd>.<T>, <Pg>/M, <Zn>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 boolean exact = FALSE;
 FPRounding rounding = FPRounding_NEGINF;
.SS Toward plus infinity - A64 - frintp_z_p_z_
 
                                                                   
                                                                   
                                 16                                
                 24  22    19  17 |    13    10         5         0
                  |   |     |   | |     |     |         |         |
   0 1 1 0 0 1 0 1|. .|0 0 0|0 0|1|1 0 1|. . .|. . . . .|. . . . .|
                  |         |   |       |     |         |
                  `-size    |   |       `-Pg  `-Zn      `-Zd
                            |   `-opc<0>
                            `-opc<2:1>
  
  
 
.SS Toward plus infinity
 
 FRINTP  <Zd>.<T>, <Pg>/M, <Zn>.<T>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Zd);
 boolean exact = FALSE;
 FPRounding rounding = FPRounding_POSINF;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand = Z[n];
 bits(VL) result = Z[d];
 
 for e = 0 to elements-1
     bits(esize) element = Elem[operand, e, esize];
     if ElemP[mask, e, esize] == '1' then
         Elem[result, e, esize] = FPRoundInt(element, FPCR, rounding, exact);
 
 Z[d] = result;
 

.SS Assembler Symbols

 <Zd>
  Encoded in Zd
  Is the name of the destination scalable vector register, encoded in the "Zd"
  field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T>      
  00   RESERVED 
  01   H        
  10   S        
  11   D        

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zn>
  Encoded in Zn
  Is the name of the source scalable vector register, encoded in the "Zn" field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand = Z[n];
 bits(VL) result = Z[d];
 
 for e = 0 to elements-1
     bits(esize) element = Elem[operand, e, esize];
     if ElemP[mask, e, esize] == '1' then
         Elem[result, e, esize] = FPRoundInt(element, FPCR, rounding, exact);
 
 Z[d] = result;

