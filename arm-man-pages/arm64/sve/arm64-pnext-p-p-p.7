.nh
.TH "PNEXT" "7" " "  "instruction" "sve"
.SS PNEXT
 Find next active predicate

 An instruction used to construct a loop which iterates over all active elements
 in a predicate. If all source predicate elements are false it sets the first
 active predicate element in the destination predicate to true. Otherwise it
 determines the next active predicate element following the last true source
 predicate element, and if one is found sets the corresponding destination
 predicate element to true. All other destination predicate elements are set to
 false. Sets the First (N), None (Z), !Last (C) condition flags based on the
 predicate result, and the V flag to zero.

 Status : Green

 Predicated : True

 takes_pred_movprfx : False



.SS SVE - A64 - pnext_p_p_p_
 
                                                                   
                                                                   
                                                                   
                 24  22                      10 9       5 4       0
                  |   |                       | |       | |       |
   0 0 1 0 0 1 0 1|. .|0 1 1 0 0 1 1 1 0 0 0 1|0|. . . .|0|. . . .|
                  |                             |         |
                  `-size                        `-Pg      `-Pdn
  
  
 
.SS SVE
 
 PNEXT   <Pdn>.<T>, <Pg>, <Pdn>.<T>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer dn = UInt(Pdn);
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(PL) operand = P[dn];
 bits(PL) result;
 
 integer next = LastActiveElement(operand, esize) + 1;
 
 while next < elements && (ElemP[mask, next, esize] == '0') do
     next = next + 1;
 
 result = Zeros();
 if next < elements then
     ElemP[result, next, esize] = '1';
 
 PSTATE.<N,Z,C,V> = PredTest(mask, result, esize);
 P[dn] = result;
 

.SS Assembler Symbols

 <Pdn>
  Encoded in Pdn
  Is the name of the source and destination scalable predicate register, encoded
  in the "Pdn" field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T> 
  00   B   
  01   H   
  10   S   
  11   D   

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register, encoded in the "Pg"
  field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(PL) operand = P[dn];
 bits(PL) result;
 
 integer next = LastActiveElement(operand, esize) + 1;
 
 while next < elements && (ElemP[mask, next, esize] == '0') do
     next = next + 1;
 
 result = Zeros();
 if next < elements then
     ElemP[result, next, esize] = '1';
 
 PSTATE.<N,Z,C,V> = PredTest(mask, result, esize);
 P[dn] = result;

