.nh
.TH "FCMLA (vectors)" "7" " "  "instruction" "sve"
.SS FCMLA (vectors)
 Floating-point complex multiply-add with rotate (predicated)

 Multiply the duplicated real components for rotations 0 and 180, or imaginary
 components for rotations 90 and 270, of the floating-point complex numbers in
 the first source vector by the corresponding complex number in the second
 source vector rotated by 0, 90, 180 or 270 degrees in the direction from the
 positive real axis towards the positive imaginary axis, when considered in
 polar representation.

 Then destructively add the products to the corresponding components of the
 complex numbers in the addend and destination vector, without intermediate
 rounding.

 These transformations permit the creation of a variety of multiply-add and
 multiply-subtract operations on complex numbers by combining two of these
 instructions with the same vector operands but with rotations that are 90
 degrees apart.

 Each complex number is represented in a vector register as an even/odd pair of
 elements with the real part in the even-numbered element and the imaginary part
 in the odd-numbered element. Inactive elements in the destination vector
 register remain unmodified.

 Status : Green

 Predicated : True

 takes_pred_movprfx : True



.SS SVE - A64 - fcmla_z_p_zzz_
 
                                                                   
                                                                   
                       21          15                              
                 24  22 |        16 |  13    10         5         0
                  |   | |         | |   |     |         |         |
   0 1 1 0 0 1 0 0|. .|0|. . . . .|0|. .|. . .|. . . . .|. . . . .|
                  |     |           |   |     |         |
                  |     `-Zm        |   `-Pg  `-Zn      `-Zda
                  `-size            `-rot
  
  
 
.SS SVE
 
 FCMLA   <Zda>.<T>, <Pg>/M, <Zn>.<T>, <Zm>.<T>, <const>
 
 if !HaveSVE() then UNDEFINED;
 if size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer m = UInt(Zm);
 integer da = UInt(Zda);
 integer sel_a = UInt(rot<0>);
 integer sel_b = UInt(NOT(rot<0>));
 boolean neg_i = (rot<1> == '1');
 boolean neg_r = (rot<0> != rot<1>);
 
 CheckSVEEnabled();
 integer pairs = VL DIV (2 * esize);
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(VL) operand3 = Z[da];
 bits(VL) result;
 
 for p = 0 to pairs-1
     addend_r = Elem[operand3, 2 * p + 0, esize];
     addend_i = Elem[operand3, 2 * p + 1, esize];
     elt1_a   = Elem[operand1, 2 * p + sel_a, esize];
     elt2_a   = Elem[operand2, 2 * p + sel_a, esize];
     elt2_b   = Elem[operand2, 2 * p + sel_b, esize];
     if ElemP[mask, 2 * p + 0, esize] == '1' then
         if neg_r then elt2_a = FPNeg(elt2_a);
         addend_r = FPMulAdd(addend_r, elt1_a, elt2_a, FPCR);
     if ElemP[mask, 2 * p + 1, esize] == '1' then
         if neg_i then elt2_b = FPNeg(elt2_b);
         addend_i = FPMulAdd(addend_i, elt1_a, elt2_b, FPCR);
     Elem[result, 2 * p + 0, esize] = addend_r;
     Elem[result, 2 * p + 1, esize] = addend_i;
 
 Z[da] = result;
 

.SS Assembler Symbols

 <Zda>
  Encoded in Zda
  Is the name of the third source and destination scalable vector register,
  encoded in the "Zda" field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T>      
  00   RESERVED 
  01   H        
  10   S        
  11   D        

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zn>
  Encoded in Zn
  Is the name of the first source scalable vector register, encoded in the "Zn"
  field.

 <Zm>
  Encoded in Zm
  Is the name of the second source scalable vector register, encoded in the "Zm"
  field.

 <const>
  Encoded in rot
  Is the const specifier,

  rot <const> 
  00  #0      
  01  #90     
  10  #180    
  11  #270    



.SS Operation

 CheckSVEEnabled();
 integer pairs = VL DIV (2 * esize);
 bits(PL) mask = P[g];
 bits(VL) operand1 = Z[n];
 bits(VL) operand2 = Z[m];
 bits(VL) operand3 = Z[da];
 bits(VL) result;
 
 for p = 0 to pairs-1
     addend_r = Elem[operand3, 2 * p + 0, esize];
     addend_i = Elem[operand3, 2 * p + 1, esize];
     elt1_a   = Elem[operand1, 2 * p + sel_a, esize];
     elt2_a   = Elem[operand2, 2 * p + sel_a, esize];
     elt2_b   = Elem[operand2, 2 * p + sel_b, esize];
     if ElemP[mask, 2 * p + 0, esize] == '1' then
         if neg_r then elt2_a = FPNeg(elt2_a);
         addend_r = FPMulAdd(addend_r, elt1_a, elt2_a, FPCR);
     if ElemP[mask, 2 * p + 1, esize] == '1' then
         if neg_i then elt2_b = FPNeg(elt2_b);
         addend_i = FPMulAdd(addend_i, elt1_a, elt2_b, FPCR);
     Elem[result, 2 * p + 0, esize] = addend_r;
     Elem[result, 2 * p + 1, esize] = addend_i;
 
 Z[da] = result;

