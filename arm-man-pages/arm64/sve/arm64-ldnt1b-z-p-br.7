.nh
.TH "LDNT1B (scalar plus scalar)" "7" " "  "instruction" "sve"
.SS LDNT1B (scalar plus scalar)
 Contiguous load non-temporal bytes to vector (scalar index)

 Contiguous load non-temporal of bytes to elements of a vector register from the
 memory address generated by a 64-bit scalar base and scalar index which is
 added to the base address. After each element access the index value is
 incremented, but the index register is not updated. Inactive elements will not
 read Device memory or signal a fault, and are set to zero in the destination
 vector.

 A non-temporal load is a hint to the system that this data is unlikely to be
 referenced again soon.

 Status : Green

 Predicated : True



.SS SVE - A64 - ldnt1b_z_p_br_contiguous
 
                                                                   
                   23                                              
                 24 |                                              
               25 | |  21        16    13    10         5         0
                | | |   |         |     |     |         |         |
   1 0 1 0 0 1 0|0|0|0 0|. . . . .|1 1 0|. . .|. . . . .|. . . . .|
                | |     |               |     |         |
                | |     `-Rm            `-Pg  `-Rn      `-Zt
                | `-msz<0>
                `-msz<1>
  
  
 
.SS SVE
 
 LDNT1B  { <Zt>.B }, <Pg>/Z, [<Xn|SP>, <Xm>]
 
 if !HaveSVE() then UNDEFINED;
 if Rm == '11111' then UNDEFINED;
 integer t = UInt(Zt);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 integer g = UInt(Pg);
 integer esize = 8;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(64) base;
 bits(64) addr;
 bits(64) offset;
 bits(PL) mask = P[g];
 bits(VL) result;
 constant integer mbytes = esize DIV 8;
 
 if HaveMTEExt() then SetTagCheckedInstruction(TRUE);
 
 if n == 31 then
     CheckSPAlignment();
     base = SP[];
 else
     base = X[n];
 offset = X[m];
 
 for e = 0 to elements-1
     addr = base + UInt(offset) * mbytes;
     if ElemP[mask, e, esize] == '1' then
         Elem[result, e, esize] = Mem[addr, mbytes, AccType_STREAM];
     else
         Elem[result, e, esize] = Zeros();
     offset = offset + 1;
 
 Z[t] = result;
 

.SS Assembler Symbols

 <Zt>
  Encoded in Zt
  Is the name of the scalable vector register to be transferred, encoded in the
  "Zt" field.

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Xn|SP>
  Encoded in Rn
  Is the 64-bit name of the general-purpose base register or stack pointer,
  encoded in the "Rn" field.

 <Xm>
  Encoded in Rm
  Is the 64-bit name of the general-purpose offset register, encoded in the "Rm"
  field.



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(64) base;
 bits(64) addr;
 bits(64) offset;
 bits(PL) mask = P[g];
 bits(VL) result;
 constant integer mbytes = esize DIV 8;
 
 if HaveMTEExt() then SetTagCheckedInstruction(TRUE);
 
 if n == 31 then
     CheckSPAlignment();
     base = SP[];
 else
     base = X[n];
 offset = X[m];
 
 for e = 0 to elements-1
     addr = base + UInt(offset) * mbytes;
     if ElemP[mask, e, esize] == '1' then
         Elem[result, e, esize] = Mem[addr, mbytes, AccType_STREAM];
     else
         Elem[result, e, esize] = Zeros();
     offset = offset + 1;
 
 Z[t] = result;

