.nh
.TH "LASTB (SIMD&FP scalar)" "7" " "  "instruction" "sve"
.SS LASTB (SIMD&FP scalar)
 Extract last element to SIMD&FP scalar register

 If there is an active element then extract the last active element from the
 final source vector register. If there are no active elements, extract the
 highest-numbered element. Then place the extracted element in the destination
 SIMD&FP register.

 Status : Green

 Predicated : True

 takes_pred_movprfx : False



.SS SVE - A64 - lastb_v_p_z_
 
                                                                   
                                                                   
                                 16                                
                 24  22        17 |    13    10         5         0
                  |   |         | |     |     |         |         |
   0 0 0 0 0 1 0 1|. .|1 0 0 0 1|1|1 0 0|. . .|. . . . .|. . . . .|
                  |             |       |     |         |
                  `-size        `-B     `-Pg  `-Zn      `-Vd
  
  
 
.SS SVE
 
 LASTB   <V><d>, <Pg>, <Zn>.<T>
 
 if !HaveSVE() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer g = UInt(Pg);
 integer n = UInt(Zn);
 integer d = UInt(Vd);
 boolean isBefore = TRUE;
 
 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand = Z[n];
 integer last = LastActiveElement(mask, esize);
 
 if isBefore then
     if last < 0 then last = elements - 1;
 else
     last = last + 1;
     if last >= elements then last = 0;
 V[d] = Elem[operand, last, esize];
 

.SS Assembler Symbols

 <V>
  Encoded in size
  Is a width specifier,

  size <V> 
  00   B   
  01   H   
  10   S   
  11   D   

 <d>
  Encoded in Vd
  Is the number [0-31] of the destination SIMD&FP register, encoded in the "Vd"
  field.

 <Pg>
  Encoded in Pg
  Is the name of the governing scalable predicate register P0-P7, encoded in the
  "Pg" field.

 <Zn>
  Encoded in Zn
  Is the name of the source scalable vector register, encoded in the "Zn" field.

 <T>
  Encoded in size
  Is the size specifier,

  size <T> 
  00   B   
  01   H   
  10   S   
  11   D   



.SS Operation

 CheckSVEEnabled();
 integer elements = VL DIV esize;
 bits(PL) mask = P[g];
 bits(VL) operand = Z[n];
 integer last = LastActiveElement(mask, esize);
 
 if isBefore then
     if last < 0 then last = elements - 1;
 else
     last = last + 1;
     if last >= elements then last = 0;
 V[d] = Elem[operand, last, esize];

