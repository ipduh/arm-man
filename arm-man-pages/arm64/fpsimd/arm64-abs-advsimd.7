.nh
.TH "ABS -- A64" "7" " "  "instruction" "advsimd"
.SS ABS
 Absolute value (vector)

 Absolute value (vector). This instruction calculates the absolute value of each
 vector element in the source SIMD&FP register, puts the result into a vector,
 and writes the vector to the destination SIMD&FP register.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.


It has encodings from 2 classes: Scalar and Vector

.SS Scalar - A64 - ABS_asisdmisc_R
 
                                                                   
                                                                   
       29                                                          
     30 |        24  22        17        12  10         5         0
      | |         |   |         |         |   |         |         |
   0 1|0|1 1 1 1 0|. .|1 0 0 0 0|0 1 0 1 1|1 0|. . . . .|. . . . .|
      |           |             |             |         |
      `-U         `-size        `-opcode      `-Rn      `-Rd
  
  
 
.SS Scalar
 
 ABS  <V><d>, <V><n>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 if size != '11' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer datasize = esize;
 integer elements = 1;
 boolean neg = (U == '1');
.SS Vector - A64 - ABS_asimdmisc_R
 
                                                                   
       29                                                          
     30 |                                                          
   31 | |        24  22        17        12  10         5         0
    | | |         |   |         |         |   |         |         |
   0|.|0|0 1 1 1 0|. .|1 0 0 0 0|0 1 0 1 1|1 0|. . . . .|. . . . .|
    | |           |             |             |         |
    | `-U         `-size        `-opcode      `-Rn      `-Rd
    `-Q
  
  
 
.SS Vector
 
 ABS  <Vd>.<T>, <Vn>.<T>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 if size:Q == '110' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer datasize = if Q == '1' then 128 else 64;
 integer elements = datasize DIV esize;
 boolean neg = (U == '1');
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = V[n];
 bits(datasize) result;
 integer element;
 
 for e = 0 to elements-1
     element = SInt(Elem[operand, e, esize]);
     if neg then
         element = -element;
     else
         element = Abs(element);
     Elem[result, e, esize] = element<esize-1:0>;                
 
 V[d] = result;
 

.SS Assembler Symbols

 <V>
  Encoded in size
  Is a width specifier,

  size <V>      
  0x   RESERVED 
  10   RESERVED 
  11   D        

 <d>
  Encoded in Rd
  Is the number of the SIMD&FP destination register, encoded in the "Rd" field.

 <n>
  Encoded in Rn
  Is the number of the SIMD&FP source register, encoded in the "Rn" field.

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <T>
  Encoded in size:Q
  Is an arrangement specifier,

  size Q <T>      
  00   0 8B       
  00   1 16B      
  01   0 4H       
  01   1 8H       
  10   0 2S       
  10   1 4S       
  11   0 RESERVED 
  11   1 2D       

 <Vn>
  Encoded in Rn
  Is the name of the SIMD&FP source register, encoded in the "Rn" field.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = V[n];
 bits(datasize) result;
 integer element;
 
 for e = 0 to elements-1
     element = SInt(Elem[operand, e, esize]);
     if neg then
         element = -element;
     else
         element = Abs(element);
     Elem[result, e, esize] = element<esize-1:0>;                
 
 V[d] = result;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
