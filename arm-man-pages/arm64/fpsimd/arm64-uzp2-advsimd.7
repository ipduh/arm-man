.nh
.TH "UZP2 -- A64" "7" " "  "instruction" "advsimd"
.SS UZP2
 Unzip vectors (secondary)

 Unzip vectors (secondary). This instruction reads corresponding odd-numbered
 vector elements from the two source SIMD&FP registers, places the result from
 the first source register into consecutive elements in the lower half of a
 vector, and the result from the second source register into consecutive
 elements in the upper half of a vector, and writes the vector to the
 destination SIMD&FP register.



 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS Advanced SIMD - A64 - UZP2_asimdperm_only
 
                                                                   
                                     14                            
     30                21          15 |                            
   31 |          24  22 |        16 | |  12  10         5         0
    | |           |   | |         | | |   |   |         |         |
   0|.|0 0 1 1 1 0|. .|0|. . . . .|0|1|0 1|1 0|. . . . .|. . . . .|
    |             |     |           |         |         |
    `-Q           |     `-Rm        `-op      `-Rn      `-Rd
                  `-size
  
  
 
.SS Advanced SIMD
 
 UZP2  <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 
 if size:Q == '110' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer datasize = if Q == '1' then 128 else 64;
 integer elements = datasize DIV esize;
 integer part = UInt(op);
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) operandl = V[n];
 bits(datasize) operandh = V[m];
 bits(datasize) result;
 
 bits(datasize*2) zipped = operandh:operandl;
 for e = 0 to elements-1
     Elem[result, e, esize] = Elem[zipped, 2*e+part, esize];
 
 V[d] = result;
 

.SS Assembler Symbols

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <T>
  Encoded in size:Q
  Is an arrangement specifier,

  size Q <T>      
  00   0 8B       
  00   1 16B      
  01   0 4H       
  01   1 8H       
  10   0 2S       
  10   1 4S       
  11   0 RESERVED 
  11   1 2D       

 <Vn>
  Encoded in Rn
  Is the name of the first SIMD&FP source register, encoded in the "Rn" field.

 <Vm>
  Encoded in Rm
  Is the name of the second SIMD&FP source register, encoded in the "Rm" field.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) operandl = V[n];
 bits(datasize) operandh = V[m];
 bits(datasize) result;
 
 bits(datasize*2) zipped = operandh:operandl;
 for e = 0 to elements-1
     Elem[result, e, esize] = Elem[zipped, 2*e+part, esize];
 
 V[d] = result;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
