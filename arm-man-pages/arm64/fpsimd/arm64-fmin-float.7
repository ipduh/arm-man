.nh
.TH "FMIN (scalar) -- A64" "7" " "  "instruction" "float"
.SS FMIN (scalar)
 Floating-point Minimum (scalar)

 Floating-point Minimum (scalar). This instruction compares the first and second
 source SIMD&FP register values, and writes the smaller of the two floating-
 point values to the destination SIMD&FP register.

 This instruction can generate a floating-point exception. Depending on the
 settings in FPCR, the exception results in either a flag being set in FPSR, or
 a synchronous exception being generated. For more information, see Floating-
 point exception traps.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS Floating-point - A64 - float
 
                                                                   
       29                                                          
     30 |              21                                          
   31 | |        24  22 |        16  14  12  10         5         0
    | | |         |   | |         |   |   |   |         |         |
  |0|0|0|1 1 1 1 0|. .|1|. . . . .|0 1|0 1|1 0|. . . . .|. . . . .|
  |   |           |     |             |       |         |
  `-M `-S         |     `-Rm          `-op    `-Rn      `-Rd
                  `-ftype
  
  
 
.SS Half-precision(ftype == 11)
 
 FMIN  <Hd>, <Hn>, <Hm>
.SS Single-precision(ftype == 00)
 
 FMIN  <Sd>, <Sn>, <Sm>
.SS Double-precision(ftype == 01)
 
 FMIN  <Dd>, <Dn>, <Dm>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 
 integer datasize;
 case ftype of
     when '00' datasize = 32;
     when '01' datasize = 64;
     when '10' UNDEFINED;
     when '11'
         if HaveFP16Ext() then
             datasize = 16;
         else
             UNDEFINED;
 
 FPMaxMinOp operation;
 case op of
     when '00' operation = FPMaxMinOp_MAX;
     when '01' operation = FPMaxMinOp_MIN;
     when '10' operation = FPMaxMinOp_MAXNUM;
     when '11' operation = FPMaxMinOp_MINNUM;
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) result;
 bits(datasize) operand1 = V[n];
 bits(datasize) operand2 = V[m];
 
 case operation of
     when FPMaxMinOp_MAX    result = FPMax(operand1, operand2, FPCR);
     when FPMaxMinOp_MIN    result = FPMin(operand1, operand2, FPCR);
     when FPMaxMinOp_MAXNUM result = FPMaxNum(operand1, operand2, FPCR);
     when FPMaxMinOp_MINNUM result = FPMinNum(operand1, operand2, FPCR);
 
 V[d] = result;
 

.SS Assembler Symbols

 <Dd>
  Encoded in Rd
  Is the 64-bit name of the SIMD&FP destination register, encoded in the "Rd"
  field.

 <Dn>
  Encoded in Rn
  Is the 64-bit name of the first SIMD&FP source register, encoded in the "Rn"
  field.

 <Dm>
  Encoded in Rm
  Is the 64-bit name of the second SIMD&FP source register, encoded in the "Rm"
  field.

 <Hd>
  Encoded in Rd
  Is the 16-bit name of the SIMD&FP destination register, encoded in the "Rd"
  field.

 <Hn>
  Encoded in Rn
  Is the 16-bit name of the first SIMD&FP source register, encoded in the "Rn"
  field.

 <Hm>
  Encoded in Rm
  Is the 16-bit name of the second SIMD&FP source register, encoded in the "Rm"
  field.

 <Sd>
  Encoded in Rd
  Is the 32-bit name of the SIMD&FP destination register, encoded in the "Rd"
  field.

 <Sn>
  Encoded in Rn
  Is the 32-bit name of the first SIMD&FP source register, encoded in the "Rn"
  field.

 <Sm>
  Encoded in Rm
  Is the 32-bit name of the second SIMD&FP source register, encoded in the "Rm"
  field.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) result;
 bits(datasize) operand1 = V[n];
 bits(datasize) operand2 = V[m];
 
 case operation of
     when FPMaxMinOp_MAX    result = FPMax(operand1, operand2, FPCR);
     when FPMaxMinOp_MIN    result = FPMin(operand1, operand2, FPCR);
     when FPMaxMinOp_MAXNUM result = FPMaxNum(operand1, operand2, FPCR);
     when FPMaxMinOp_MINNUM result = FPMinNum(operand1, operand2, FPCR);
 
 V[d] = result;

