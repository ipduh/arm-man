.nh
.TH "LDR (register, SIMD&FP) -- A64" "7" " "  "instruction" "fpsimd"
.SS LDR (register, SIMD&FP)
 Load SIMD&FP Register (register offset)

 Load SIMD&FP Register (register offset). This instruction loads a SIMD&FP
 register from memory. The address that is used for the load is calculated from
 a base register value and an offset register value. The offset can be
 optionally shifted and extended.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS SIMD&FP registers - A64 - fpsimd
 
                                                                   
                                                                   
             26        21                12                        
     30    27 |  24  22 |        16    13 |  10         5         0
      |     | |   |   | |         |     | |   |         |         |
  |. .|1 1 1|1|0 0|x 1|1|. . . . .|. . .|.|1 0|. . . . .|. . . . .|
  |         |     |     |         |     |     |         |
  `-size    `-V   `-opc `-Rm      |     `-S   `-Rn      `-Rt
                                  `-option
  
  
 
.SS 8-fsreg,LDR-8-fsreg(size == 00 && opc == 01 && option != 011)
 
 LDR  <Bt>, [<Xn|SP>, (<Wm>|<Xm>), <extend> {<amount>}]
.SS 8-fsreg,LDR-8-fsreg(size == 00 && opc == 01 && option == 011)
 
 LDR  <Bt>, [<Xn|SP>, <Xm>{, LSL <amount>}]
.SS 16-fsreg,LDR-16-fsreg(size == 01 && opc == 01)
 
 LDR  <Ht>, [<Xn|SP>, (<Wm>|<Xm>){, <extend> {<amount>}}]
.SS 32-fsreg,LDR-32-fsreg(size == 10 && opc == 01)
 
 LDR  <St>, [<Xn|SP>, (<Wm>|<Xm>){, <extend> {<amount>}}]
.SS 64-fsreg,LDR-64-fsreg(size == 11 && opc == 01)
 
 LDR  <Dt>, [<Xn|SP>, (<Wm>|<Xm>){, <extend> {<amount>}}]
.SS 128-fsreg,LDR-128-fsreg(size == 00 && opc == 11)
 
 LDR  <Qt>, [<Xn|SP>, (<Wm>|<Xm>){, <extend> {<amount>}}]
 
 boolean wback = FALSE;
 boolean postindex = FALSE;
 integer scale = UInt(opc<1>:size);
 if scale > 4 then UNDEFINED;
 if option<1> == '0' then UNDEFINED;             // sub-word index
 ExtendType extend_type = DecodeRegExtend(option);
 integer shift = if S == '1' then scale else 0;
 
 integer n = UInt(Rn);
 integer t = UInt(Rt);
 integer m = UInt(Rm);
 AccType acctype = AccType_VEC;
 MemOp memop = if opc<0> == '1' then MemOp_LOAD else MemOp_STORE;
 integer datasize = 8 << scale;
 boolean tag_checked = memop != MemOp_PREFETCH;
 
 bits(64) offset = ExtendReg(m, extend_type, shift);
 if HaveMTEExt() then
     SetTagCheckedInstruction(tag_checked);
 
 CheckFPAdvSIMDEnabled64();
 bits(64) address;
 bits(datasize) data;
 
 if n == 31 then
     CheckSPAlignment();
     address = SP[];
 else
     address = X[n];
 
 if ! postindex then
     address = address + offset;
 
 case memop of
     when MemOp_STORE
         data = V[t];
         Mem[address, datasize DIV 8, acctype] = data;
 
     when MemOp_LOAD
         data = Mem[address, datasize DIV 8, acctype];
         V[t] = data;
 
 if wback then
     if postindex then
         address = address + offset;
     if n == 31 then
         SP[] = address;
     else
         X[n] = address;
 

.SS Assembler Symbols

 <Bt>
  Encoded in Rt
  Is the 8-bit name of the SIMD&FP register to be transferred, encoded in the
  "Rt" field.

 <Dt>
  Encoded in Rt
  Is the 64-bit name of the SIMD&FP register to be transferred, encoded in the
  "Rt" field.

 <Ht>
  Encoded in Rt
  Is the 16-bit name of the SIMD&FP register to be transferred, encoded in the
  "Rt" field.

 <Qt>
  Encoded in Rt
  Is the 128-bit name of the SIMD&FP register to be transferred, encoded in the
  "Rt" field.

 <St>
  Encoded in Rt
  Is the 32-bit name of the SIMD&FP register to be transferred, encoded in the
  "Rt" field.

 <Xn|SP>
  Encoded in Rn
  Is the 64-bit name of the general-purpose base register or stack pointer,
  encoded in the "Rn" field.

 <Wm>
  Encoded in Rm
  When option<0> is set to 0, is the 32-bit name of the general-purpose index
  register, encoded in the "Rm" field.

 <Xm>
  Encoded in Rm
  When option<0> is set to 1, is the 64-bit name of the general-purpose index
  register, encoded in the "Rm" field.

 <extend>
  Encoded in option
  For the 8-bit variant: is the index extend specifier,

  option <extend> 
  010    UXTW     
  110    SXTW     
  111    SXTX     

 <extend>
  Encoded in option
  For the 128-bit, 16-bit, 32-bit and 64-bit variant: is the index extend/shift
  specifier, defaulting to LSL, and which must be omitted for the LSL option
  when <amount> is omitted.

  option <extend> 
  010    UXTW     
  011    LSL      
  110    SXTW     
  111    SXTX     

 <amount>
  Encoded in S
  For the 8-bit variant: is the index shift amount, it must be #0, encoded in
  "S" as 0 if omitted, or as 1 if present.

 <amount>
  Encoded in S
  For the 16-bit variant: is the index shift amount, optional only when <extend>
  is not LSL. Where it is permitted to be optional, it defaults to #0. It is

  S <amount> 
  0 #0       
  1 #1       

 <amount>
  Encoded in S
  For the 32-bit variant: is the index shift amount, optional only when <extend>
  is not LSL. Where it is permitted to be optional, it defaults to #0. It is

  S <amount> 
  0 #0       
  1 #2       

 <amount>
  Encoded in S
  For the 64-bit variant: is the index shift amount, optional only when <extend>
  is not LSL. Where it is permitted to be optional, it defaults to #0. It is

  S <amount> 
  0 #0       
  1 #3       

 <amount>
  Encoded in S
  For the 128-bit variant: is the index shift amount, optional only when
  <extend> is not LSL. Where it is permitted to be optional, it defaults to #0.
  It is

  S <amount> 
  0 #0       
  1 #4       



.SS Operation

 bits(64) offset = ExtendReg(m, extend_type, shift);
 if HaveMTEExt() then
     SetTagCheckedInstruction(tag_checked);
 
 CheckFPAdvSIMDEnabled64();
 bits(64) address;
 bits(datasize) data;
 
 if n == 31 then
     CheckSPAlignment();
     address = SP[];
 else
     address = X[n];
 
 if ! postindex then
     address = address + offset;
 
 case memop of
     when MemOp_STORE
         data = V[t];
         Mem[address, datasize DIV 8, acctype] = data;
 
     when MemOp_LOAD
         data = Mem[address, datasize DIV 8, acctype];
         V[t] = data;
 
 if wback then
     if postindex then
         address = address + offset;
     if n == 31 then
         SP[] = address;
     else
         X[n] = address;


.SS Operational Notes

 
 If PSTATE.DIT is 1, the timing of this instruction is insensitive to the value of the data being loaded or stored.
