.nh
.TH "FRINT64X (vector) -- A64" "7" " "  "instruction" "advsimd"
.SS FRINT64X (vector)
 Floating-point Round to 64-bit Integer, using current rounding mode (vector)

 Floating-point Round to 64-bit Integer, using current rounding mode (vector).
 This instruction rounds a vector of floating-point values in the SIMD&FP source
 register to integral floating-point values that fit into a 64-bit integer size
 using the rounding mode that is determined by the FPCR, and writes the result
 to the SIMD&FP destination register.

 A zero input returns a zero result with the same sign. When one of the result
 values is not numerically equal to the corresponding input value, an Inexact
 exception is raised. When an input is infinite, NaN or out-of-range, the
 instruction returns for the corresponding result value the most negative
 integer representable in the destination size, and an Invalid Operation
 floating-point exception is raised.

 A floating-point exception can be generated by this instruction. Depending on
 the settings in FPCR, the exception results in either a flag being set in FPSR,
 or a synchronous exception being generated. For more information, see Floating-
 point exception traps.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS Vector single-precision and double-precision - A64 - FRINT64X_asimdmisc_R
 
                                                                   
       29            22                                            
     30 |          23 |                  12                        
   31 | |        24 | |        17      13 |  10         5         0
    | | |         | | |         |       | |   |         |         |
   0|.|1|0 1 1 1 0|0|.|1 0 0 0 0|1 1 1 1|1|1 0|. . . . .|. . . . .|
    | |             |                   |     |         |
    | `-U           `-sz                `-op  `-Rn      `-Rd
    `-Q
  
  
 
.SS Vector single-precision and double-precision
 
 FRINT64X  <Vd>.<T>, <Vn>.<T>
 
 if !HaveFrintExt() then UNDEFINED;
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 if sz:Q == '10' then UNDEFINED;
 integer esize = 32 << UInt(sz);
 integer datasize = if Q == '1' then 128 else 64;
 integer elements = datasize DIV esize;
 integer intsize = if op == '0' then 32 else 64; 
 FPRounding rounding = if U == '0' then FPRounding_ZERO else FPRoundingMode(FPCR);
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = V[n];
 bits(datasize) result;
 bits(esize) element;
 
 for e = 0 to elements-1
     element = Elem[operand, e, esize];
     Elem[result, e, esize] = FPRoundIntN(element, FPCR, rounding, intsize);
 
 V[d] = result;
 

.SS Assembler Symbols

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <T>
  Encoded in sz:Q
  Is an arrangement specifier,

  sz Q <T>      
  0  0 2S       
  0  1 4S       
  1  0 RESERVED 
  1  1 2D       

 <Vn>
  Encoded in Rn
  Is the name of the SIMD&FP source register, encoded in the "Rn" field.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = V[n];
 bits(datasize) result;
 bits(esize) element;
 
 for e = 0 to elements-1
     element = Elem[operand, e, esize];
     Elem[result, e, esize] = FPRoundIntN(element, FPCR, rounding, intsize);
 
 V[d] = result;

