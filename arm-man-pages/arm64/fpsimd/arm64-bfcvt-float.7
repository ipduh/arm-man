.nh
.TH "BFCVT -- A64" "7" " "  "instruction" "float"
.SS BFCVT
 Floating-point convert from single-precision to BFloat16 format (scalar)

 Floating-point convert from single-precision to BFloat16 format (scalar)
 converts the single-precision floating-point value in the 32-bit SIMD&FP source
 register to BFloat16 format and writes the result in the 16-bit SIMD&FP
 destination register.

 Unlike the BFloat16 multiplication instructions, this instruction honors all
 the control bits in the FPCR that apply to single-precision arithmetic,
 including the rounding mode. This instruction can generate a floating-point
 exception that causes a cumulative exception bit in the FPSR to be set, or a
 synchronous exception to be taken, depending on the enable bits in the FPCR.
 ID_AA64ISAR1_EL1.BF16 indicates whether this instruction is supported.



.SS Single-precision to BFloat16 - A64 - BFCVT_BS_floatdp1
 
                                                                   
       29                                                          
     30 |              21                                          
   31 | |        24  22 |          15        10         5         0
    | | |         |   | |           |         |         |         |
  |0|0|0|1 1 1 1 0|0 1|1|0 0 0 1 1 0|1 0 0 0 0|. . . . .|. . . . .|
  |   |           |     |                     |         |
  `-M `-S         |     `-opcode              `-Rn      `-Rd
                  `-ptype
  
  
 
.SS Single-precision to BFloat16
 
 BFCVT  <Hd>, <Sn>
 
 if !HaveBF16Ext() then UNDEFINED;
 integer n = UInt(Rn);
 integer d = UInt(Rd);
 
 CheckFPAdvSIMDEnabled64();
 bits(32) operand = V[n];
 bits(16) result;
 
 result = FPConvertBF(operand, FPCR);
 V[d] = result;
 

.SS Assembler Symbols

 <Hd>
  Encoded in Rd
  Is the 16-bit name of the SIMD&FP destination register, encoded in the "Rd"
  field.

 <Sn>
  Encoded in Rn
  Is the 32-bit name of the SIMD&FP source register, encoded in the "Rn" field.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(32) operand = V[n];
 bits(16) result;
 
 result = FPConvertBF(operand, FPCR);
 V[d] = result;

