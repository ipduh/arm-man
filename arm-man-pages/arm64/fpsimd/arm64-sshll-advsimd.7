.nh
.TH "SSHLL, SSHLL2 -- A64" "7" " "  "instruction" "advsimd"
.SS SSHLL, SSHLL2
 Signed Shift Left Long (immediate)

 Signed Shift Left Long (immediate). This instruction reads each vector element
 from the source SIMD&FP register, left shifts each vector element by the
 specified shift amount, places the result into a vector, and writes the vector
 to the destination SIMD&FP register. The destination vector elements are twice
 as long as the source vector elements. All the values in this instruction are
 signed integer values.

 The SSHLL instruction extracts vector elements from the lower half of the
 source register, while the SSHLL2 instruction extracts vector elements from the
 upper half of the source register.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS Vector - A64 - SSHLL_asimdshf_L
 
                                                                   
       29                                                          
     30 |                                    10                    
   31 | |          23      19    16        11 |         5         0
    | | |           |       |     |         | |         |         |
   0|.|0|0 1 1 1 1 0|. . . .|. . .|1 0 1 0 0|1|. . . . .|. . . . .|
    | |             |       |     |           |         |
    | `-U           |       |     `-opcode    `-Rn      `-Rd
    `-Q             |       `-immb
                    `-immh(!= 0000)
  
  
 
.SS Vector
 
 SSHLL{2}  <Vd>.<Ta>, <Vn>.<Tb>, #<shift>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 if immh == '0000' then SEE(asimdimm);
 if immh<3> == '1' then UNDEFINED;
 integer esize = 8 << HighestSetBit(immh);
 integer datasize = 64;
 integer part = UInt(Q);
 integer elements = datasize DIV esize;
 
 integer shift = UInt(immh:immb) - esize;
 boolean unsigned = (U == '1');
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = Vpart[n, part];
 bits(datasize*2) result;
 integer element;
 
 for e = 0 to elements-1
     element = Int(Elem[operand, e, esize], unsigned) << shift;
     Elem[result, e, 2*esize] = element<2*esize-1:0>;
 
 V[d] = result;
 

.SS Assembler Symbols

 2
  Encoded in Q
  Is the second and upper half specifier. If present it causes the operation to
  be performed on the upper 64 bits of the registers holding the narrower
  elements, and is

  Q 2         
  0 [absent]  
  1 [present] 

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <Ta>
  Encoded in immh
  Is an arrangement specifier,

  immh <Ta>                                 
  0000 SEE Advanced SIMD modified immediate 
  0001 8H                                   
  001x 4S                                   
  01xx 2D                                   
  1xxx RESERVED                             

 <Vn>
  Encoded in Rn
  Is the name of the SIMD&FP source register, encoded in the "Rn" field.

 <Tb>
  Encoded in immh:Q
  Is an arrangement specifier,

  immh Q <Tb>                                 
  0000 x SEE Advanced SIMD modified immediate 
  0001 0 8B                                   
  0001 1 16B                                  
  001x 0 4H                                   
  001x 1 8H                                   
  01xx 0 2S                                   
  01xx 1 4S                                   
  1xxx x RESERVED                             

 <shift>
  Encoded in immh:immb
  Is the left shift amount, in the range 0 to the source element width in bits
  minus 1,

  immh <shift>                              
  0000 SEE Advanced SIMD modified immediate 
  0001 (UInt(immh:immb)-8)                  
  001x (UInt(immh:immb)-16)                 
  01xx (UInt(immh:immb)-32)                 
  1xxx RESERVED                             



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = Vpart[n, part];
 bits(datasize*2) result;
 integer element;
 
 for e = 0 to elements-1
     element = Int(Elem[operand, e, esize], unsigned) << shift;
     Elem[result, e, 2*esize] = element<2*esize-1:0>;
 
 V[d] = result;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
