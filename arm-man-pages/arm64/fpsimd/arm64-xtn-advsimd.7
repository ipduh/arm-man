.nh
.TH "XTN, XTN2 -- A64" "7" " "  "instruction" "advsimd"
.SS XTN, XTN2
 Extract Narrow

 Extract Narrow. This instruction reads each vector element from the source
 SIMD&FP register, narrows each value to half the original width, places the
 result into a vector, and writes the vector to the lower or upper half of the
 destination SIMD&FP register. The destination vector elements are half as long
 as the source vector elements.

 The XTN instruction writes the vector to the lower half of the destination
 register and clears the upper half, while the XTN2 instruction writes the
 vector to the upper half of the destination register without affecting the
 other bits of the register.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS Vector - A64 - XTN_asimdmisc_N
 
                                                                   
       29                                                          
     30 |                                                          
   31 | |        24  22        17        12  10         5         0
    | | |         |   |         |         |   |         |         |
   0|.|0|0 1 1 1 0|. .|1 0 0 0 0|1 0 0 1 0|1 0|. . . . .|. . . . .|
    | |           |             |             |         |
    | `-U         `-size        `-opcode      `-Rn      `-Rd
    `-Q
  
  
 
.SS Vector
 
 XTN{2}  <Vd>.<Tb>, <Vn>.<Ta>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 if size == '11' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer datasize = 64;
 integer part = UInt(Q);
 integer elements = datasize DIV esize;
 
 CheckFPAdvSIMDEnabled64();
 bits(2*datasize) operand = V[n];
 bits(datasize) result;
 bits(2*esize) element;
 
 for e = 0 to elements-1
     element = Elem[operand, e, 2*esize];
     Elem[result, e, esize] = element<esize-1:0>;
 Vpart[d, part] = result;
 

.SS Assembler Symbols

 2
  Encoded in Q
  Is the second and upper half specifier. If present it causes the operation to
  be performed on the upper 64 bits of the registers holding the narrower
  elements, and is

  Q 2         
  0 [absent]  
  1 [present] 

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <Tb>
  Encoded in size:Q
  Is an arrangement specifier,

  size Q <Tb>     
  00   0 8B       
  00   1 16B      
  01   0 4H       
  01   1 8H       
  10   0 2S       
  10   1 4S       
  11   x RESERVED 

 <Vn>
  Encoded in Rn
  Is the name of the SIMD&FP source register, encoded in the "Rn" field.

 <Ta>
  Encoded in size
  Is an arrangement specifier,

  size <Ta>     
  00   8H       
  01   4S       
  10   2D       
  11   RESERVED 



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(2*datasize) operand = V[n];
 bits(datasize) result;
 bits(2*esize) element;
 
 for e = 0 to elements-1
     element = Elem[operand, e, 2*esize];
     Elem[result, e, esize] = element<esize-1:0>;
 Vpart[d, part] = result;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
