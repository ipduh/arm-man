.nh
.TH "FCSEL -- A64" "7" " "  "instruction" "float"
.SS FCSEL
 Floating-point Conditional Select (scalar)

 Floating-point Conditional Select (scalar). This instruction allows the SIMD&FP
 destination register to take the value from either one or the other of two
 SIMD&FP source registers. If the condition passes, the first SIMD&FP source
 register value is taken, otherwise the second SIMD&FP source register value is
 taken.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS Floating-point - A64 - float
 
                                                                   
       29                                                          
     30 |              21                                          
   31 | |        24  22 |        16      12  10         5         0
    | | |         |   | |         |       |   |         |         |
  |0|0|0|1 1 1 1 0|. .|1|. . . . .|. . . .|1 1|. . . . .|. . . . .|
  |   |           |     |         |           |         |
  `-M `-S         |     `-Rm      `-cond      `-Rn      `-Rd
                  `-ftype
  
  
 
.SS Half-precision(ftype == 11)
 
 FCSEL  <Hd>, <Hn>, <Hm>, <cond>
.SS Single-precision(ftype == 00)
 
 FCSEL  <Sd>, <Sn>, <Sm>, <cond>
.SS Double-precision(ftype == 01)
 
 FCSEL  <Dd>, <Dn>, <Dm>, <cond>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 
 integer datasize;
 case ftype of
     when '00' datasize = 32;
     when '01' datasize = 64;
     when '10' UNDEFINED;
     when '11'
         if HaveFP16Ext() then
             datasize = 16;
         else
             UNDEFINED;
 
 bits(4) condition = cond;
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) result;
 
 result = if ConditionHolds(condition) then V[n] else V[m];
 
 V[d] = result;
 

.SS Assembler Symbols

 <Dd>
  Encoded in Rd
  Is the 64-bit name of the SIMD&FP destination register, encoded in the "Rd"
  field.

 <Dn>
  Encoded in Rn
  Is the 64-bit name of the first SIMD&FP source register, encoded in the "Rn"
  field.

 <Dm>
  Encoded in Rm
  Is the 64-bit name of the second SIMD&FP source register, encoded in the "Rm"
  field.

 <Hd>
  Encoded in Rd
  Is the 16-bit name of the SIMD&FP destination register, encoded in the "Rd"
  field.

 <Hn>
  Encoded in Rn
  Is the 16-bit name of the first SIMD&FP source register, encoded in the "Rn"
  field.

 <Hm>
  Encoded in Rm
  Is the 16-bit name of the second SIMD&FP source register, encoded in the "Rm"
  field.

 <Sd>
  Encoded in Rd
  Is the 32-bit name of the SIMD&FP destination register, encoded in the "Rd"
  field.

 <Sn>
  Encoded in Rn
  Is the 32-bit name of the first SIMD&FP source register, encoded in the "Rn"
  field.

 <Sm>
  Encoded in Rm
  Is the 32-bit name of the second SIMD&FP source register, encoded in the "Rm"
  field.

 <cond>
  Encoded in cond
  Is one of the standard conditions, encoded in the "cond" field in the standard
  way.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) result;
 
 result = if ConditionHolds(condition) then V[n] else V[m];
 
 V[d] = result;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
