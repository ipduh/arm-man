.nh
.TH "FMINNM (vector) -- A64" "7" " "  "instruction" "advsimd"
.SS FMINNM (vector)
 Floating-point Minimum Number (vector)

 Floating-point Minimum Number (vector). This instruction compares corresponding
 vector elements in the two source SIMD&FP registers, writes the smaller of the
 two floating-point values into a vector, and writes the vector to the
 destination SIMD&FP register.

 NaNs are handled according to the IEEE 754-2008 standard. If one vector element
 is numeric and the other is a quiet NaN, the result placed in the vector is the
 numerical value, otherwise the result is identical to FMIN (scalar).

 This instruction can generate a floating-point exception. Depending on the
 settings in FPCR, the exception results in either a flag being set in FPSR or a
 synchronous exception being generated. For more information, see Floating-point
 exception traps.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.


It has encodings from 2 classes: Half-precision and Single-precision and double-precision

.SS Half-precision - A64 - FMINNM_asimdsamefp16_only
 
                                                                   
       29                                                          
     30 |          23                        10                    
   31 | |        24 |  21        16  14    11 |         5         0
    | | |         | |   |         |   |     | |         |         |
   0|.|0|0 1 1 1 0|1|1 0|. . . . .|0 0|0 0 0|1|. . . . .|. . . . .|
    | |           |     |             |       |         |
    | `-U         `-a   `-Rm          `-Op3   `-Rn      `-Rd
    `-Q
  
  
 
.SS Half-precision
 
 FMINNM  <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
 
 if !HaveFP16Ext() then UNDEFINED;
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 integer esize = 16;
 integer datasize = if Q == '1' then 128 else 64;
 integer elements = datasize DIV esize;
 
 boolean pair = (U == '1');
 boolean minimum = (a == '1');
.SS Single-precision and double-precision - A64 - FMINNM_asimdsame_only
 
                       21                                          
       29            22 |                                          
     30 |          23 | |                    10                    
   31 | |        24 | | |        16        11 |         5         0
    | | |         | | | |         |         | |         |         |
   0|.|0|0 1 1 1 0|1|.|1|. . . . .|1 1 0 0 0|1|. . . . .|. . . . .|
    | |           | |   |         |           |         |
    | `-U         | |   `-Rm      `-opcode    `-Rn      `-Rd
    `-Q           | `-sz
                  `-o1
  
  
 
.SS Single-precision and double-precision
 
 FMINNM  <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 if sz:Q == '10' then UNDEFINED;
 integer esize = 32 << UInt(sz);
 integer datasize = if Q == '1' then 128 else 64;
 integer elements = datasize DIV esize;
 
 boolean pair = (U == '1');
 boolean minimum = (o1 == '1');
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand1 = V[n];
 bits(datasize) operand2 = V[m];
 bits(datasize) result;
 bits(2*datasize) concat = operand2:operand1;
 bits(esize) element1;
 bits(esize) element2;
 
 for e = 0 to elements-1
     if pair then
         element1 = Elem[concat, 2*e, esize];
         element2 = Elem[concat, (2*e)+1, esize];
     else
         element1 = Elem[operand1, e, esize];
         element2 = Elem[operand2, e, esize];
 
     if minimum then
         Elem[result, e, esize] = FPMinNum(element1, element2, FPCR);
     else
         Elem[result, e, esize] = FPMaxNum(element1, element2, FPCR);
 
 V[d] = result;
 

.SS Assembler Symbols

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <T>
  Encoded in Q
  For the half-precision variant: is an arrangement specifier,

  Q <T> 
  0 4H  
  1 8H  

 <T>
  Encoded in sz:Q
  For the single-precision and double-precision variant: is an arrangement
  specifier,

  sz Q <T>      
  0  0 2S       
  0  1 4S       
  1  0 RESERVED 
  1  1 2D       

 <Vn>
  Encoded in Rn
  Is the name of the first SIMD&FP source register, encoded in the "Rn" field.

 <Vm>
  Encoded in Rm
  Is the name of the second SIMD&FP source register, encoded in the "Rm" field.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand1 = V[n];
 bits(datasize) operand2 = V[m];
 bits(datasize) result;
 bits(2*datasize) concat = operand2:operand1;
 bits(esize) element1;
 bits(esize) element2;
 
 for e = 0 to elements-1
     if pair then
         element1 = Elem[concat, 2*e, esize];
         element2 = Elem[concat, (2*e)+1, esize];
     else
         element1 = Elem[operand1, e, esize];
         element2 = Elem[operand2, e, esize];
 
     if minimum then
         Elem[result, e, esize] = FPMinNum(element1, element2, FPCR);
     else
         Elem[result, e, esize] = FPMaxNum(element1, element2, FPCR);
 
 V[d] = result;

