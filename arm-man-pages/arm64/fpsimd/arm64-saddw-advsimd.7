.nh
.TH "SADDW, SADDW2 -- A64" "7" " "  "instruction" "advsimd"
.SS SADDW, SADDW2
 Signed Add Wide

 Signed Add Wide. This instruction adds vector elements of the first source
 SIMD&FP register to the corresponding vector elements in the lower or upper
 half of the second source SIMD&FP register, places the results in a vector, and
 writes the vector to the SIMD&FP destination register.

 The SADDW instruction extracts the second source vector from the lower half of
 the second source register, while the SADDW2 instruction extracts the second
 source vector from the upper half of the second source register.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS Three registers, not all the same type - A64 - SADDW_asimddiff_W
 
                                                                   
       29                                12                        
     30 |              21              13 |                        
   31 | |        24  22 |        16  14 | |  10         5         0
    | | |         |   | |         |   | | |   |         |         |
   0|.|0|0 1 1 1 0|. .|1|. . . . .|0 0|0|1|0 0|. . . . .|. . . . .|
    | |           |     |             |       |         |
    | `-U         |     `-Rm          `-o1    `-Rn      `-Rd
    `-Q           `-size
  
  
 
.SS Three registers, not all the same type
 
 SADDW{2}  <Vd>.<Ta>, <Vn>.<Ta>, <Vm>.<Tb>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 
 if size == '11' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer datasize = 64;
 integer part = UInt(Q);
 integer elements = datasize DIV esize;
 
 boolean sub_op = (o1 == '1');
 boolean unsigned = (U == '1');
 
 CheckFPAdvSIMDEnabled64();
 bits(2*datasize) operand1 = V[n];
 bits(datasize)   operand2 = Vpart[m, part];
 bits(2*datasize) result;
 integer element1;
 integer element2;
 integer sum;
 
 for e = 0 to elements-1
     element1 = Int(Elem[operand1, e, 2*esize], unsigned);
     element2 = Int(Elem[operand2, e, esize], unsigned);
     if sub_op then
         sum = element1 - element2;
     else
         sum = element1 + element2;
     Elem[result, e, 2*esize] = sum<2*esize-1:0>;
 
 V[d] = result;
 

.SS Assembler Symbols

 2
  Encoded in Q
  Is the second and upper half specifier. If present it causes the operation to
  be performed on the upper 64 bits of the registers holding the narrower
  elements, and is

  Q 2         
  0 [absent]  
  1 [present] 

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <Ta>
  Encoded in size
  Is an arrangement specifier,

  size <Ta>     
  00   8H       
  01   4S       
  10   2D       
  11   RESERVED 

 <Vn>
  Encoded in Rn
  Is the name of the first SIMD&FP source register, encoded in the "Rn" field.

 <Vm>
  Encoded in Rm
  Is the name of the second SIMD&FP source register, encoded in the "Rm" field.

 <Tb>
  Encoded in size:Q
  Is an arrangement specifier,

  size Q <Tb>     
  00   0 8B       
  00   1 16B      
  01   0 4H       
  01   1 8H       
  10   0 2S       
  10   1 4S       
  11   x RESERVED 



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(2*datasize) operand1 = V[n];
 bits(datasize)   operand2 = Vpart[m, part];
 bits(2*datasize) result;
 integer element1;
 integer element2;
 integer sum;
 
 for e = 0 to elements-1
     element1 = Int(Elem[operand1, e, 2*esize], unsigned);
     element2 = Int(Elem[operand2, e, esize], unsigned);
     if sub_op then
         sum = element1 - element2;
     else
         sum = element1 + element2;
     Elem[result, e, 2*esize] = sum<2*esize-1:0>;
 
 V[d] = result;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
