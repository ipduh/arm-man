.nh
.TH "BFDOT (by element) -- A64" "7" " "  "instruction" "advsimd"
.SS BFDOT (by element)
 BFloat16 floating-point dot product (vector, by element)

 BFloat16 floating-point dot product (vector, by element). This instruction
 delimits the source vectors into pairs of 16-bit BF16 elements. Each pair of
 elements in the first source vector is multiplied by the specified pair of
 elements in the second source vector. The resulting single-precision products
 are then summed and added destructively to the single-precision element of the
 destination vector that aligns with the pair of BF16 values in the first source
 vector. The instruction ignores the FPCR and does not update the FPSR exception
 status.

 The BF16 pair within the second source vector is specified using an immediate
 index. The index range is from 0 to 3 inclusive. ID_AA64ISAR1_EL1.BF16
 indicates whether this instruction is supported.



.SS Vector - A64 - BFDOT_asimdelem_E
 
                                                                   
       29                20                  10                    
     30 |              21 |                11 |                    
   31 | |        24  22 | |      16      12 | |         5         0
    | | |         |   | | |       |       | | |         |         |
   0|.|0|0 1 1 1 1|0 1|.|.|. . . .|1 1 1 1|.|0|. . . . .|. . . . .|
    | |           |   | | |       |       |   |         |
    | `-U         |   | | `-Rm    |       `-H `-Rn      `-Rd
    `-Q           |   | `-M       `-opcode
                  |   `-L
                  `-size
  
  
 
.SS Vector
 
 BFDOT  <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.2H[<index>]
 
 if !HaveBF16Ext() then UNDEFINED;
 integer n = UInt(Rn);
 integer m = UInt(M:Rm);
 integer d = UInt(Rd);
 integer i = UInt(H:L);
 integer datasize = if Q == '1' then 128 else 64;
 integer elements = datasize DIV 32;
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand1 = V[n];
 bits(128)      operand2 = V[m];
 bits(datasize) operand3 = V[d];
 bits(datasize) result;
 
 for e = 0 to elements-1
     bits(16) elt1_a = Elem[operand1, 2 * e + 0, 16];
     bits(16) elt1_b = Elem[operand1, 2 * e + 1, 16];
     bits(16) elt2_a = Elem[operand2, 2 * i + 0, 16];
     bits(16) elt2_b = Elem[operand2, 2 * i + 1, 16];
 
     bits(32) sum = BFAdd(BFMul(elt1_a, elt2_a), BFMul(elt1_b, elt2_b));
     Elem[result, e, 32] = BFAdd(Elem[operand3, e, 32], sum);
 
 V[d] = result;
 

.SS Assembler Symbols

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <Ta>
  Encoded in Q
  Is an arrangement specifier,

  Q <Ta> 
  0 2S   
  1 4S   

 <Vn>
  Encoded in Rn
  Is the name of the first SIMD&FP source register, encoded in the "Rn" field.

 <Tb>
  Encoded in Q
  Is an arrangement specifier,

  Q <Tb> 
  0 4H   
  1 8H   

 <Vm>
  Encoded in M:Rm
  Is the name of the second SIMD&FP source register, encoded in the "M:Rm"
  fields.

 <index>
  Encoded in H:L
  Is the immediate index of a pair of 16-bit elements in the range 0 to 3,
  encoded in the "H:L" fields.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand1 = V[n];
 bits(128)      operand2 = V[m];
 bits(datasize) operand3 = V[d];
 bits(datasize) result;
 
 for e = 0 to elements-1
     bits(16) elt1_a = Elem[operand1, 2 * e + 0, 16];
     bits(16) elt1_b = Elem[operand1, 2 * e + 1, 16];
     bits(16) elt2_a = Elem[operand2, 2 * i + 0, 16];
     bits(16) elt2_b = Elem[operand2, 2 * i + 1, 16];
 
     bits(32) sum = BFAdd(BFMul(elt1_a, elt2_a), BFMul(elt1_b, elt2_b));
     Elem[result, e, 32] = BFAdd(Elem[operand3, e, 32], sum);
 
 V[d] = result;

