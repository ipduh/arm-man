.nh
.TH "FRINTM (scalar) -- A64" "7" " "  "instruction" "float"
.SS FRINTM (scalar)
 Floating-point Round to Integral, toward Minus infinity (scalar)

 Floating-point Round to Integral, toward Minus infinity (scalar). This
 instruction rounds a floating-point value in the SIMD&FP source register to an
 integral floating-point value of the same size using the Round towards Minus
 Infinity rounding mode, and writes the result to the SIMD&FP destination
 register.

 A zero input gives a zero result with the same sign, an infinite input gives an
 infinite result with the same sign, and a NaN is propagated as for normal
 arithmetic.

 A floating-point exception can be generated by this instruction. Depending on
 the settings in FPCR, the exception results in either a flag being set in FPSR,
 or a synchronous exception being generated. For more information, see Floating-
 point exception traps.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS Floating-point - A64 - float
 
                                                                   
       29                                                          
     30 |              21                                          
   31 | |        24  22 |    18    15        10         5         0
    | | |         |   | |     |     |         |         |         |
  |0|0|0|1 1 1 1 0|. .|1|0 0 1|0 1 0|1 0 0 0 0|. . . . .|. . . . .|
  |   |           |           |               |         |
  `-M `-S         `-ftype     `-rmode         `-Rn      `-Rd
  
  
 
.SS Half-precision(ftype == 11)
 
 FRINTM  <Hd>, <Hn>
.SS Single-precision(ftype == 00)
 
 FRINTM  <Sd>, <Sn>
.SS Double-precision(ftype == 01)
 
 FRINTM  <Dd>, <Dn>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 integer datasize;
 case ftype of
     when '00' datasize = 32;
     when '01' datasize = 64;
     when '10' UNDEFINED;
     when '11'
         if HaveFP16Ext() then
             datasize = 16;
         else
             UNDEFINED;
 
 boolean exact = FALSE;
 FPRounding rounding;
 case rmode of
     when '0xx' rounding = FPDecodeRounding(rmode<1:0>);
     when '100' rounding = FPRounding_TIEAWAY;
     when '101' UNDEFINED;
     when '110' rounding = FPRoundingMode(FPCR); exact = TRUE;
     when '111' rounding = FPRoundingMode(FPCR);
 
 CheckFPAdvSIMDEnabled64();
 
 bits(datasize) result;
 bits(datasize) operand = V[n];
 
 result = FPRoundInt(operand, FPCR, rounding, exact);
 
 V[d] = result;
 

.SS Assembler Symbols

 <Dd>
  Encoded in Rd
  Is the 64-bit name of the SIMD&FP destination register, encoded in the "Rd"
  field.

 <Dn>
  Encoded in Rn
  Is the 64-bit name of the SIMD&FP source register, encoded in the "Rn" field.

 <Hd>
  Encoded in Rd
  Is the 16-bit name of the SIMD&FP destination register, encoded in the "Rd"
  field.

 <Hn>
  Encoded in Rn
  Is the 16-bit name of the SIMD&FP source register, encoded in the "Rn" field.

 <Sd>
  Encoded in Rd
  Is the 32-bit name of the SIMD&FP destination register, encoded in the "Rd"
  field.

 <Sn>
  Encoded in Rn
  Is the 32-bit name of the SIMD&FP source register, encoded in the "Rn" field.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 
 bits(datasize) result;
 bits(datasize) operand = V[n];
 
 result = FPRoundInt(operand, FPCR, rounding, exact);
 
 V[d] = result;

