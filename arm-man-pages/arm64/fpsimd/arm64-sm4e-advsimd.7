.nh
.TH "SM4E -- A64" "7" " "  "instruction" "advsimd"
.SS SM4E
 SM4 Encode

 SM4 Encode takes input data as a 128-bit vector from the first source SIMD&FP
 register, and four iterations of the round key held as the elements of the
 128-bit vector in the second source SIMD&FP register. It encrypts the data by
 four rounds, in accordance with the SM4 standard, returning the 128-bit result
 to the destination SIMD&FP register.

 This instruction is implemented only when ARMv8.2-SM is implemented.



.SS Advanced SIMD - A64 - SM4E_VV4_cryptosha512_2
 
                                                                   
                                                                   
                                                                   
                                         12  10         5         0
                                          |   |         |         |
   1 1 0 0 1 1 1 0 1 1 0 0 0 0 0 0 1 0 0 0|0 1|. . . . .|. . . . .|
                                          |   |         |
                                          |   `-Rn      `-Rd
                                          `-opcode
  
  
 
.SS Advanced SIMD
 
 SM4E  <Vd>.4S, <Vn>.4S
 
 if !HaveSM4Ext() then UNDEFINED;
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 AArch64.CheckFPAdvSIMDEnabled();
 
 bits(128) Vn = V[n];
 bits(32) intval; 
 bits(8) sboxout;
 bits(128) roundresult;
 bits(32) roundkey;
 
 roundresult=V[d];
 for index = 0 to 3
     roundkey = Elem[Vn,index,32];
 
     intval = roundresult<127:96> EOR roundresult<95:64> EOR roundresult<63:32> EOR roundkey; 
 
     for i = 0 to 3  
         Elem[intval,i,8]  = Sbox(Elem[intval,i,8]); 
 
     intval = intval EOR ROL(intval,2) EOR ROL(intval,10) EOR ROL(intval,18) EOR ROL(intval,24);
     intval = intval EOR roundresult<31:0>; 
 
     roundresult<31:0> = roundresult<63:32>;
     roundresult<63:32> = roundresult<95:64>;
     roundresult<95:64> = roundresult<127:96>;
     roundresult<127:96> = intval; 
 V[d] = roundresult;
 

.SS Assembler Symbols

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP source and destination register, encoded in the
  "Rd" field.

 <Vn>
  Encoded in Rn
  Is the name of the second SIMD&FP source register, encoded in the "Rn" field.



.SS Operation

 AArch64.CheckFPAdvSIMDEnabled();
 
 bits(128) Vn = V[n];
 bits(32) intval; 
 bits(8) sboxout;
 bits(128) roundresult;
 bits(32) roundkey;
 
 roundresult=V[d];
 for index = 0 to 3
     roundkey = Elem[Vn,index,32];
 
     intval = roundresult<127:96> EOR roundresult<95:64> EOR roundresult<63:32> EOR roundkey; 
 
     for i = 0 to 3  
         Elem[intval,i,8]  = Sbox(Elem[intval,i,8]); 
 
     intval = intval EOR ROL(intval,2) EOR ROL(intval,10) EOR ROL(intval,18) EOR ROL(intval,24);
     intval = intval EOR roundresult<31:0>; 
 
     roundresult<31:0> = roundresult<63:32>;
     roundresult<63:32> = roundresult<95:64>;
     roundresult<95:64> = roundresult<127:96>;
     roundresult<127:96> = intval; 
 V[d] = roundresult;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
