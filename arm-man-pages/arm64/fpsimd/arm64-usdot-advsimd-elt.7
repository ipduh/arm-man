.nh
.TH "USDOT (by element) -- A64" "7" " "  "instruction" "advsimd"
.SS USDOT (by element)
 Dot Product with unsigned and signed integers (vector, by element)

 Dot Product index form with unsigned and signed integers. This instruction
 performs the dot product of the four unsigned 8-bit integer values in each
 32-bit element of the first source register with the four signed 8-bit integer
 values in an indexed 32-bit element of the second source register, accumulating
 the result into the corresponding 32-bit element of the destination register.

 From Armv8.2 to Armv8.5, this is an optional instruction. From Armv8.6 it is
 mandatory for implementations that include Advanced SIMD to support it.
 ID_AA64ISAR1_EL1.I8MM indicates whether this instruction is supported.



.SS Vector - A64 - USDOT_asimdelem_D
 
                       21                                          
       29            22 |                    10                    
     30 |          23 | |                  11 |                    
   31 | |        24 | | |20      16      12 | |         5         0
    | | |         | | | | |       |       | | |         |         |
   0|.|0|0 1 1 1 1|1|0|.|.|. . . .|1 1 1 1|.|0|. . . . .|. . . . .|
    | |           |   | | |       |       |   |         |
    | `-U         |   | | `-Rm    |       `-H `-Rn      `-Rd
    `-Q           |   | `-M       `-opcode
                  |   `-L
                  `-US
  
  
 
.SS Vector
 
 USDOT  <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.4B[<index>]
 
 if !HaveInt8MatMulExt() then UNDEFINED;
 boolean op1_unsigned = (US == '1');
 boolean op2_unsigned = (US == '0');
 integer n = UInt(Rn);
 integer m = UInt(M:Rm);
 integer d = UInt(Rd);
 integer i = UInt(H:L);
 integer datasize = if Q == '1' then 128 else 64;
 integer elements = datasize DIV 32;
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand1 = V[n];
 bits(128)      operand2 = V[m];
 bits(datasize) operand3 = V[d];
 bits(datasize) result;
 
 for e = 0 to elements-1
     bits(32) res = Elem[operand3, e, 32];
     for b = 0 to 3
         integer element1 = Int(Elem[operand1, 4 * e + b, 8], op1_unsigned);
         integer element2 = Int(Elem[operand2, 4 * i + b, 8], op2_unsigned);
         res = res + element1 * element2;
     Elem[result, e, 32] = res;
 V[d] = result;
 

.SS Assembler Symbols

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP third source and destination register, encoded in
  the "Rd" field.

 <Ta>
  Encoded in Q
  Is an arrangement specifier,

  Q <Ta> 
  0 2S   
  1 4S   

 <Vn>
  Encoded in Rn
  Is the name of the first SIMD&FP source register, encoded in the "Rn" field.

 <Tb>
  Encoded in Q
  Is an arrangement specifier,

  Q <Tb> 
  0 8B   
  1 16B  

 <Vm>
  Encoded in M:Rm
  Is the name of the second SIMD&FP source register, encoded in the "M:Rm"
  fields.

 <index>
  Encoded in H:L
  Is the immediate index of a quadtuplet of four 8-bit elements in the range 0
  to 3, encoded in the "H:L" fields.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand1 = V[n];
 bits(128)      operand2 = V[m];
 bits(datasize) operand3 = V[d];
 bits(datasize) result;
 
 for e = 0 to elements-1
     bits(32) res = Elem[operand3, e, 32];
     for b = 0 to 3
         integer element1 = Int(Elem[operand1, 4 * e + b, 8], op1_unsigned);
         integer element2 = Int(Elem[operand2, 4 * i + b, 8], op2_unsigned);
         res = res + element1 * element2;
     Elem[result, e, 32] = res;
 V[d] = result;

