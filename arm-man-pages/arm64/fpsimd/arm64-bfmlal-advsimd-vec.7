.nh
.TH "BFMLALB, BFMLALT (vector) -- A64" "7" " "  "instruction" "advsimd"
.SS BFMLALB, BFMLALT (vector)
 BFloat16 floating-point widening multiply-add long (vector)

 BFloat16 floating-point widening multiply-add long (vector) widens the even-
 numbered (bottom) or odd-numbered (top) 16-bit elements in the first and second
 source vectors from Bfloat16 to single-precision format. The instruction then
 multiplies and adds these values to the overlapping single-precision elements
 of the destination vector.

 This performs a fused multiply-add without intermediate rounding that honors
 all of the control bits in the FPCR that apply to single-precision arithmetic,
 including the rounding mode. It can also generate a floating-point exception
 that causes cumulative exception bits in the FPSR to be set, or a synchronous
 exception to be taken, depending on the enable bits in the FPCR.
 ID_AA64ISAR1_EL1.BF16 indicates whether these instruction is supported.



.SS Vector - A64 - BFMLAL_asimdsame2_F_
 
                                             10                    
       29                                  11 |                    
     30 |              21          15    12 | |                    
   31 | |        24  22 |        16 |  13 | | |         5         0
    | | |         |   | |         | |   | | | |         |         |
   0|.|1|0 1 1 1 0|1 1|0|. . . . .|1|1 1|1|1|1|. . . . .|. . . . .|
    | |           |     |           |   | |   |         |
    | `-U         |     `-Rm        |   | |   `-Rn      `-Rd
    `-Q           `-size            |   | `-opcode<0>
                                    |   `-opcode<1>
                                    `-opcode<3:2>
  
  
 
.SS Vector
 
 BFMLAL<bt>  <Vd>.4S, <Vn>.8H, <Vm>.8H
 
 if !HaveBF16Ext() then UNDEFINED;
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 
 integer elements = 128 DIV 32;
 integer sel = UInt(Q);
 
 CheckFPAdvSIMDEnabled64();
 bits(128) operand1 = V[n];
 bits(128) operand2 = V[m];
 bits(128) operand3 = V[d];
 bits(128) result;
 
 for e = 0 to elements-1
     bits(32) element1 = Elem[operand1, 2 * e + sel, 16] : Zeros(16);
     bits(32) element2 = Elem[operand2, 2 * e + sel, 16] : Zeros(16);
     bits(32) addend = Elem[operand3, e, 32];
     Elem[result, e, 32] = FPMulAdd(addend, element1, element2, FPCR);
 
 V[d] = result;
 

.SS Assembler Symbols

 <bt>
  Encoded in Q
  Is the bottom or top element specifier,

  Q <bt> 
  0 B    
  1 T    

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <Vn>
  Encoded in Rn
  Is the name of the first SIMD&FP source register, encoded in the "Rn" field.

 <Vm>
  Encoded in Rm
  Is the name of the second SIMD&FP source register, encoded in the "Rm" field.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(128) operand1 = V[n];
 bits(128) operand2 = V[m];
 bits(128) operand3 = V[d];
 bits(128) result;
 
 for e = 0 to elements-1
     bits(32) element1 = Elem[operand1, 2 * e + sel, 16] : Zeros(16);
     bits(32) element2 = Elem[operand2, 2 * e + sel, 16] : Zeros(16);
     bits(32) addend = Elem[operand3, e, 32];
     Elem[result, e, 32] = FPMulAdd(addend, element1, element2, FPCR);
 
 V[d] = result;

