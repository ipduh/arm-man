.nh
.TH "ADDP (scalar) -- A64" "7" " "  "instruction" "advsimd"
.SS ADDP (scalar)
 Add Pair of elements (scalar)

 Add Pair of elements (scalar). This instruction adds two vector elements in the
 source SIMD&FP register and writes the scalar result into the destination
 SIMD&FP register.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS Advanced SIMD - A64 - ADDP_asisdpair_only
 
                                                                   
                                                                   
       29                                                          
     30 |        24  22        17        12  10         5         0
      | |         |   |         |         |   |         |         |
   0 1|0|1 1 1 1 0|. .|1 1 0 0 0|1 1 0 1 1|1 0|. . . . .|. . . . .|
      |           |             |             |         |
      `-U         `-size        `-opcode      `-Rn      `-Rd
  
  
 
.SS Advanced SIMD
 
 ADDP  <V><d>, <Vn>.<T>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 if size != '11' then UNDEFINED;
 
 integer esize = 8 << UInt(size);
 integer datasize = esize * 2;
 integer elements = 2;
 
 ReduceOp op = ReduceOp_ADD;
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = V[n];
 V[d] = Reduce(op, operand, esize);
 

.SS Assembler Symbols

 <V>
  Encoded in size
  Is the destination width specifier,

  size <V>      
  0x   RESERVED 
  10   RESERVED 
  11   D        

 <d>
  Encoded in Rd
  Is the number of the SIMD&FP destination register, encoded in the "Rd" field.

 <Vn>
  Encoded in Rn
  Is the name of the SIMD&FP source register, encoded in the "Rn" field.

 <T>
  Encoded in size
  Is the source arrangement specifier,

  size <T>      
  0x   RESERVED 
  10   RESERVED 
  11   2D       



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = V[n];
 V[d] = Reduce(op, operand, esize);


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
