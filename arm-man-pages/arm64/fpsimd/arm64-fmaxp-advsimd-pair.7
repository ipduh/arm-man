.nh
.TH "FMAXP (scalar) -- A64" "7" " "  "instruction" "advsimd"
.SS FMAXP (scalar)
 Floating-point Maximum of Pair of elements (scalar)

 Floating-point Maximum of Pair of elements (scalar). This instruction compares
 two vector elements in the source SIMD&FP register and writes the largest of
 the floating-point values as a scalar to the destination SIMD&FP register.

 This instruction can generate a floating-point exception. Depending on the
 settings in FPCR, the exception results in either a flag being set in FPSR or a
 synchronous exception being generated. For more information, see Floating-point
 exception traps.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.


It has encodings from 2 classes: Half-precision and Single-precision and double-precision

.SS Half-precision - A64 - FMAXP_asisdpair_only_H
 
                                                                   
                     22                                            
       29          23 |                                            
     30 |        24 | |        17        12  10         5         0
      | |         | | |         |         |   |         |         |
   0 1|0|1 1 1 1 0|0|0|1 1 0 0 0|0 1 1 1 1|1 0|. . . . .|. . . . .|
      |           | |           |             |         |
      `-U         | `-sz        `-opcode      `-Rn      `-Rd
                  `-o1
  
  
 
.SS Half-precision
 
 FMAXP  <V><d>, <Vn>.<T>
 
 if !HaveFP16Ext() then UNDEFINED;
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 integer esize = 16;
 if sz == '1' then UNDEFINED;
 integer datasize = esize * 2;
 integer elements = 2;
 
 ReduceOp op = if o1 == '1' then ReduceOp_FMIN else ReduceOp_FMAX;
.SS Single-precision and double-precision - A64 - FMAXP_asisdpair_only_SD
 
                                                                   
                     22                                            
       29          23 |                                            
     30 |        24 | |        17        12  10         5         0
      | |         | | |         |         |   |         |         |
   0 1|1|1 1 1 1 0|0|.|1 1 0 0 0|0 1 1 1 1|1 0|. . . . .|. . . . .|
      |           | |           |             |         |
      `-U         | `-sz        `-opcode      `-Rn      `-Rd
                  `-o1
  
  
 
.SS Single-precision and double-precision
 
 FMAXP  <V><d>, <Vn>.<T>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 integer esize = 32 << UInt(sz);
 integer datasize = esize * 2;
 integer elements = 2;
 
 ReduceOp op = if o1 == '1' then ReduceOp_FMIN else ReduceOp_FMAX;
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = V[n];
 V[d] = Reduce(op, operand, esize);
 

.SS Assembler Symbols

 <V>
  Encoded in sz
  For the half-precision variant: is the destination width specifier,

  sz <V>      
  0  H        
  1  RESERVED 

 <V>
  Encoded in sz
  For the single-precision and double-precision variant: is the destination
  width specifier,

  sz <V> 
  0  S   
  1  D   

 <d>
  Encoded in Rd
  Is the number of the SIMD&FP destination register, encoded in the "Rd" field.

 <Vn>
  Encoded in Rn
  Is the name of the SIMD&FP source register, encoded in the "Rn" field.

 <T>
  Encoded in sz
  For the half-precision variant: is the source arrangement specifier,

  sz <T>      
  0  2H       
  1  RESERVED 

 <T>
  Encoded in sz
  For the single-precision and double-precision variant: is the source
  arrangement specifier,

  sz <T> 
  0  2S  
  1  2D  



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = V[n];
 V[d] = Reduce(op, operand, esize);

