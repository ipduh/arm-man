.nh
.TH "RAX1 -- A64" "7" " "  "instruction" "advsimd"
.SS RAX1
 Rotate and Exclusive OR

 Rotate and Exclusive OR rotates each 64-bit element of the 128-bit vector in a
 source SIMD&FP register left by 1, performs a bitwise exclusive OR of the
 resulting 128-bit vector and the vector in another source SIMD&FP register, and
 writes the result to the destination SIMD&FP register.

 This instruction is implemented only when ARMv8.2-SHA is implemented.



.SS Advanced SIMD - A64 - RAX1_VVV2_cryptosha512_3
 
                                                                   
                                     14                            
                                   15 |                            
                       21        16 | |  12  10         5         0
                        |         | | |   |   |         |         |
   1 1 0 0 1 1 1 0 0 1 1|. . . . .|1|0|0 0|1 1|. . . . .|. . . . .|
                        |           |     |   |         |
                        `-Rm        `-O   |   `-Rn      `-Rd
                                          `-opcode
  
  
 
.SS Advanced SIMD
 
 RAX1  <Vd>.2D, <Vn>.2D, <Vm>.2D
 
 if !HaveSHA3Ext() then UNDEFINED;
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 
 AArch64.CheckFPAdvSIMDEnabled();
 
 bits(128) Vm = V[m];
 bits(128) Vn = V[n];
 V[d] = Vn EOR (ROL(Vm<127:64>,1):ROL(Vm<63:0>, 1));
 

.SS Assembler Symbols

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <Vn>
  Encoded in Rn
  Is the name of the first SIMD&FP source register, encoded in the "Rn" field.

 <Vm>
  Encoded in Rm
  Is the name of the second SIMD&FP source register, encoded in the "Rm" field.



.SS Operation

 AArch64.CheckFPAdvSIMDEnabled();
 
 bits(128) Vm = V[m];
 bits(128) Vn = V[n];
 V[d] = Vn EOR (ROL(Vm<127:64>,1):ROL(Vm<63:0>, 1));


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
