.nh
.TH "FCVTZS (vector, integer) -- A64" "7" " "  "instruction" "advsimd"
.SS FCVTZS (vector, integer)
 Floating-point Convert to Signed integer, rounding toward Zero (vector)

 Floating-point Convert to Signed integer, rounding toward Zero (vector). This
 instruction converts a scalar or each element in a vector from a floating-point
 value to a signed integer value using the Round towards Zero rounding mode, and
 writes the result to the SIMD&FP destination register.

 A floating-point exception can be generated by this instruction. Depending on
 the settings in FPCR, the exception results in either a flag being set in FPSR,
 or a synchronous exception being generated. For more information, see Floating-
 point exception traps.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the Security state and Exception level in which the instruction is
 executed, an attempt to execute the instruction might be trapped.


It has encodings from 4 classes: Scalar half precision, Scalar single-precision and double-precision, Vector half precision and Vector single-precision and double-precision

.SS Scalar half precision - A64 - FCVTZS_asisdmiscfp16_R
 
                                                                   
                                                                   
       29          23                    12                        
     30 |        24 |          17      13 |  10         5         0
      | |         | |           |       | |   |         |         |
   0 1|0|1 1 1 1 0|1|1 1 1 1 0 0|1 1 0 1|1|1 0|. . . . .|. . . . .|
      |           |                     |     |         |
      `-U         `-o2                  `-o1  `-Rn      `-Rd
  
  
 
.SS Scalar half precision
 
 FCVTZS  <Hd>, <Hn>
 
 if !HaveFP16Ext() then UNDEFINED;
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 integer esize = 16;
 integer datasize = esize;
 integer elements = 1;
 
 FPRounding rounding = FPDecodeRounding(o1:o2);
 boolean unsigned = (U == '1');
.SS Scalar single-precision and double-precision - A64 - FCVTZS_asisdmisc_R
 
                                                                   
                     22                                            
       29          23 |                  12                        
     30 |        24 | |        17      13 |  10         5         0
      | |         | | |         |       | |   |         |         |
   0 1|0|1 1 1 1 0|1|.|1 0 0 0 0|1 1 0 1|1|1 0|. . . . .|. . . . .|
      |           | |                   |     |         |
      `-U         | `-sz                `-o1  `-Rn      `-Rd
                  `-o2
  
  
 
.SS Scalar single-precision and double-precision
 
 FCVTZS  <V><d>, <V><n>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 integer esize = 32 << UInt(sz);
 integer datasize = esize;
 integer elements = 1;
 
 FPRounding rounding = FPDecodeRounding(o1:o2);
 boolean unsigned = (U == '1');
.SS Vector half precision - A64 - FCVTZS_asimdmiscfp16_R
 
                                                                   
       29                                                          
     30 |          23                    12                        
   31 | |        24 |          17      13 |  10         5         0
    | | |         | |           |       | |   |         |         |
   0|.|0|0 1 1 1 0|1|1 1 1 1 0 0|1 1 0 1|1|1 0|. . . . .|. . . . .|
    | |           |                     |     |         |
    | `-U         `-o2                  `-o1  `-Rn      `-Rd
    `-Q
  
  
 
.SS Vector half precision
 
 FCVTZS  <Vd>.<T>, <Vn>.<T>
 
 if !HaveFP16Ext() then UNDEFINED;
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 integer esize = 16;
 integer datasize = if Q == '1' then 128 else 64;
 integer elements = datasize DIV esize;
 
 FPRounding rounding = FPDecodeRounding(o1:o2);
 boolean unsigned = (U == '1');
.SS Vector single-precision and double-precision - A64 - FCVTZS_asimdmisc_R
 
                                                                   
       29            22                                            
     30 |          23 |                  12                        
   31 | |        24 | |        17      13 |  10         5         0
    | | |         | | |         |       | |   |         |         |
   0|.|0|0 1 1 1 0|1|.|1 0 0 0 0|1 1 0 1|1|1 0|. . . . .|. . . . .|
    | |           | |                   |     |         |
    | `-U         | `-sz                `-o1  `-Rn      `-Rd
    `-Q           `-o2
  
  
 
.SS Vector single-precision and double-precision
 
 FCVTZS  <Vd>.<T>, <Vn>.<T>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 if sz:Q == '10' then UNDEFINED;
 integer esize = 32 << UInt(sz);
 integer datasize = if Q == '1' then 128 else 64;
 integer elements = datasize DIV esize;
 
 FPRounding rounding = FPDecodeRounding(o1:o2);
 boolean unsigned = (U == '1');
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = V[n];
 bits(datasize) result;
 bits(esize) element;
 
 for e = 0 to elements-1
     element = Elem[operand, e, esize];
     Elem[result, e, esize] = FPToFixed(element, 0, unsigned, FPCR, rounding);
 
 V[d] = result;
 

.SS Assembler Symbols

 <Hd>
  Encoded in Rd
  Is the 16-bit name of the SIMD&FP destination register, encoded in the "Rd"
  field.

 <Hn>
  Encoded in Rn
  Is the 16-bit name of the SIMD&FP source register, encoded in the "Rn" field.

 <V>
  Encoded in sz
  Is a width specifier,

  sz <V> 
  0  S   
  1  D   

 <d>
  Encoded in Rd
  Is the number of the SIMD&FP destination register, encoded in the "Rd" field.

 <n>
  Encoded in Rn
  Is the number of the SIMD&FP source register, encoded in the "Rn" field.

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <T>
  Encoded in Q
  For the vector half precision variant: is an arrangement specifier,

  Q <T> 
  0 4H  
  1 8H  

 <T>
  Encoded in sz:Q
  For the vector single-precision and double-precision variant: is an
  arrangement specifier,

  sz Q <T>      
  0  0 2S       
  0  1 4S       
  1  0 RESERVED 
  1  1 2D       

 <Vn>
  Encoded in Rn
  Is the name of the SIMD&FP source register, encoded in the "Rn" field.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = V[n];
 bits(datasize) result;
 bits(esize) element;
 
 for e = 0 to elements-1
     element = Elem[operand, e, esize];
     Elem[result, e, esize] = FPToFixed(element, 0, unsigned, FPCR, rounding);
 
 V[d] = result;

