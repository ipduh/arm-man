.nh
.TH "SQRDMLAH (vector) -- A64" "7" " "  "instruction" "advsimd"
.SS SQRDMLAH (vector)
 Signed Saturating Rounding Doubling Multiply Accumulate returning High Half
 (vector)

 Signed Saturating Rounding Doubling Multiply Accumulate returning High Half
 (vector). This instruction multiplies the vector elements of the first source
 SIMD&FP register with the corresponding vector elements of the second source
 SIMD&FP register without saturating the multiply results, doubles the results,
 and accumulates the most significant half of the final results with the vector
 elements of the destination SIMD&FP register. The results are rounded.

 If any of the results overflow, they are saturated. The cumulative saturation
 bit, FPSR.QC, is set if saturation occurs.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.


It has encodings from 2 classes: Scalar and Vector

.SS Scalar - A64 - SQRDMLAH_asisdsame2_only
 
                                                                   
                                             10                    
       29              21          15      11 |                    
     30 |        24  22 |        16 |    12 | |         5         0
      | |         |   | |         | |     | | |         |         |
   0 1|1|1 1 1 1 0|. .|0|. . . . .|1|0 0 0|0|1|. . . . .|. . . . .|
      |           |     |                 |   |         |
      `-U         |     `-Rm              `-S `-Rn      `-Rd
                  `-size
  
  
 
.SS Scalar
 
 SQRDMLAH  <V><d>, <V><n>, <V><m>
 
 if !HaveQRDMLAHExt() then UNDEFINED;
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 if size == '11' || size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer datasize = esize;
 integer elements = 1;
 boolean rounding = TRUE;
 boolean sub_op = (S == '1');
.SS Vector - A64 - SQRDMLAH_asimdsame2_only
 
                                                                   
       29                                    10                    
     30 |              21          15      11 |                    
   31 | |        24  22 |        16 |    12 | |         5         0
    | | |         |   | |         | |     | | |         |         |
   0|.|1|0 1 1 1 0|. .|0|. . . . .|1|0 0 0|0|1|. . . . .|. . . . .|
    | |           |     |                 |   |         |
    | `-U         |     `-Rm              `-S `-Rn      `-Rd
    `-Q           `-size
  
  
 
.SS Vector
 
 SQRDMLAH  <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
 
 if !HaveQRDMLAHExt() then UNDEFINED;
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 if size == '11' || size == '00' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer datasize = if Q == '1' then 128 else 64;
 integer elements = datasize DIV esize;
 boolean rounding = TRUE;
 boolean sub_op = (S == '1');
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand1 = V[n];
 bits(datasize) operand2 = V[m];
 bits(datasize) operand3 = V[d];
 bits(datasize) result;
 integer rounding_const = if rounding then 1 << (esize - 1) else 0;
 integer element1;
 integer element2;
 integer element3;
 integer product;
 boolean sat;
 
 for e = 0 to elements-1
     element1 = SInt(Elem[operand1, e, esize]);
     element2 = SInt(Elem[operand2, e, esize]);
     element3 = SInt(Elem[operand3, e, esize]);
     if sub_op then
         accum = ((element3 << esize) - 2 * (element1 * element2) + rounding_const);
     else
         accum = ((element3 << esize) + 2 * (element1 * element2) + rounding_const);
     (Elem[result, e, esize], sat) = SignedSatQ(accum >> esize, esize);
     if sat then FPSR.QC = '1';
 
 V[d] = result;
 

.SS Assembler Symbols

 <V>
  Encoded in size
  Is a width specifier,

  size <V>      
  00   RESERVED 
  01   H        
  10   S        
  11   RESERVED 

 <d>
  Encoded in Rd
  Is the number of the SIMD&FP destination register, in the "Rd" field.

 <n>
  Encoded in Rn
  Is the number of the first SIMD&FP source register, encoded in the "Rn" field.

 <m>
  Encoded in Rm
  Is the number of the second SIMD&FP source register, encoded in the "Rm"
  field.

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <T>
  Encoded in size:Q
  Is an arrangement specifier,

  size Q <T>      
  00   x RESERVED 
  01   0 4H       
  01   1 8H       
  10   0 2S       
  10   1 4S       
  11   x RESERVED 

 <Vn>
  Encoded in Rn
  Is the name of the first SIMD&FP source register, encoded in the "Rn" field.

 <Vm>
  Encoded in Rm
  Is the name of the second SIMD&FP source register, encoded in the "Rm" field.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand1 = V[n];
 bits(datasize) operand2 = V[m];
 bits(datasize) operand3 = V[d];
 bits(datasize) result;
 integer rounding_const = if rounding then 1 << (esize - 1) else 0;
 integer element1;
 integer element2;
 integer element3;
 integer product;
 boolean sat;
 
 for e = 0 to elements-1
     element1 = SInt(Elem[operand1, e, esize]);
     element2 = SInt(Elem[operand2, e, esize]);
     element3 = SInt(Elem[operand3, e, esize]);
     if sub_op then
         accum = ((element3 << esize) - 2 * (element1 * element2) + rounding_const);
     else
         accum = ((element3 << esize) + 2 * (element1 * element2) + rounding_const);
     (Elem[result, e, esize], sat) = SignedSatQ(accum >> esize, esize);
     if sat then FPSR.QC = '1';
 
 V[d] = result;

