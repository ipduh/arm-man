.nh
.TH "FMADD -- A64" "7" " "  "instruction" "float"
.SS FMADD
 Floating-point fused Multiply-Add (scalar)

 Floating-point fused Multiply-Add (scalar). This instruction multiplies the
 values of the first two SIMD&FP source registers, adds the product to the value
 of the third SIMD&FP source register, and writes the result to the SIMD&FP
 destination register.

 A floating-point exception can be generated by this instruction. Depending on
 the settings in FPCR, the exception results in either a flag being set in FPSR,
 or a synchronous exception being generated. For more information, see Floating-
 point exception traps.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS Floating-point - A64 - float
 
                                                                   
       29                                                          
     30 |              21          15                              
   31 | |        24  22 |        16 |        10         5         0
    | | |         |   | |         | |         |         |         |
  |0|0|0|1 1 1 1 1|. .|0|. . . . .|0|. . . . .|. . . . .|. . . . .|
  |   |           |   | |         | |         |         |
  `-M `-S         |   | `-Rm      | `-Ra      `-Rn      `-Rd
                  |   `-o1        `-o0
                  `-ftype
  
  
 
.SS Half-precision(ftype == 11)
 
 FMADD  <Hd>, <Hn>, <Hm>, <Ha>
.SS Single-precision(ftype == 00)
 
 FMADD  <Sd>, <Sn>, <Sm>, <Sa>
.SS Double-precision(ftype == 01)
 
 FMADD  <Dd>, <Dn>, <Dm>, <Da>
 
 integer d = UInt(Rd);
 integer a = UInt(Ra);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 
 integer datasize;
 case ftype of
     when '00' datasize = 32;
     when '01' datasize = 64;
     when '10' UNDEFINED;
     when '11'
         if HaveFP16Ext() then
             datasize = 16;
         else
             UNDEFINED;
 
 boolean opa_neg = (o1 == '1');
 boolean op1_neg = (o0 != o1);
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) result;
 bits(datasize) operanda = V[a];
 bits(datasize) operand1 = V[n];
 bits(datasize) operand2 = V[m];
 
 if opa_neg then operanda = FPNeg(operanda);
 if op1_neg then operand1 = FPNeg(operand1);
 result = FPMulAdd(operanda, operand1, operand2, FPCR);
 
 V[d] = result;
 

.SS Assembler Symbols

 <Dd>
  Encoded in Rd
  Is the 64-bit name of the SIMD&FP destination register, encoded in the "Rd"
  field.

 <Dn>
  Encoded in Rn
  Is the 64-bit name of the first SIMD&FP source register holding the
  multiplicand, encoded in the "Rn" field.

 <Dm>
  Encoded in Rm
  Is the 64-bit name of the second SIMD&FP source register holding the
  multiplier, encoded in the "Rm" field.

 <Da>
  Encoded in Ra
  Is the 64-bit name of the third SIMD&FP source register holding the addend,
  encoded in the "Ra" field.

 <Hd>
  Encoded in Rd
  Is the 16-bit name of the SIMD&FP destination register, encoded in the "Rd"
  field.

 <Hn>
  Encoded in Rn
  Is the 16-bit name of the first SIMD&FP source register holding the
  multiplicand, encoded in the "Rn" field.

 <Hm>
  Encoded in Rm
  Is the 16-bit name of the second SIMD&FP source register holding the
  multiplier, encoded in the "Rm" field.

 <Ha>
  Encoded in Ra
  Is the 16-bit name of the third SIMD&FP source register holding the addend,
  encoded in the "Ra" field.

 <Sd>
  Encoded in Rd
  Is the 32-bit name of the SIMD&FP destination register, encoded in the "Rd"
  field.

 <Sn>
  Encoded in Rn
  Is the 32-bit name of the first SIMD&FP source register holding the
  multiplicand, encoded in the "Rn" field.

 <Sm>
  Encoded in Rm
  Is the 32-bit name of the second SIMD&FP source register holding the
  multiplier, encoded in the "Rm" field.

 <Sa>
  Encoded in Ra
  Is the 32-bit name of the third SIMD&FP source register holding the addend,
  encoded in the "Ra" field.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) result;
 bits(datasize) operanda = V[a];
 bits(datasize) operand1 = V[n];
 bits(datasize) operand2 = V[m];
 
 if opa_neg then operanda = FPNeg(operanda);
 if op1_neg then operand1 = FPNeg(operand1);
 result = FPMulAdd(operanda, operand1, operand2, FPCR);
 
 V[d] = result;

