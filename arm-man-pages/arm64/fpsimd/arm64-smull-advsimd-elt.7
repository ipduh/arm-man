.nh
.TH "SMULL, SMULL2 (by element) -- A64" "7" " "  "instruction" "advsimd"
.SS SMULL, SMULL2 (by element)
 Signed Multiply Long (vector, by element)

 Signed Multiply Long (vector, by element). This instruction multiplies each
 vector element in the lower or upper half of the first source SIMD&FP register
 by the specified vector element of the second source SIMD&FP register, places
 the result in a vector, and writes the vector to the destination SIMD&FP
 register. The destination vector elements are twice as long as the elements
 that are multiplied.

 The SMULL instruction extracts vector elements from the lower half of the first
 source register, while the SMULL2 instruction extracts vector elements from the
 upper half of the first source register.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS Vector - A64 - SMULL_asimdelem_L
 
                                                                   
       29                20                  10                    
     30 |              21 |                11 |                    
   31 | |        24  22 | |      16      12 | |         5         0
    | | |         |   | | |       |       | | |         |         |
   0|.|0|0 1 1 1 1|. .|.|.|. . . .|1 0 1 0|.|0|. . . . .|. . . . .|
    | |           |   | | |       |       |   |         |
    | `-U         |   | | `-Rm    |       `-H `-Rn      `-Rd
    `-Q           |   | `-M       `-opcode
                  |   `-L
                  `-size
  
  
 
.SS Vector
 
 SMULL{2}  <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Ts>[<index>]
 
 integer idxdsize = if H == '1' then 128 else 64; 
 integer index;
 bit Rmhi;
 case size of
     when '01' index = UInt(H:L:M); Rmhi = '0';
     when '10' index = UInt(H:L);   Rmhi = M;
     otherwise UNDEFINED;
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rmhi:Rm);
 
 integer esize = 8 << UInt(size);
 integer datasize = 64;
 integer part = UInt(Q);
 integer elements = datasize DIV esize;
 boolean unsigned = (U == '1');
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize)   operand1 = Vpart[n, part];
 bits(idxdsize)   operand2 = V[m];
 bits(2*datasize) result;
 integer element1;
 integer element2;
 bits(2*esize) product;
 
 element2 = Int(Elem[operand2, index, esize], unsigned);
 for e = 0 to elements-1
     element1 = Int(Elem[operand1, e, esize], unsigned);
     product = (element1 * element2)<2*esize-1:0>;
     Elem[result, e, 2*esize] = product;
 
 V[d] = result;
 

.SS Assembler Symbols

 2
  Encoded in Q
  Is the second and upper half specifier. If present it causes the operation to
  be performed on the upper 64 bits of the registers holding the narrower
  elements, and is

  Q 2         
  0 [absent]  
  1 [present] 

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <Ta>
  Encoded in size
  Is an arrangement specifier,

  size <Ta>     
  00   RESERVED 
  01   4S       
  10   2D       
  11   RESERVED 

 <Vn>
  Encoded in Rn
  Is the name of the first SIMD&FP source register, encoded in the "Rn" field.

 <Tb>
  Encoded in size:Q
  Is an arrangement specifier,

  size Q <Tb>     
  00   x RESERVED 
  01   0 4H       
  01   1 8H       
  10   0 2S       
  10   1 4S       
  11   x RESERVED 

 <Vm>
  Encoded in size:M:Rm
  Is the name of the second SIMD&FP source register,

  size <Vm>     
  00   RESERVED 
  01   0:Rm     
  10   M:Rm     
  11   RESERVED 

   Restricted to V0-V15 when element size <Ts> is H.

 <Ts>
  Encoded in size
  Is an element size specifier,

  size <Ts>     
  00   RESERVED 
  01   H        
  10   S        
  11   RESERVED 

 <index>
  Encoded in size:L:H:M
  Is the element index,

  size <index>  
  00   RESERVED 
  01   H:L:M    
  10   H:L      
  11   RESERVED 



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize)   operand1 = Vpart[n, part];
 bits(idxdsize)   operand2 = V[m];
 bits(2*datasize) result;
 integer element1;
 integer element2;
 bits(2*esize) product;
 
 element2 = Int(Elem[operand2, index, esize], unsigned);
 for e = 0 to elements-1
     element1 = Int(Elem[operand1, e, esize], unsigned);
     product = (element1 * element2)<2*esize-1:0>;
     Elem[result, e, 2*esize] = product;
 
 V[d] = result;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
