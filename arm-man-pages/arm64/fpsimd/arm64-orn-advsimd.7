.nh
.TH "ORN (vector) -- A64" "7" " "  "instruction" "advsimd"
.SS ORN (vector)
 Bitwise inclusive OR NOT (vector)

 Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT
 between the two source SIMD&FP registers, and writes the result to the
 destination SIMD&FP register.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS Three registers of the same type - A64 - ORN_asimdsame_only
 
                                                                   
       29                                                          
     30 |              21                    10                    
   31 | |        24  22 |        16        11 |         5         0
    | | |         |   | |         |         | |         |         |
   0|.|0|0 1 1 1 0|1 1|1|. . . . .|0 0 0 1 1|1|. . . . .|. . . . .|
    | |           |     |         |           |         |
    | `-U         |     `-Rm      `-opcode    `-Rn      `-Rd
    `-Q           `-size
  
  
 
.SS Three registers of the same type
 
 ORN  <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 integer esize = 8;
 integer datasize = if Q == '1' then 128 else 64;
 integer elements = datasize DIV esize;
 
 boolean invert = (size<0> == '1');
 LogicalOp op = if size<1> == '1' then LogicalOp_ORR else LogicalOp_AND;
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand1 = V[n];
 bits(datasize) operand2 = V[m];
 bits(datasize) result;
 
 if invert then operand2 = NOT(operand2);
 
 case op of
     when LogicalOp_AND
         result = operand1 AND operand2;
     when LogicalOp_ORR
         result = operand1 OR operand2;
 
 V[d] = result;
 

.SS Assembler Symbols

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <T>
  Encoded in Q
  Is an arrangement specifier,

  Q <T> 
  0 8B  
  1 16B 

 <Vn>
  Encoded in Rn
  Is the name of the first SIMD&FP source register, encoded in the "Rn" field.

 <Vm>
  Encoded in Rm
  Is the name of the second SIMD&FP source register, encoded in the "Rm" field.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand1 = V[n];
 bits(datasize) operand2 = V[m];
 bits(datasize) result;
 
 if invert then operand2 = NOT(operand2);
 
 case op of
     when LogicalOp_AND
         result = operand1 AND operand2;
     when LogicalOp_ORR
         result = operand1 OR operand2;
 
 V[d] = result;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
