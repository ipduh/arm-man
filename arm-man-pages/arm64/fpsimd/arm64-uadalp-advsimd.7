.nh
.TH "UADALP -- A64" "7" " "  "instruction" "advsimd"
.SS UADALP
 Unsigned Add and Accumulate Long Pairwise

 Unsigned Add and Accumulate Long Pairwise. This instruction adds pairs of
 adjacent unsigned integer values from the vector in the source SIMD&FP register
 and accumulates the results with the vector elements of the destination SIMD&FP
 register. The destination vector elements are twice as long as the source
 vector elements.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS Vector - A64 - UADALP_asimdmisc_P
 
                                                                   
       29                                                          
     30 |                            14                            
   31 | |        24  22        17  15 |  12  10         5         0
    | | |         |   |         |   | |   |   |         |         |
   0|.|1|0 1 1 1 0|. .|1 0 0 0 0|0 0|1|1 0|1 0|. . . . .|. . . . .|
    | |           |                 |         |         |
    | `-U         `-size            `-op      `-Rn      `-Rd
    `-Q
  
  
 
.SS Vector
 
 UADALP  <Vd>.<Ta>, <Vn>.<Tb>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 if size == '11' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer datasize = if Q == '1' then 128 else 64;
 integer elements = datasize DIV (2*esize);
 boolean acc = (op == '1');
 boolean unsigned = (U == '1');
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = V[n];
 bits(datasize) result;
 
 bits(2*esize) sum;
 integer op1;
 integer op2;
 
 if acc then result = V[d];
 for e = 0 to elements-1
     op1 = Int(Elem[operand, 2*e+0, esize], unsigned);
     op2 = Int(Elem[operand, 2*e+1, esize], unsigned);
     sum = (op1 + op2)<2*esize-1:0>;
     if acc then
         Elem[result, e, 2*esize] = Elem[result, e, 2*esize] + sum;
     else
         Elem[result, e, 2*esize] = sum;
 
 V[d] = result;
 

.SS Assembler Symbols

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <Ta>
  Encoded in size:Q
  Is an arrangement specifier,

  size Q <Ta>     
  00   0 4H       
  00   1 8H       
  01   0 2S       
  01   1 4S       
  10   0 1D       
  10   1 2D       
  11   x RESERVED 

 <Vn>
  Encoded in Rn
  Is the name of the SIMD&FP source register, encoded in the "Rn" field.

 <Tb>
  Encoded in size:Q
  Is an arrangement specifier,

  size Q <Tb>     
  00   0 8B       
  00   1 16B      
  01   0 4H       
  01   1 8H       
  10   0 2S       
  10   1 4S       
  11   x RESERVED 



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = V[n];
 bits(datasize) result;
 
 bits(2*esize) sum;
 integer op1;
 integer op2;
 
 if acc then result = V[d];
 for e = 0 to elements-1
     op1 = Int(Elem[operand, 2*e+0, esize], unsigned);
     op2 = Int(Elem[operand, 2*e+1, esize], unsigned);
     sum = (op1 + op2)<2*esize-1:0>;
     if acc then
         Elem[result, e, 2*esize] = Elem[result, e, 2*esize] + sum;
     else
         Elem[result, e, 2*esize] = sum;
 
 V[d] = result;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
