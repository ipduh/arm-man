.nh
.TH "SLI -- A64" "7" " "  "instruction" "advsimd"
.SS SLI
 Shift Left and Insert (immediate)

 Shift Left and Insert (immediate). This instruction reads each vector element
 in the source SIMD&FP register, left shifts each vector element by an immediate
 value, and inserts the result into the corresponding vector element in the
 destination SIMD&FP register such that the new zero bits created by the shift
 are not inserted but retain their existing value. Bits shifted out of the left
 of each vector element in the source register are lost.



 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.


It has encodings from 2 classes: Scalar and Vector

.SS Scalar - A64 - SLI_asisdshf_R
 
                                                                   
                                                                   
       29                                    10                    
     30 |          23      19    16        11 |         5         0
      | |           |       |     |         | |         |         |
   0 1|1|1 1 1 1 1 0|. . . .|. . .|0 1 0 1 0|1|. . . . .|. . . . .|
      |             |       |     |           |         |
      `-U           |       |     `-opcode    `-Rn      `-Rd
                    |       `-immb
                    `-immh(!= 0000)
  
  
 
.SS Scalar
 
 SLI  <V><d>, <V><n>, #<shift>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 if immh<3> != '1' then UNDEFINED;
 integer esize = 8 << 3;
 integer datasize = esize;
 integer elements = 1;
 
 integer shift = UInt(immh:immb) - esize;
.SS Vector - A64 - SLI_asimdshf_R
 
                                                                   
       29                                                          
     30 |                                    10                    
   31 | |          23      19    16        11 |         5         0
    | | |           |       |     |         | |         |         |
   0|.|1|0 1 1 1 1 0|. . . .|. . .|0 1 0 1 0|1|. . . . .|. . . . .|
    | |             |       |     |           |         |
    | `-U           |       |     `-opcode    `-Rn      `-Rd
    `-Q             |       `-immb
                    `-immh(!= 0000)
  
  
 
.SS Vector
 
 SLI  <Vd>.<T>, <Vn>.<T>, #<shift>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 if immh == '0000' then SEE(asimdimm);
 if immh<3>:Q == '10' then UNDEFINED;
 integer esize = 8 << HighestSetBit(immh);
 integer datasize = if Q == '1' then 128 else 64;
 integer elements = datasize DIV esize;
 
 integer shift = UInt(immh:immb) - esize;
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand  = V[n];
 bits(datasize) operand2 = V[d];
 bits(datasize) result;
 bits(esize) mask = LSL(Ones(esize), shift);
 bits(esize) shifted;
 
 for e = 0 to elements-1
     shifted = LSL(Elem[operand, e, esize], shift);
     Elem[result, e, esize] = (Elem[operand2, e, esize] AND NOT(mask)) OR shifted;
 V[d] = result;
 

.SS Assembler Symbols

 <V>
  Encoded in immh
  Is a width specifier,

  immh <V>      
  0xxx RESERVED 
  1xxx D        

 <d>
  Encoded in Rd
  Is the number of the SIMD&FP destination register, in the "Rd" field.

 <n>
  Encoded in Rn
  Is the number of the first SIMD&FP source register, encoded in the "Rn" field.

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <T>
  Encoded in immh:Q
  Is an arrangement specifier,

  immh Q <T>                                  
  0000 x SEE Advanced SIMD modified immediate 
  0001 0 8B                                   
  0001 1 16B                                  
  001x 0 4H                                   
  001x 1 8H                                   
  01xx 0 2S                                   
  01xx 1 4S                                   
  1xxx 0 RESERVED                             
  1xxx 1 2D                                   

 <Vn>
  Encoded in Rn
  Is the name of the SIMD&FP source register, encoded in the "Rn" field.

 <shift>
  Encoded in immh:immb
  For the scalar variant: is the left shift amount, in the range 0 to 63,

  immh <shift>              
  0xxx RESERVED             
  1xxx (UInt(immh:immb)-64) 

 <shift>
  Encoded in immh:immb
  For the vector variant: is the left shift amount, in the range 0 to the
  element width in bits minus 1,

  immh <shift>                              
  0000 SEE Advanced SIMD modified immediate 
  0001 (UInt(immh:immb)-8)                  
  001x (UInt(immh:immb)-16)                 
  01xx (UInt(immh:immb)-32)                 
  1xxx (UInt(immh:immb)-64)                 



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand  = V[n];
 bits(datasize) operand2 = V[d];
 bits(datasize) result;
 bits(esize) mask = LSL(Ones(esize), shift);
 bits(esize) shifted;
 
 for e = 0 to elements-1
     shifted = LSL(Elem[operand, e, esize], shift);
     Elem[result, e, esize] = (Elem[operand2, e, esize] AND NOT(mask)) OR shifted;
 V[d] = result;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
