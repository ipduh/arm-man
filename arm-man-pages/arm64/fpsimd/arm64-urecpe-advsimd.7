.nh
.TH "URECPE -- A64" "7" " "  "instruction" "advsimd"
.SS URECPE
 Unsigned Reciprocal Estimate

 Unsigned Reciprocal Estimate. This instruction reads each vector element from
 the source SIMD&FP register, calculates an approximate inverse for the unsigned
 integer value, places the result into a vector, and writes the vector to the
 destination SIMD&FP register.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS Vector - A64 - URECPE_asimdmisc_R
 
                                                                   
       29            22                                            
     30 |          23 |                                            
   31 | |        24 | |        17        12  10         5         0
    | | |         | | |         |         |   |         |         |
   0|.|0|0 1 1 1 0|1|.|1 0 0 0 0|1 1 1 0 0|1 0|. . . . .|. . . . .|
    | |             |           |             |         |
    | `-U           `-sz        `-opcode      `-Rn      `-Rd
    `-Q
  
  
 
.SS Vector
 
 URECPE  <Vd>.<T>, <Vn>.<T>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 if sz == '1' then UNDEFINED;
 integer esize = 32;
 integer datasize = if Q == '1' then 128 else 64;
 integer elements = datasize DIV esize;
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = V[n];
 bits(datasize) result;
 bits(32) element;
 
 for e = 0 to elements-1
     element = Elem[operand, e, 32];
     Elem[result, e, 32] = UnsignedRecipEstimate(element);
 
 V[d] = result;
 

.SS Assembler Symbols

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <T>
  Encoded in sz:Q
  Is an arrangement specifier,

  sz Q <T>      
  0  0 2S       
  0  1 4S       
  1  x RESERVED 

 <Vn>
  Encoded in Rn
  Is the name of the SIMD&FP source register, encoded in the "Rn" field.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = V[n];
 bits(datasize) result;
 bits(32) element;
 
 for e = 0 to elements-1
     element = Elem[operand, e, 32];
     Elem[result, e, 32] = UnsignedRecipEstimate(element);
 
 V[d] = result;

