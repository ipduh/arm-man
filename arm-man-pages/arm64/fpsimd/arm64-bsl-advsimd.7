.nh
.TH "BSL -- A64" "7" " "  "instruction" "advsimd"
.SS BSL
 Bitwise Select

 Bitwise Select. This instruction sets each bit in the destination SIMD&FP
 register to the corresponding bit from the first source SIMD&FP register when
 the original destination bit was 1, otherwise from the second source SIMD&FP
 register.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS Three registers of the same type - A64 - BSL_asimdsame_only
 
                                                                   
       29                                                          
     30 |              21                    10                    
   31 | |        24  22 |        16        11 |         5         0
    | | |         |   | |         |         | |         |         |
   0|.|1|0 1 1 1 0|0 1|1|. . . . .|0 0 0 1 1|1|. . . . .|. . . . .|
    | |           |     |         |           |         |
    | `-U         |     `-Rm      `-opcode    `-Rn      `-Rd
    `-Q           `-opc2
  
  
 
.SS Three registers of the same type
 
 BSL  <Vd>.<T>, <Vn>.<T>, <Vm>.<T>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 integer esize = 8;
 integer datasize = if Q == '1' then 128 else 64;
 integer elements = datasize DIV esize;
 
 VBitOp op;
 
 case opc2 of
     when '00' op = VBitOp_VEOR;
     when '01' op = VBitOp_VBSL;
     when '10' op = VBitOp_VBIT;
     when '11' op = VBitOp_VBIF;
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand1;
 bits(datasize) operand2;
 bits(datasize) operand3;
 bits(datasize) operand4 = V[n];
 
 case op of
     when VBitOp_VEOR
         operand1 = V[m];
         operand2 = Zeros();
         operand3 = Ones();
     when VBitOp_VBSL
         operand1 = V[m];
         operand2 = operand1;
         operand3 = V[d];
     when VBitOp_VBIT
         operand1 = V[d];
         operand2 = operand1;
         operand3 = V[m];
     when VBitOp_VBIF
         operand1 = V[d];
         operand2 = operand1;
         operand3 = NOT(V[m]);
 
 V[d] = operand1 EOR ((operand2 EOR operand4) AND operand3);
 

.SS Assembler Symbols

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <T>
  Encoded in Q
  Is an arrangement specifier,

  Q <T> 
  0 8B  
  1 16B 

 <Vn>
  Encoded in Rn
  Is the name of the first SIMD&FP source register, encoded in the "Rn" field.

 <Vm>
  Encoded in Rm
  Is the name of the second SIMD&FP source register, encoded in the "Rm" field.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand1;
 bits(datasize) operand2;
 bits(datasize) operand3;
 bits(datasize) operand4 = V[n];
 
 case op of
     when VBitOp_VEOR
         operand1 = V[m];
         operand2 = Zeros();
         operand3 = Ones();
     when VBitOp_VBSL
         operand1 = V[m];
         operand2 = operand1;
         operand3 = V[d];
     when VBitOp_VBIT
         operand1 = V[d];
         operand2 = operand1;
         operand3 = V[m];
     when VBitOp_VBIF
         operand1 = V[d];
         operand2 = operand1;
         operand3 = NOT(V[m]);
 
 V[d] = operand1 EOR ((operand2 EOR operand4) AND operand3);


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
