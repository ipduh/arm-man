.nh
.TH "SQSHRUN, SQSHRUN2 -- A64" "7" " "  "instruction" "advsimd"
.SS SQSHRUN, SQSHRUN2
 Signed saturating Shift Right Unsigned Narrow (immediate)

 Signed saturating Shift Right Unsigned Narrow (immediate). This instruction
 reads each signed integer value in the vector of the source SIMD&FP register,
 right shifts each value by an immediate value, saturates the result to an
 unsigned integer value that is half the original width, places the final result
 into a vector, and writes the vector to the destination SIMD&FP register. The
 results are truncated. For rounded results, see SQRSHRUN.

 The SQSHRUN instruction writes the vector to the lower half of the destination
 register and clears the upper half, while the SQSHRUN2 instruction writes the
 vector to the upper half of the destination register without affecting the
 other bits of the register.

 If saturation occurs, the cumulative saturation bit FPSR.QC is set.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.


It has encodings from 2 classes: Scalar and Vector

.SS Scalar - A64 - SQSHRUN_asisdshf_N
 
                                                                   
                                             10                    
       29                                  11 |                    
     30 |          23      19    16      12 | |         5         0
      | |           |       |     |       | | |         |         |
   0 1|1|1 1 1 1 1 0|. . . .|. . .|1 0 0 0|0|1|. . . . .|. . . . .|
      |             |       |             |   |         |
      `-U           |       `-immb        |   `-Rn      `-Rd
                    `-immh(!= 0000)       `-op
  
  
 
.SS Scalar
 
 SQSHRUN  <Vb><d>, <Va><n>, #<shift>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 if immh == '0000' then UNDEFINED;
 if immh<3> == '1' then UNDEFINED;
 integer esize = 8 << HighestSetBit(immh);
 integer datasize = esize;
 integer elements = 1;
 integer part = 0;
 
 integer shift = (2 * esize) - UInt(immh:immb);
 boolean round = (op == '1');
.SS Vector - A64 - SQSHRUN_asimdshf_N
 
                                                                   
       29                                    10                    
     30 |                                  11 |                    
   31 | |          23      19    16      12 | |         5         0
    | | |           |       |     |       | | |         |         |
   0|.|1|0 1 1 1 1 0|. . . .|. . .|1 0 0 0|0|1|. . . . .|. . . . .|
    | |             |       |             |   |         |
    | `-U           |       `-immb        |   `-Rn      `-Rd
    `-Q             `-immh(!= 0000)       `-op
  
  
 
.SS Vector
 
 SQSHRUN{2}  <Vd>.<Tb>, <Vn>.<Ta>, #<shift>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 if immh == '0000' then SEE(asimdimm);
 if immh<3> == '1' then UNDEFINED;
 integer esize = 8 << HighestSetBit(immh);
 integer datasize = 64;
 integer part = UInt(Q);
 integer elements = datasize DIV esize;
 
 integer shift = (2 * esize) - UInt(immh:immb);
 boolean round = (op == '1');
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize*2) operand = V[n];
 bits(datasize) result;
 integer round_const = if round then (1 << (shift - 1)) else 0;
 integer element;
 boolean sat;
 
 for e = 0 to elements-1
     element = (SInt(Elem[operand, e, 2*esize]) + round_const) >> shift;
     (Elem[result, e, esize], sat) = UnsignedSatQ(element, esize);
     if sat then FPSR.QC = '1';
 
 Vpart[d, part] = result;
 

.SS Assembler Symbols

 2
  Encoded in Q
  Is the second and upper half specifier. If present it causes the operation to
  be performed on the upper 64 bits of the registers holding the narrower
  elements, and is

  Q 2         
  0 [absent]  
  1 [present] 

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <Tb>
  Encoded in immh:Q
  Is an arrangement specifier,

  immh Q <Tb>                                 
  0000 x SEE Advanced SIMD modified immediate 
  0001 0 8B                                   
  0001 1 16B                                  
  001x 0 4H                                   
  001x 1 8H                                   
  01xx 0 2S                                   
  01xx 1 4S                                   
  1xxx x RESERVED                             

 <Vn>
  Encoded in Rn
  Is the name of the SIMD&FP source register, encoded in the "Rn" field.

 <Ta>
  Encoded in immh
  Is an arrangement specifier,

  immh <Ta>                                 
  0000 SEE Advanced SIMD modified immediate 
  0001 8H                                   
  001x 4S                                   
  01xx 2D                                   
  1xxx RESERVED                             

 <Vb>
  Encoded in immh
  Is the destination width specifier,

  immh <Vb>     
  0000 RESERVED 
  0001 B        
  001x H        
  01xx S        
  1xxx RESERVED 

 <d>
  Encoded in Rd
  Is the number of the SIMD&FP destination register, in the "Rd" field.

 <Va>
  Encoded in immh
  Is the source width specifier,

  immh <Va>     
  0000 RESERVED 
  0001 H        
  001x S        
  01xx D        
  1xxx RESERVED 

 <n>
  Encoded in Rn
  Is the number of the first SIMD&FP source register, encoded in the "Rn" field.

 <shift>
  Encoded in immh:immb
  For the scalar variant: is the right shift amount, in the range 1 to the
  destination operand width in bits,

  immh <shift>              
  0000 RESERVED             
  0001 (16-UInt(immh:immb)) 
  001x (32-UInt(immh:immb)) 
  01xx (64-UInt(immh:immb)) 
  1xxx RESERVED             

 <shift>
  Encoded in immh:immb
  For the vector variant: is the right shift amount, in the range 1 to the
  destination element width in bits,

  immh <shift>                              
  0000 SEE Advanced SIMD modified immediate 
  0001 (16-UInt(immh:immb))                 
  001x (32-UInt(immh:immb))                 
  01xx (64-UInt(immh:immb))                 
  1xxx RESERVED                             



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize*2) operand = V[n];
 bits(datasize) result;
 integer round_const = if round then (1 << (shift - 1)) else 0;
 integer element;
 boolean sat;
 
 for e = 0 to elements-1
     element = (SInt(Elem[operand, e, 2*esize]) + round_const) >> shift;
     (Elem[result, e, esize], sat) = UnsignedSatQ(element, esize);
     if sat then FPSR.QC = '1';
 
 Vpart[d, part] = result;

