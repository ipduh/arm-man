.nh
.TH "UABAL, UABAL2 -- A64" "7" " "  "instruction" "advsimd"
.SS UABAL, UABAL2
 Unsigned Absolute difference and Accumulate Long

 Unsigned Absolute difference and Accumulate Long. This instruction subtracts
 the vector elements in the lower or upper half of the second source SIMD&FP
 register from the corresponding vector elements of the first source SIMD&FP
 register, and accumulates the absolute values of the results into the vector
 elements of the destination SIMD&FP register. The destination vector elements
 are twice as long as the source vector elements. All the values in this
 instruction are unsigned integer values.

 The UABAL instruction extracts each source vector from the lower half of each
 source register, while the UABAL2 instruction extracts each source vector from
 the upper half of each source register.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS Three registers, not all the same type - A64 - UABAL_asimddiff_L
 
                                                                   
       29                                12                        
     30 |              21              13 |                        
   31 | |        24  22 |        16  14 | |  10         5         0
    | | |         |   | |         |   | | |   |         |         |
   0|.|1|0 1 1 1 0|. .|1|. . . . .|0 1|0|1|0 0|. . . . .|. . . . .|
    | |           |     |             |       |         |
    | `-U         |     `-Rm          `-op    `-Rn      `-Rd
    `-Q           `-size
  
  
 
.SS Three registers, not all the same type
 
 UABAL{2}  <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 
 if size == '11' then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer datasize = 64;
 integer part = UInt(Q);
 integer elements = datasize DIV esize;
 
 boolean accumulate = (op == '0');
 boolean unsigned = (U == '1');
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize)   operand1 = Vpart[n, part];
 bits(datasize)   operand2 = Vpart[m, part];
 bits(2*datasize) result;
 integer element1;
 integer element2;
 bits(2*esize) absdiff;
 
 result = if accumulate then V[d] else Zeros();
 for e = 0 to elements-1
     element1 = Int(Elem[operand1, e, esize], unsigned);
     element2 = Int(Elem[operand2, e, esize], unsigned);
     absdiff = Abs(element1 - element2)<2*esize-1:0>;
     Elem[result, e, 2*esize] = Elem[result, e, 2*esize] + absdiff;
 V[d] = result;
 

.SS Assembler Symbols

 2
  Encoded in Q
  Is the second and upper half specifier. If present it causes the operation to
  be performed on the upper 64 bits of the registers holding the narrower
  elements, and is

  Q 2         
  0 [absent]  
  1 [present] 

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <Ta>
  Encoded in size
  Is an arrangement specifier,

  size <Ta>     
  00   8H       
  01   4S       
  10   2D       
  11   RESERVED 

 <Vn>
  Encoded in Rn
  Is the name of the first SIMD&FP source register, encoded in the "Rn" field.

 <Tb>
  Encoded in size:Q
  Is an arrangement specifier,

  size Q <Tb>     
  00   0 8B       
  00   1 16B      
  01   0 4H       
  01   1 8H       
  10   0 2S       
  10   1 4S       
  11   x RESERVED 

 <Vm>
  Encoded in Rm
  Is the name of the second SIMD&FP source register, encoded in the "Rm" field.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize)   operand1 = Vpart[n, part];
 bits(datasize)   operand2 = Vpart[m, part];
 bits(2*datasize) result;
 integer element1;
 integer element2;
 bits(2*esize) absdiff;
 
 result = if accumulate then V[d] else Zeros();
 for e = 0 to elements-1
     element1 = Int(Elem[operand1, e, esize], unsigned);
     element2 = Int(Elem[operand2, e, esize], unsigned);
     absdiff = Abs(element1 - element2)<2*esize-1:0>;
     Elem[result, e, 2*esize] = Elem[result, e, 2*esize] + absdiff;
 V[d] = result;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
