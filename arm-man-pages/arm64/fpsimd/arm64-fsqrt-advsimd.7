.nh
.TH "FSQRT (vector) -- A64" "7" " "  "instruction" "advsimd"
.SS FSQRT (vector)
 Floating-point Square Root (vector)

 Floating-point Square Root (vector). This instruction calculates the square
 root for each vector element in the source SIMD&FP register, places the result
 in a vector, and writes the vector to the destination SIMD&FP register.

 This instruction can generate a floating-point exception. Depending on the
 settings in FPCR, the exception results in either a flag being set in FPSR or a
 synchronous exception being generated. For more information, see Floating-point
 exception traps.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.


It has encodings from 2 classes: Half-precision and Single-precision and double-precision

.SS Half-precision - A64 - FSQRT_asimdmiscfp16_R
 
                                                                   
       29                                                          
     30 |          23                                              
   31 | |        24 |          17        12  10         5         0
    | | |         | |           |         |   |         |         |
   0|.|1|0 1 1 1 0|1|1 1 1 1 0 0|1 1 1 1 1|1 0|. . . . .|. . . . .|
    | |           |             |             |         |
    | `-U         `-a           `-opcode      `-Rn      `-Rd
    `-Q
  
  
 
.SS Half-precision
 
 FSQRT  <Vd>.<T>, <Vn>.<T>
 
 if !HaveFP16Ext() then UNDEFINED;
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 integer esize = 16;
 integer datasize = if Q == '1' then 128 else 64;
 integer elements = datasize DIV esize;
.SS Single-precision and double-precision - A64 - FSQRT_asimdmisc_R
 
                                                                   
       29            22                                            
     30 |          23 |                                            
   31 | |        24 | |        17        12  10         5         0
    | | |         | | |         |         |   |         |         |
   0|.|1|0 1 1 1 0|1|.|1 0 0 0 0|1 1 1 1 1|1 0|. . . . .|. . . . .|
    | |             |           |             |         |
    | `-U           `-sz        `-opcode      `-Rn      `-Rd
    `-Q
  
  
 
.SS Single-precision and double-precision
 
 FSQRT  <Vd>.<T>, <Vn>.<T>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 
 if sz:Q == '10' then UNDEFINED;
 integer esize = 32 << UInt(sz);
 integer datasize = if Q == '1' then 128 else 64;
 integer elements = datasize DIV esize;
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = V[n];
 bits(datasize) result;
 bits(esize) element;
 
 for e = 0 to elements-1
     element = Elem[operand, e, esize];
     Elem[result, e, esize] = FPSqrt(element, FPCR);
 
 V[d] = result;
 

.SS Assembler Symbols

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <T>
  Encoded in Q
  For the half-precision variant: is an arrangement specifier,

  Q <T> 
  0 4H  
  1 8H  

 <T>
  Encoded in sz:Q
  For the single-precision and double-precision variant: is an arrangement
  specifier,

  sz Q <T>      
  0  0 2S       
  0  1 4S       
  1  0 RESERVED 
  1  1 2D       

 <Vn>
  Encoded in Rn
  Is the name of the SIMD&FP source register, encoded in the "Rn" field.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize) operand = V[n];
 bits(datasize) result;
 bits(esize) element;
 
 for e = 0 to elements-1
     element = Elem[operand, e, esize];
     Elem[result, e, esize] = FPSqrt(element, FPCR);
 
 V[d] = result;

