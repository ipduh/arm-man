.nh
.TH "PMULL, PMULL2 -- A64" "7" " "  "instruction" "advsimd"
.SS PMULL, PMULL2
 Polynomial Multiply Long

 Polynomial Multiply Long. This instruction multiplies corresponding elements in
 the lower or upper half of the vectors of the two source SIMD&FP registers,
 places the results in a vector, and writes the vector to the destination
 SIMD&FP register. The destination vector elements are twice as long as the
 elements that are multiplied.

 For information about multiplying polynomials see Polynomial arithmetic over
 {0, 1}.

 The PMULL instruction extracts each source vector from the lower half of each
 source register, while the PMULL2 instruction extracts each source vector from
 the upper half of each source register.

 Depending on the settings in the CPACR_EL1, CPTR_EL2, and CPTR_EL3 registers,
 and the current Security state and Exception level, an attempt to execute the
 instruction might be trapped.



.SS Three registers, not all the same type - A64 - PMULL_asimddiff_L
 
                                                                   
       29                                                          
     30 |              21                                          
   31 | |        24  22 |        16      12  10         5         0
    | | |         |   | |         |       |   |         |         |
   0|.|0|0 1 1 1 0|. .|1|. . . . .|1 1 1 0|0 0|. . . . .|. . . . .|
    | |           |     |         |           |         |
    | `-U         |     `-Rm      `-opcode    `-Rn      `-Rd
    `-Q           `-size
  
  
 
.SS Three registers, not all the same type
 
 PMULL{2}  <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 
 if size == '01' || size == '10' then UNDEFINED;
 if size == '11' && !HaveBit128PMULLExt() then UNDEFINED;
 integer esize = 8 << UInt(size);
 integer datasize = 64;
 integer part = UInt(Q);
 integer elements = datasize DIV esize;
 
 CheckFPAdvSIMDEnabled64();
 bits(datasize)   operand1 = Vpart[n, part];
 bits(datasize)   operand2 = Vpart[m, part];
 bits(2*datasize) result;
 bits(esize) element1;
 bits(esize) element2;
 
 for e = 0 to elements-1
     element1 = Elem[operand1, e, esize];
     element2 = Elem[operand2, e, esize];
     Elem[result, e, 2*esize] = PolynomialMult(element1, element2);
 
 V[d] = result;
 

.SS Assembler Symbols

 2
  Encoded in Q
  Is the second and upper half specifier. If present it causes the operation to
  be performed on the upper 64 bits of the registers holding the narrower
  elements, and is

  Q 2         
  0 [absent]  
  1 [present] 

 <Vd>
  Encoded in Rd
  Is the name of the SIMD&FP destination register, encoded in the "Rd" field.

 <Ta>
  Encoded in size
  Is an arrangement specifier,

  size <Ta>     
  00   8H       
  01   RESERVED 
  10   RESERVED 
  11   1Q       

  The '1Q' arrangement is only allocated in an implementation that includes the
  Cryptographic Extension, and is otherwise RESERVED.

 <Vn>
  Encoded in Rn
  Is the name of the first SIMD&FP source register, encoded in the "Rn" field.

 <Tb>
  Encoded in size:Q
  Is an arrangement specifier,

  size Q <Tb>     
  00   0 8B       
  00   1 16B      
  01   x RESERVED 
  10   x RESERVED 
  11   0 1D       
  11   1 2D       

 <Vm>
  Encoded in Rm
  Is the name of the second SIMD&FP source register, encoded in the "Rm" field.



.SS Operation

 CheckFPAdvSIMDEnabled64();
 bits(datasize)   operand1 = Vpart[n, part];
 bits(datasize)   operand2 = Vpart[m, part];
 bits(2*datasize) result;
 bits(esize) element1;
 bits(esize) element2;
 
 for e = 0 to elements-1
     element1 = Elem[operand1, e, esize];
     element2 = Elem[operand2, e, esize];
     Elem[result, e, 2*esize] = PolynomialMult(element1, element2);
 
 V[d] = result;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
