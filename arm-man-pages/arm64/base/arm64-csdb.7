.nh
.TH "CSDB -- A64" "7" " "  "instruction" "system"
.SS CSDB
 Consumption of Speculative Data Barrier

 Consumption of Speculative Data Barrier is a memory barrier that controls
 speculative execution and data value prediction.

 No instruction other than branch instructions appearing in program order after
 the CSDB can be speculatively executed using the results of any:




.SS System - A64 - CSDB_HI_hints
 
                                                                   
                                                                   
                       21                                          
                     22 |  19    16      12       8     5         0
                      | |   |     |       |       |     |         |
   1 1 0 1 0 1 0 1 0 0|0|0 0|0 1 1|0 0 1 0|0 0 1 0|1 0 0|1 1 1 1 1|
                      | |   |     |       |       |     |
                      | |   `-op1 `-CRn   `-CRm   `-op2 `-Rt
                      | `-op0
                      `-L
  
  
 
.SS System
 
 CSDB
 
 SystemHintOp op;
 
 case CRm:op2 of
     when '0000 000' op = SystemHintOp_NOP;
     when '0000 001' op = SystemHintOp_YIELD;
     when '0000 010' op = SystemHintOp_WFE;
     when '0000 011' op = SystemHintOp_WFI;
     when '0000 100' op = SystemHintOp_SEV;
     when '0000 101' op = SystemHintOp_SEVL;
     when '0000 110'
         if !HaveDGHExt() then EndOfInstruction();                  // Instruction executes as NOP
         op = SystemHintOp_DGH;
     when '0000 111' SEE "XPACLRI";
     when '0001 xxx'
         case op2 of
             when '000' SEE "PACIA1716";
             when '010' SEE "PACIB1716";
             when '100' SEE "AUTIA1716";
             when '110' SEE "AUTIB1716";
             otherwise EndOfInstruction();                          // Instruction executes as NOP
     when '0010 000'
         if !HaveRASExt() then EndOfInstruction();                  // Instruction executes as NOP
         op = SystemHintOp_ESB;
     when '0010 001'
         if !HaveStatisticalProfiling() then EndOfInstruction();    // Instruction executes as NOP
         op = SystemHintOp_PSB;
     when '0010 010'
         if !HaveSelfHostedTrace() then EndOfInstruction();         // Instruction executes as NOP
         op = SystemHintOp_TSB;
     when '0010 100'
         op = SystemHintOp_CSDB;
     when '0011 xxx'
         case op2 of
             when '000' SEE "PACIAZ";
             when '001' SEE "PACIASP";
             when '010' SEE "PACIBZ";
             when '011' SEE "PACIBSP";
             when '100' SEE "AUTIAZ";
             when '101' SEE "AUTHASP";
             when '110' SEE "AUTIBZ";
             when '111' SEE "AUTIBSP";
     when '0100 xx0'
         op = SystemHintOp_BTI;
         // Check branch target compatibility between BTI instruction and PSTATE.BTYPE
         SetBTypeCompatible(BTypeCompatible_BTI(op2<2:1>));
     otherwise EndOfInstruction();                                 // Instruction executes as NOP
 
 case op of
     when SystemHintOp_YIELD
         Hint_Yield();
 
     when SystemHintOp_DGH
         Hint_DGH();
 
     when SystemHintOp_WFE
         if IsEventRegisterSet() then
             ClearEventRegister();
         else
             if PSTATE.EL == EL0 then
                 // Check for traps described by the OS which may be EL1 or EL2.
                 AArch64.CheckForWFxTrap(EL1, TRUE);
             if PSTATE.EL IN {EL0, EL1} && EL2Enabled() && !IsInHost() then
                 // Check for traps described by the Hypervisor.
                 AArch64.CheckForWFxTrap(EL2, TRUE);
             if HaveEL(EL3) && PSTATE.EL != EL3 then
                 // Check for traps described by the Secure Monitor.
                 AArch64.CheckForWFxTrap(EL3, TRUE);
             WaitForEvent();
 
     when SystemHintOp_WFI
         if !InterruptPending() then
             if PSTATE.EL == EL0 then
                 // Check for traps described by the OS which may be EL1 or EL2.
                 AArch64.CheckForWFxTrap(EL1, FALSE);
             if PSTATE.EL IN {EL0, EL1} && EL2Enabled() && !IsInHost() then
                 // Check for traps described by the Hypervisor.
                 AArch64.CheckForWFxTrap(EL2, FALSE);
             if HaveEL(EL3) && PSTATE.EL != EL3 then
                 // Check for traps described by the Secure Monitor.
                 AArch64.CheckForWFxTrap(EL3, FALSE);
             WaitForInterrupt();
 
     when SystemHintOp_SEV
         SendEvent();
 
     when SystemHintOp_SEVL
         SendEventLocal();
 
     when SystemHintOp_ESB
         SynchronizeErrors();
         AArch64.ESBOperation();
         if PSTATE.EL IN {EL0, EL1} && EL2Enabled() then AArch64.vESBOperation();
         TakeUnmaskedSErrorInterrupts();
 
     when SystemHintOp_PSB
         ProfilingSynchronizationBarrier();
 
     when SystemHintOp_TSB
         TraceSynchronizationBarrier();
 
     when SystemHintOp_CSDB
         ConsumptionOfSpeculativeDataBarrier();
 
     when SystemHintOp_BTI
         SetBTypeNext('00');
 
     otherwise // do nothing
 


.SS Operation

 case op of
     when SystemHintOp_YIELD
         Hint_Yield();
 
     when SystemHintOp_DGH
         Hint_DGH();
 
     when SystemHintOp_WFE
         if IsEventRegisterSet() then
             ClearEventRegister();
         else
             if PSTATE.EL == EL0 then
                 // Check for traps described by the OS which may be EL1 or EL2.
                 AArch64.CheckForWFxTrap(EL1, TRUE);
             if PSTATE.EL IN {EL0, EL1} && EL2Enabled() && !IsInHost() then
                 // Check for traps described by the Hypervisor.
                 AArch64.CheckForWFxTrap(EL2, TRUE);
             if HaveEL(EL3) && PSTATE.EL != EL3 then
                 // Check for traps described by the Secure Monitor.
                 AArch64.CheckForWFxTrap(EL3, TRUE);
             WaitForEvent();
 
     when SystemHintOp_WFI
         if !InterruptPending() then
             if PSTATE.EL == EL0 then
                 // Check for traps described by the OS which may be EL1 or EL2.
                 AArch64.CheckForWFxTrap(EL1, FALSE);
             if PSTATE.EL IN {EL0, EL1} && EL2Enabled() && !IsInHost() then
                 // Check for traps described by the Hypervisor.
                 AArch64.CheckForWFxTrap(EL2, FALSE);
             if HaveEL(EL3) && PSTATE.EL != EL3 then
                 // Check for traps described by the Secure Monitor.
                 AArch64.CheckForWFxTrap(EL3, FALSE);
             WaitForInterrupt();
 
     when SystemHintOp_SEV
         SendEvent();
 
     when SystemHintOp_SEVL
         SendEventLocal();
 
     when SystemHintOp_ESB
         SynchronizeErrors();
         AArch64.ESBOperation();
         if PSTATE.EL IN {EL0, EL1} && EL2Enabled() then AArch64.vESBOperation();
         TakeUnmaskedSErrorInterrupts();
 
     when SystemHintOp_PSB
         ProfilingSynchronizationBarrier();
 
     when SystemHintOp_TSB
         TraceSynchronizationBarrier();
 
     when SystemHintOp_CSDB
         ConsumptionOfSpeculativeDataBarrier();
 
     when SystemHintOp_BTI
         SetBTypeNext('00');
 
     otherwise // do nothing

