.nh
.TH "LDAPRB -- A64" "7" " "  "instruction" "general"
.SS LDAPRB
 Load-Acquire RCpc Register Byte

 Load-Acquire RCpc Register Byte derives an address from a base register value,
 loads a byte from the derived address in memory, zero-extends it and writes it
 to a register.

 The instruction has memory ordering semantics as described in Load-Acquire,
 Load-AcquirePC, and Store-Release, except that:


 This difference in memory ordering is not described in the pseudocode.

 For information about memory accesses, see Load/Store addressing modes.



.SS Integer - A64 - LDAPRB_32L_memop
 
                       21                                          
                     22 |                                          
             26    23 | |          15                              
     30    27 |  24 | | |        16 |    12  10         5         0
      |     | |   | | | |         | |     |   |         |         |
  |0 0|1 1 1|0|0 0|1|0|1|1 1 1 1 1|1|1 0 0|0 0|. . . . .|. . . . .|
  |         |     | |   |         | |         |         |
  `-size    `-V   | `-R `-Rs      | `-opc     `-Rn      `-Rt
                  `-A             `-o3
  
  
 
.SS Integer
 
 LDAPRB  <Wt>, [<Xn|SP> {,#0}]
 
 integer n = UInt(Rn);
 integer t = UInt(Rt);
 integer s = UInt(Rs);   // ignored by all loads and store-release
 
 AccType acctype = AccType_ORDERED;
 integer elsize = 8 << UInt(size);
 integer regsize = if elsize == 64 then 64 else 32;
 integer datasize = elsize;
 boolean tag_checked = n != 31;
 
 bits(64) address;
 bits(datasize) data;
 constant integer dbytes = datasize DIV 8;
 
 if HaveMTEExt() then
     SetTagCheckedInstruction(tag_checked);
 
 if n == 31 then
     CheckSPAlignment();
     address = SP[];
 else
     address = X[n];
 
 data = Mem[address, dbytes, acctype];
 X[t] = ZeroExtend(data, regsize);
 

.SS Assembler Symbols

 <Wt>
  Encoded in Rt
  Is the 32-bit name of the general-purpose register to be loaded, encoded in
  the "Rt" field.

 <Xn|SP>
  Encoded in Rn
  Is the 64-bit name of the general-purpose base register or stack pointer,
  encoded in the "Rn" field.



.SS Operation

 bits(64) address;
 bits(datasize) data;
 constant integer dbytes = datasize DIV 8;
 
 if HaveMTEExt() then
     SetTagCheckedInstruction(tag_checked);
 
 if n == 31 then
     CheckSPAlignment();
     address = SP[];
 else
     address = X[n];
 
 data = Mem[address, dbytes, acctype];
 X[t] = ZeroExtend(data, regsize);


.SS Operational Notes

 
 If PSTATE.DIT is 1, the timing of this instruction is insensitive to the value of the data being loaded or stored.
