.nh
.TH "SUBP -- A64" "7" " "  "instruction" "general"
.SS SUBP
 Subtract Pointer

 Subtract Pointer subtracts the 56-bit address held in the second source
 register from the 56-bit address held in the first source register, sign-
 extends the result to 64-bits, and writes the result to the destination
 register.



.SS Integer - A64 - SUBP_64S_dp_2src
 
                                       13                          
       29                            14 |    10                    
     30 |                          15 | |  11 |                    
   31 | |              21        16 | | |12 | |         5         0
    | | |               |         | | | | | | |         |         |
  |1|0|0|1 1 0 1 0 1 1 0|. . . . .|0|0|0|0|0|0|. . . . .|. . . . .|
  |   |                 |         | | | | | | |         |
  |   `-S               `-Xm      | | | | | | `-Xn      `-Xd
  `-sf                            | | | | | `-opcode<0>
                                  | | | | `-opcode<1>
                                  | | | `-opcode<2>
                                  | | `-opcode<3>
                                  | `-opcode<4>
                                  `-opcode<5>
  
  
 
.SS Integer
 
 SUBP  <Xd>, <Xn|SP>, <Xm|SP>
 
 integer d = UInt(Xd);
 integer n = UInt(Xn);
 integer m = UInt(Xm);
 boolean setflags = FALSE;
 
 bits(64) operand1 = if n == 31 then SP[] else X[n];
 bits(64) operand2 = if m == 31 then SP[] else X[m];
 operand1 = SignExtend(operand1<55:0>, 64);
 operand2 = SignExtend(operand2<55:0>, 64);
 
 bits(64) result;
 bits(4) nzcv;
 
 operand2 = NOT(operand2);
 (result, nzcv) = AddWithCarry(operand1, operand2, '1');
 
 if setflags then
     PSTATE.<N,Z,C,V> = nzcv;
 X[d] = result;
 

.SS Assembler Symbols

 <Xd>
  Encoded in Xd
  Is the 64-bit name of the general-purpose destination register, encoded in the
  "Xd" field.

 <Xn|SP>
  Encoded in Xn
  Is the 64-bit name of the first source general-purpose register or stack
  pointer, encoded in the "Xn" field.

 <Xm|SP>
  Encoded in Xm
  Is the 64-bit name of the second general-purpose source register or stack
  pointer, encoded in the "Xm" field.



.SS Operation

 bits(64) operand1 = if n == 31 then SP[] else X[n];
 bits(64) operand2 = if m == 31 then SP[] else X[m];
 operand1 = SignExtend(operand1<55:0>, 64);
 operand2 = SignExtend(operand2<55:0>, 64);
 
 bits(64) result;
 bits(4) nzcv;
 
 operand2 = NOT(operand2);
 (result, nzcv) = AddWithCarry(operand1, operand2, '1');
 
 if setflags then
     PSTATE.<N,Z,C,V> = nzcv;
 X[d] = result;

