.nh
.TH "EXTR -- A64" "7" " "  "instruction" "general"
.SS EXTR
 Extract register

 Extract register extracts a register from a pair of registers.



.SS Integer - A64 - general
 
                                                                   
                       21                                          
                     22 |                                          
   31  29          23 | |        16          10         5         0
    |   |           | | |         |           |         |         |
  |.|0 0|1 0 0 1 1 1|.|0|. . . . .|. . . . . .|. . . . .|. . . . .|
  | |               | | |         |           |         |
  | `-op21          | | `-Rm      `-imms      `-Rn      `-Rd
  `-sf              | `-o0
                    `-N
  
  
 
.SS 32-bit(sf == 0 && N == 0 && imms == 0xxxxx)
 
 EXTR  <Wd>, <Wn>, <Wm>, #<lsb>
.SS 64-bit(sf == 1 && N == 1)
 
 EXTR  <Xd>, <Xn>, <Xm>, #<lsb>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 integer datasize = if sf == '1' then 64 else 32;
 integer lsb;
 
 if N != sf then UNDEFINED;
 if sf == '0' && imms<5> == '1' then UNDEFINED;
 lsb = UInt(imms);
 
 bits(datasize) result;
 bits(datasize) operand1 = X[n];
 bits(datasize) operand2 = X[m];
 bits(2*datasize) concat = operand1:operand2;
 
 result = concat<lsb+datasize-1:lsb>;
 
 X[d] = result;
 

.SS Assembler Symbols

 <Wd>
  Encoded in Rd
  Is the 32-bit name of the general-purpose destination register, encoded in the
  "Rd" field.

 <Wn>
  Encoded in Rn
  Is the 32-bit name of the first general-purpose source register, encoded in
  the "Rn" field.

 <Wm>
  Encoded in Rm
  Is the 32-bit name of the second general-purpose source register, encoded in
  the "Rm" field.

 <Xd>
  Encoded in Rd
  Is the 64-bit name of the general-purpose destination register, encoded in the
  "Rd" field.

 <Xn>
  Encoded in Rn
  Is the 64-bit name of the first general-purpose source register, encoded in
  the "Rn" field.

 <Xm>
  Encoded in Rm
  Is the 64-bit name of the second general-purpose source register, encoded in
  the "Rm" field.

 <lsb>
  Encoded in imms
  For the 32-bit variant: is the least significant bit position from which to
  extract, in the range 0 to 31, encoded in the "imms" field.

 <lsb>
  Encoded in imms
  For the 64-bit variant: is the least significant bit position from which to
  extract, in the range 0 to 63, encoded in the "imms" field.



.SS Operation

 bits(datasize) result;
 bits(datasize) operand1 = X[n];
 bits(datasize) operand2 = X[m];
 bits(2*datasize) concat = operand1:operand2;
 
 result = concat<lsb+datasize-1:lsb>;
 
 X[d] = result;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
