.nh
.TH "ORR (immediate) -- A64" "7" " "  "instruction" "general"
.SS ORR (immediate)
 Bitwise OR (immediate)

 Bitwise OR (immediate) performs a bitwise (inclusive) OR of a register value
 and an immediate register value, and writes the result to the destination
 register.



.SS Not setting the condition flags - A64 - no_s
 
                                                                   
                                                                   
                     22                                            
   31  29          23 |          16          10         5         0
    |   |           | |           |           |         |         |
  |.|0 1|1 0 0 1 0 0|.|. . . . . .|. . . . . .|. . . . .|. . . . .|
  | |               | |           |           |         |
  | `-opc           | `-immr      `-imms      `-Rn      `-Rd
  `-sf              `-N
  
  
 
.SS 32-bit(sf == 0 && N == 0)
 
 ORR  <Wd|WSP>, <Wn>, #<imm>
.SS 64-bit(sf == 1)
 
 ORR  <Xd|SP>, <Xn>, #<imm>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer datasize = if sf == '1' then 64 else 32;
 boolean setflags;
 LogicalOp op;
 case opc of
     when '00' op = LogicalOp_AND; setflags = FALSE;
     when '01' op = LogicalOp_ORR; setflags = FALSE;
     when '10' op = LogicalOp_EOR; setflags = FALSE;
     when '11' op = LogicalOp_AND; setflags = TRUE;
 
 bits(datasize) imm;
 if sf == '0' && N != '0' then UNDEFINED;
 (imm, -) = DecodeBitMasks(N, imms, immr, TRUE);
 
 bits(datasize) result;
 bits(datasize) operand1 = X[n];
 bits(datasize) operand2 = imm;
 
 case op of
     when LogicalOp_AND result = operand1 AND operand2;
     when LogicalOp_ORR result = operand1 OR  operand2;
     when LogicalOp_EOR result = operand1 EOR operand2;
 
 if setflags then
     PSTATE.<N,Z,C,V> = result<datasize-1>:IsZeroBit(result):'00';
 
 if d == 31 && !setflags then
     SP[] = result;
 else
     X[d] = result;
 

.SS Assembler Symbols

 <Wd|WSP>
  Encoded in Rd
  Is the 32-bit name of the destination general-purpose register or stack
  pointer, encoded in the "Rd" field.

 <Wn>
  Encoded in Rn
  Is the 32-bit name of the general-purpose source register, encoded in the "Rn"
  field.

 <Xd|SP>
  Encoded in Rd
  Is the 64-bit name of the destination general-purpose register or stack
  pointer, encoded in the "Rd" field.

 <Xn>
  Encoded in Rn
  Is the 64-bit name of the general-purpose source register, encoded in the "Rn"
  field.

 <imm>
  Encoded in immr:imms
  For the 32-bit variant: is the bitmask immediate, encoded in "imms:immr".

 <imm>
  Encoded in N:immr:imms
  For the 64-bit variant: is the bitmask immediate, encoded in "N:imms:immr".



.SS Operation

 bits(datasize) result;
 bits(datasize) operand1 = X[n];
 bits(datasize) operand2 = imm;
 
 case op of
     when LogicalOp_AND result = operand1 AND operand2;
     when LogicalOp_ORR result = operand1 OR  operand2;
     when LogicalOp_EOR result = operand1 EOR operand2;
 
 if setflags then
     PSTATE.<N,Z,C,V> = result<datasize-1>:IsZeroBit(result):'00';
 
 if d == 31 && !setflags then
     SP[] = result;
 else
     X[d] = result;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
