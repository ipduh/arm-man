.nh
.TH "LDRAA, LDRAB -- A64" "7" " "  "instruction" ""
.SS LDRAA, LDRAB
 Load Register, with pointer authentication

 Load Register, with pointer authentication. This instruction authenticates an
 address from a base register using a modifier of zero and the specified key,
 adds an immediate offset to the authenticated address, and loads a 64-bit
 doubleword from memory at this resulting address into a register.

 Key A is used for LDRAA, and key B is used for LDRAB.

 If the authentication passes, the PE behaves the same as for an LDR
 instruction. If the authentication fails, a Translation fault is generated.

 The authenticated address is not written back to the base register, unless the
 pre-indexed variant of the instruction is used. In this case, the address that
 is written back to the base register does not include the pointer
 authentication code.

 For information about memory accesses, see Load/Store addressing modes.



.SS Unscaled offset - A64 - base_plus_offset
 
                       21                                          
                     22 |                    10                    
             26    23 | |                  11 |                    
     30    27 |  24 | | |                12 | |         5         0
      |     | |   | | | |                 | | |         |         |
  |1 1|1 1 1|0|0 0|.|.|1|. . . . . . . . .|.|1|. . . . .|. . . . .|
  |         |     | |   |                 |   |         |
  `-size    `-V   | `-S `-imm9            `-W `-Rn      `-Rt
                  `-M
  
  
 
.SS Key A, offset(M == 0 && W == 0)
 
 LDRAA  <Xt>, [<Xn|SP>{, #<simm>}]
.SS Key A, pre-indexed(M == 0 && W == 1)
 
 LDRAA  <Xt>, [<Xn|SP>{, #<simm>}]!
.SS Key B, offset(M == 1 && W == 0)
 
 LDRAB  <Xt>, [<Xn|SP>{, #<simm>}]
.SS Key B, pre-indexed(M == 1 && W == 1)
 
 LDRAB  <Xt>, [<Xn|SP>{, #<simm>}]!
 
 if !HavePACExt() || size != '11' then UNDEFINED;
 integer t = UInt(Rt);
 integer n = UInt(Rn);
 boolean wback = (W == '1');
 boolean use_key_a = (M == '0');
 bits(10) S10 = S:imm9;
 integer scale = 3;
 bits(64) offset = LSL(SignExtend(S10, 64), scale);
 boolean tag_checked = wback || n != 31;
 
 bits(64) address;
 bits(64) data;
 boolean wb_unknown = FALSE;
 boolean auth_then_branch = TRUE;
 
 if HaveMTEExt() then
     SetTagCheckedInstruction(tag_checked);
 
 if wback && n == t && n != 31 then
     c = ConstrainUnpredictable(Unpredictable_WBOVERLAPLD);
     assert c IN {Constraint_WBSUPPRESS, Constraint_UNKNOWN, Constraint_UNDEF, Constraint_NOP};
     case c of
         when Constraint_WBSUPPRESS wback = FALSE;       // writeback is suppressed
         when Constraint_UNKNOWN    wb_unknown = TRUE;   // writeback is UNKNOWN
         when Constraint_UNDEF      UNDEFINED;
         when Constraint_NOP        EndOfInstruction();
 
 if n == 31 then
     address = SP[];
 else
     address = X[n];
 
 if use_key_a then
     address = AuthDA(address, X[31], auth_then_branch);
 else
     address = AuthDB(address, X[31], auth_then_branch);
 
 if n == 31 then
     CheckSPAlignment();
 
 address = address + offset;
 data = Mem[address, 8, AccType_NORMAL];
 X[t] = data;
 
 if wback then
     if wb_unknown then
         address = bits(64) UNKNOWN;
     if n == 31 then
         SP[] = address;
     else
         X[n] = address;
 

.SS Assembler Symbols

 <Xt>
  Encoded in Rt
  Is the 64-bit name of the general-purpose register to be transferred, encoded
  in the "Rt" field.

 <Xn|SP>
  Encoded in Rn
  Is the 64-bit name of the general-purpose base register or stack pointer,
  encoded in the "Rn" field.

 <simm>
  Encoded in S:imm9
  Is the optional signed immediate byte offset, a multiple of 8 in the range
  -4096 to 4088, defaulting to 0 and encoded in the "S:imm9" field as <simm>/8.



.SS Operation

 bits(64) address;
 bits(64) data;
 boolean wb_unknown = FALSE;
 boolean auth_then_branch = TRUE;
 
 if HaveMTEExt() then
     SetTagCheckedInstruction(tag_checked);
 
 if wback && n == t && n != 31 then
     c = ConstrainUnpredictable(Unpredictable_WBOVERLAPLD);
     assert c IN {Constraint_WBSUPPRESS, Constraint_UNKNOWN, Constraint_UNDEF, Constraint_NOP};
     case c of
         when Constraint_WBSUPPRESS wback = FALSE;       // writeback is suppressed
         when Constraint_UNKNOWN    wb_unknown = TRUE;   // writeback is UNKNOWN
         when Constraint_UNDEF      UNDEFINED;
         when Constraint_NOP        EndOfInstruction();
 
 if n == 31 then
     address = SP[];
 else
     address = X[n];
 
 if use_key_a then
     address = AuthDA(address, X[31], auth_then_branch);
 else
     address = AuthDB(address, X[31], auth_then_branch);
 
 if n == 31 then
     CheckSPAlignment();
 
 address = address + offset;
 data = Mem[address, 8, AccType_NORMAL];
 X[t] = data;
 
 if wback then
     if wb_unknown then
         address = bits(64) UNKNOWN;
     if n == 31 then
         SP[] = address;
     else
         X[n] = address;


.SS Operational Notes

 
 If PSTATE.DIT is 1, the timing of this instruction is insensitive to the value of the data being loaded or stored.
