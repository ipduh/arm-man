.nh
.TH "STLURH -- A64" "7" " "  "instruction" "general"
.SS STLURH
 Store-Release Register Halfword (unscaled)

 Store-Release Register Halfword (unscaled) calculates an address from a base
 register value and an immediate offset, and stores a halfword to the calculated
 address, from a 32-bit register.

 The instruction has memory ordering semantics as described in Load-Acquire,
 Load-AcquirePC, and Store-Release

 For information about memory accesses, see Load/Store addressing modes.



.SS Unscaled offset - A64 - STLURH_32_ldapstl_unscaled
 
                                                                   
                                                                   
                       21                                          
     30          24  22 |                12  10         5         0
      |           |   | |                 |   |         |         |
  |0 1|0 1 1 0 0 1|0 0|0|. . . . . . . . .|0 0|. . . . .|. . . . .|
  |               |     |                     |         |
  `-size          `-opc `-imm9                `-Rn      `-Rt
  
  
 
.SS Unscaled offset
 
 STLURH  <Wt>, [<Xn|SP>{, #<simm>}]
 
 boolean wback = FALSE;
 boolean postindex = FALSE;
 integer scale = UInt(size);
 bits(64) offset = SignExtend(imm9, 64);
 
 integer n = UInt(Rn);
 integer t = UInt(Rt);
 AccType acctype = AccType_ORDERED;
 MemOp memop;
 boolean signed;
 integer regsize;
 
 if opc<1> == '0' then
     // store or zero-extending load
     memop = if opc<0> == '1' then MemOp_LOAD else MemOp_STORE;
     regsize = if size == '11' then 64 else 32;
     signed = FALSE;
 else
     if size == '11' then
         memop = MemOp_PREFETCH;
         if opc<0> == '1' then UNDEFINED;
     else
         // sign-extending load
         memop = MemOp_LOAD;
         if size == '10' && opc<0> == '1' then UNDEFINED;
         regsize = if opc<0> == '1' then 32 else 64;
         signed = TRUE;
 
 integer datasize = 8 << scale;
 boolean tag_checked = memop != MemOp_PREFETCH && (wback || n != 31);
 
 if HaveMTEExt() then
     SetTagCheckedInstruction(tag_checked);
 
 bits(64) address;
 bits(datasize) data;
 
 boolean wb_unknown = FALSE;
 boolean rt_unknown = FALSE;
 
 if memop == MemOp_LOAD && wback && n == t && n != 31 then
     c = ConstrainUnpredictable(Unpredictable_WBOVERLAPLD);
     assert c IN {Constraint_WBSUPPRESS, Constraint_UNKNOWN, Constraint_UNDEF, Constraint_NOP};
     case c of
         when Constraint_WBSUPPRESS wback = FALSE;       // writeback is suppressed
         when Constraint_UNKNOWN    wb_unknown = TRUE;   // writeback is UNKNOWN
         when Constraint_UNDEF      UNDEFINED;
         when Constraint_NOP        EndOfInstruction();
 
 if memop == MemOp_STORE && wback && n == t && n != 31 then
     c = ConstrainUnpredictable(Unpredictable_WBOVERLAPST);
     assert c IN {Constraint_NONE, Constraint_UNKNOWN, Constraint_UNDEF, Constraint_NOP};
     case c of
         when Constraint_NONE       rt_unknown = FALSE;  // value stored is original value
         when Constraint_UNKNOWN    rt_unknown = TRUE;   // value stored is UNKNOWN
         when Constraint_UNDEF      UNDEFINED;
         when Constraint_NOP        EndOfInstruction();
 
 if n == 31 then
     if memop != MemOp_PREFETCH then CheckSPAlignment();
     address = SP[];
 else
     address = X[n];
 
 if ! postindex then
     address = address + offset;
 
 case memop of
     when MemOp_STORE
         if rt_unknown then
             data = bits(datasize) UNKNOWN;
         else
             data = X[t];
         Mem[address, datasize DIV 8, acctype] = data;
 
     when MemOp_LOAD
         data = Mem[address, datasize DIV 8, acctype];
         if signed then
             X[t] = SignExtend(data, regsize);
         else
             X[t] = ZeroExtend(data, regsize);
 
     when MemOp_PREFETCH
         Prefetch(address, t<4:0>);
 
 if wback then
     if wb_unknown then
         address = bits(64) UNKNOWN;
     elsif postindex then
         address = address + offset;
     if n == 31 then
         SP[] = address;
     else
         X[n] = address;
 

.SS Assembler Symbols

 <Wt>
  Encoded in Rt
  Is the 32-bit name of the general-purpose register to be transferred, encoded
  in the "Rt" field.

 <Xn|SP>
  Encoded in Rn
  Is the 64-bit name of the general-purpose base register or stack pointer,
  encoded in the "Rn" field.

 <simm>
  Encoded in imm9
  Is the optional signed immediate byte offset, in the range -256 to 255,
  defaulting to 0 and encoded in the "imm9" field.



.SS Operation

 if HaveMTEExt() then
     SetTagCheckedInstruction(tag_checked);
 
 bits(64) address;
 bits(datasize) data;
 
 boolean wb_unknown = FALSE;
 boolean rt_unknown = FALSE;
 
 if memop == MemOp_LOAD && wback && n == t && n != 31 then
     c = ConstrainUnpredictable(Unpredictable_WBOVERLAPLD);
     assert c IN {Constraint_WBSUPPRESS, Constraint_UNKNOWN, Constraint_UNDEF, Constraint_NOP};
     case c of
         when Constraint_WBSUPPRESS wback = FALSE;       // writeback is suppressed
         when Constraint_UNKNOWN    wb_unknown = TRUE;   // writeback is UNKNOWN
         when Constraint_UNDEF      UNDEFINED;
         when Constraint_NOP        EndOfInstruction();
 
 if memop == MemOp_STORE && wback && n == t && n != 31 then
     c = ConstrainUnpredictable(Unpredictable_WBOVERLAPST);
     assert c IN {Constraint_NONE, Constraint_UNKNOWN, Constraint_UNDEF, Constraint_NOP};
     case c of
         when Constraint_NONE       rt_unknown = FALSE;  // value stored is original value
         when Constraint_UNKNOWN    rt_unknown = TRUE;   // value stored is UNKNOWN
         when Constraint_UNDEF      UNDEFINED;
         when Constraint_NOP        EndOfInstruction();
 
 if n == 31 then
     if memop != MemOp_PREFETCH then CheckSPAlignment();
     address = SP[];
 else
     address = X[n];
 
 if ! postindex then
     address = address + offset;
 
 case memop of
     when MemOp_STORE
         if rt_unknown then
             data = bits(datasize) UNKNOWN;
         else
             data = X[t];
         Mem[address, datasize DIV 8, acctype] = data;
 
     when MemOp_LOAD
         data = Mem[address, datasize DIV 8, acctype];
         if signed then
             X[t] = SignExtend(data, regsize);
         else
             X[t] = ZeroExtend(data, regsize);
 
     when MemOp_PREFETCH
         Prefetch(address, t<4:0>);
 
 if wback then
     if wb_unknown then
         address = bits(64) UNKNOWN;
     elsif postindex then
         address = address + offset;
     if n == 31 then
         SP[] = address;
     else
         X[n] = address;


.SS Operational Notes

 
 If PSTATE.DIT is 1, the timing of this instruction is insensitive to the value of the data being loaded or stored.
