.nh
.TH "CRC32CB, CRC32CH, CRC32CW, CRC32CX -- A64" "7" " "  "instruction" "general"
.SS CRC32CB, CRC32CH, CRC32CW, CRC32CX
 CRC32C checksum

 CRC32 checksum performs a cyclic redundancy check (CRC) calculation on a value
 held in a general-purpose register. It takes an input CRC value in the first
 source operand, performs a CRC on the input value in the second source operand,
 and returns the output CRC value. The second source operand can be 8, 16, 32,
 or 64 bits. To align with common usage, the bit order of the values is reversed
 as part of the operation, and the polynomial 0x1EDC6F41 is used for the CRC
 calculation.

 In Armv8-A, this is an optional instruction, and in Armv8.1 it is mandatory for
 all implementations to implement it.



.SS CRC - A64
 
                                                                   
       29                                                          
     30 |                                12                        
   31 | |              21        16    13 |  10         5         0
    | | |               |         |     | |   |         |         |
  |.|0|0|1 1 0 1 0 1 1 0|. . . . .|0 1 0|1|. .|. . . . .|. . . . .|
  | | |                 |         |     | |   |         |
  | | `-S               `-Rm      |     | |   `-Rn      `-Rd
  | `-op                          |     | `-sz
  `-sf                            |     `-C
                                  `-opcode2<5:3>
  
  
 
.SS CRC32CB(sf == 0 && sz == 00)
 
 CRC32CB  <Wd>, <Wn>, <Wm>
.SS CRC32CH(sf == 0 && sz == 01)
 
 CRC32CH  <Wd>, <Wn>, <Wm>
.SS CRC32CW(sf == 0 && sz == 10)
 
 CRC32CW  <Wd>, <Wn>, <Wm>
.SS CRC32CX(sf == 1 && sz == 11)
 
 CRC32CX  <Wd>, <Wn>, <Xm>
 
 if !HaveCRCExt() then UNDEFINED;
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 if sf == '1' && sz != '11' then UNDEFINED;
 if sf == '0' && sz == '11' then UNDEFINED;
 integer size = 8 << UInt(sz);   // 2-bit size field -> 8, 16, 32, 64
 boolean crc32c = (C == '1');
 
 bits(32)      acc     = X[n];   // accumulator
 bits(size)    val     = X[m];   // input value
 bits(32)      poly    = (if crc32c then 0x1EDC6F41 else 0x04C11DB7)<31:0>;
 
 bits(32+size) tempacc = BitReverse(acc) : Zeros(size);
 bits(size+32) tempval = BitReverse(val) : Zeros(32);
 
 // Poly32Mod2 on a bitstring does a polynomial Modulus over {0,1} operation
 X[d] = BitReverse(Poly32Mod2(tempacc EOR tempval, poly));
 

.SS Assembler Symbols

 <Wd>
  Encoded in Rd
  Is the 32-bit name of the general-purpose accumulator output register, encoded
  in the "Rd" field.

 <Wn>
  Encoded in Rn
  Is the 32-bit name of the general-purpose accumulator input register, encoded
  in the "Rn" field.

 <Xm>
  Encoded in Rm
  Is the 64-bit name of the general-purpose data source register, encoded in the
  "Rm" field.

 <Wm>
  Encoded in Rm
  Is the 32-bit name of the general-purpose data source register, encoded in the
  "Rm" field.



.SS Operation

 bits(32)      acc     = X[n];   // accumulator
 bits(size)    val     = X[m];   // input value
 bits(32)      poly    = (if crc32c then 0x1EDC6F41 else 0x04C11DB7)<31:0>;
 
 bits(32+size) tempacc = BitReverse(acc) : Zeros(size);
 bits(size+32) tempval = BitReverse(val) : Zeros(32);
 
 // Poly32Mod2 on a bitstring does a polynomial Modulus over {0,1} operation
 X[d] = BitReverse(Poly32Mod2(tempacc EOR tempval, poly));


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
