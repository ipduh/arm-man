.nh
.TH "PRFM (immediate) -- A64" "7" " "  "instruction" "general"
.SS PRFM (immediate)
 Prefetch Memory (immediate)

 Prefetch Memory (immediate) signals the memory system that data memory accesses
 from a specified address are likely to occur in the near future. The memory
 system can respond by taking actions that are expected to speed up the memory
 accesses when they do occur, such as preloading the cache line containing the
 specified address into one or more caches.

 The effect of an PRFM instruction is implementation defined. For more
 information, see Prefetch memory.

 For information about memory accesses, see Load/Store addressing modes.



.SS Unsigned offset - A64 - PRFM_P_ldst_pos
 
                                                                   
                                                                   
             26                                                    
     30    27 |  24  22                      10         5         0
      |     | |   |   |                       |         |         |
  |1 1|1 1 1|0|0 1|1 0|. . . . . . . . . . . .|. . . . .|. . . . .|
  |         |     |   |                       |         |
  `-size    `-V   |   `-imm12                 `-Rn      `-Rt
                  `-opc
  
  
 
.SS Unsigned offset
 
 PRFM  (<prfop>|#<imm5>), [<Xn|SP>{, #<pimm>}]
 
 boolean wback = FALSE;
 boolean postindex = FALSE;
 integer scale = UInt(size);
 bits(64) offset = LSL(ZeroExtend(imm12, 64), scale);
 
 integer n = UInt(Rn);
 integer t = UInt(Rt);
 AccType acctype = AccType_NORMAL;
 MemOp memop;
 boolean signed;
 integer regsize;
 
 if opc<1> == '0' then
     // store or zero-extending load
     memop = if opc<0> == '1' then MemOp_LOAD else MemOp_STORE;
     regsize = if size == '11' then 64 else 32;
     signed = FALSE;
 else
     if size == '11' then
         memop = MemOp_PREFETCH;
         if opc<0> == '1' then UNDEFINED;
     else
         // sign-extending load
         memop = MemOp_LOAD;
         if size == '10' && opc<0> == '1' then UNDEFINED;
         regsize = if opc<0> == '1' then 32 else 64;
         signed = TRUE;
 
 integer datasize = 8 << scale;
 boolean tag_checked = memop != MemOp_PREFETCH && (wback || n != 31);
 
 if HaveMTEExt() then
     SetTagCheckedInstruction(tag_checked);
 
 bits(64) address;
 bits(datasize) data;
 
 boolean wb_unknown = FALSE;
 boolean rt_unknown = FALSE;
 
 if memop == MemOp_LOAD && wback && n == t && n != 31 then
     c = ConstrainUnpredictable(Unpredictable_WBOVERLAPLD);
     assert c IN {Constraint_WBSUPPRESS, Constraint_UNKNOWN, Constraint_UNDEF, Constraint_NOP};
     case c of
         when Constraint_WBSUPPRESS wback = FALSE;       // writeback is suppressed
         when Constraint_UNKNOWN    wb_unknown = TRUE;   // writeback is UNKNOWN
         when Constraint_UNDEF      UNDEFINED;
         when Constraint_NOP        EndOfInstruction();
 
 if memop == MemOp_STORE && wback && n == t && n != 31 then
     c = ConstrainUnpredictable(Unpredictable_WBOVERLAPST);
     assert c IN {Constraint_NONE, Constraint_UNKNOWN, Constraint_UNDEF, Constraint_NOP};
     case c of
         when Constraint_NONE       rt_unknown = FALSE;  // value stored is original value
         when Constraint_UNKNOWN    rt_unknown = TRUE;   // value stored is UNKNOWN
         when Constraint_UNDEF      UNDEFINED;
         when Constraint_NOP        EndOfInstruction();
 
 if n == 31 then
     if memop != MemOp_PREFETCH then CheckSPAlignment();
     address = SP[];
 else
     address = X[n];
 
 if ! postindex then
     address = address + offset;
 
 case memop of
     when MemOp_STORE
         if rt_unknown then
             data = bits(datasize) UNKNOWN;
         else
             data = X[t];
         Mem[address, datasize DIV 8, acctype] = data;
 
     when MemOp_LOAD
         data = Mem[address, datasize DIV 8, acctype];
         if signed then
             X[t] = SignExtend(data, regsize);
         else
             X[t] = ZeroExtend(data, regsize);
 
     when MemOp_PREFETCH
         Prefetch(address, t<4:0>);
 
 if wback then
     if wb_unknown then
         address = bits(64) UNKNOWN;
     elsif postindex then
         address = address + offset;
     if n == 31 then
         SP[] = address;
     else
         X[n] = address;
 

.SS Assembler Symbols

 <prfop>
  Encoded in Rt
  Is the prefetch operation, defined as <type><target><policy>.           <type>
  is one of:                                       PLDPrefetch for load, encoded
  in the "Rt<4:3>" field as 0b00.
  PLIPreload instructions, encoded in the "Rt<4:3>" field as 0b01.
  PSTPrefetch for store, encoded in the "Rt<4:3>" field as 0b10.
  <target> is one of:                                       L1Level 1 cache,
  encoded in the "Rt<2:1>" field as 0b00.
  L2Level 2 cache, encoded in the "Rt<2:1>" field as 0b01.
  L3Level 3 cache, encoded in the "Rt<2:1>" field as 0b10.
  <policy> is one of:                                       KEEPRetained or
  temporal prefetch, allocated in the cache normally. Encoded in the "Rt<0>"
  field as 0.                                         STRMStreaming or non-
  temporal prefetch, for data that is used only once. Encoded in the "Rt<0>"
  field as 1.                                   For more information on these
  prefetch operations, see Prefetch memory.           For other encodings of the
  "Rt" field, use <imm5>.

 <imm5>
  Encoded in Rt
  Is the prefetch operation encoding as an immediate, in the range 0 to 31,
  encoded in the "Rt" field.           This syntax is only for encodings that
  are not accessible using <prfop>.

 <Xn|SP>
  Encoded in Rn
  Is the 64-bit name of the general-purpose base register or stack pointer,
  encoded in the "Rn" field.

 <pimm>
  Encoded in imm12
  Is the optional positive immediate byte offset, a multiple of 8 in the range 0
  to 32760, defaulting to 0 and encoded in the "imm12" field as <pimm>/8.



.SS Operation

 if HaveMTEExt() then
     SetTagCheckedInstruction(tag_checked);
 
 bits(64) address;
 bits(datasize) data;
 
 boolean wb_unknown = FALSE;
 boolean rt_unknown = FALSE;
 
 if memop == MemOp_LOAD && wback && n == t && n != 31 then
     c = ConstrainUnpredictable(Unpredictable_WBOVERLAPLD);
     assert c IN {Constraint_WBSUPPRESS, Constraint_UNKNOWN, Constraint_UNDEF, Constraint_NOP};
     case c of
         when Constraint_WBSUPPRESS wback = FALSE;       // writeback is suppressed
         when Constraint_UNKNOWN    wb_unknown = TRUE;   // writeback is UNKNOWN
         when Constraint_UNDEF      UNDEFINED;
         when Constraint_NOP        EndOfInstruction();
 
 if memop == MemOp_STORE && wback && n == t && n != 31 then
     c = ConstrainUnpredictable(Unpredictable_WBOVERLAPST);
     assert c IN {Constraint_NONE, Constraint_UNKNOWN, Constraint_UNDEF, Constraint_NOP};
     case c of
         when Constraint_NONE       rt_unknown = FALSE;  // value stored is original value
         when Constraint_UNKNOWN    rt_unknown = TRUE;   // value stored is UNKNOWN
         when Constraint_UNDEF      UNDEFINED;
         when Constraint_NOP        EndOfInstruction();
 
 if n == 31 then
     if memop != MemOp_PREFETCH then CheckSPAlignment();
     address = SP[];
 else
     address = X[n];
 
 if ! postindex then
     address = address + offset;
 
 case memop of
     when MemOp_STORE
         if rt_unknown then
             data = bits(datasize) UNKNOWN;
         else
             data = X[t];
         Mem[address, datasize DIV 8, acctype] = data;
 
     when MemOp_LOAD
         data = Mem[address, datasize DIV 8, acctype];
         if signed then
             X[t] = SignExtend(data, regsize);
         else
             X[t] = ZeroExtend(data, regsize);
 
     when MemOp_PREFETCH
         Prefetch(address, t<4:0>);
 
 if wback then
     if wb_unknown then
         address = bits(64) UNKNOWN;
     elsif postindex then
         address = address + offset;
     if n == 31 then
         SP[] = address;
     else
         X[n] = address;

