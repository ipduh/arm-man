.nh
.TH "ADD (immediate) -- A64" "7" " "  "instruction" "general"
.SS ADD (immediate)
 Add (immediate)

 Add (immediate) adds a register value and an optionally-shifted immediate
 value, and writes the result to the destination register.



.SS Not setting the condition flags - A64 - no_s
 
                                                                   
       29                                                          
     30 |            22                                            
   31 | |          23 |                      10         5         0
    | | |           | |                       |         |         |
  |.|0|0|1 0 0 0 1 0|.|. . . . . . . . . . . .|. . . . .|. . . . .|
  | | |             | |                       |         |
  | | `-S           | `-imm12                 `-Rn      `-Rd
  | `-op            `-sh
  `-sf
  
  
 
.SS 32-bit(sf == 0)
 
 ADD  <Wd|WSP>, <Wn|WSP>, #<imm>{, <shift>}
.SS 64-bit(sf == 1)
 
 ADD  <Xd|SP>, <Xn|SP>, #<imm>{, <shift>}
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer datasize = if sf == '1' then 64 else 32;
 boolean sub_op = (op == '1');
 boolean setflags = (S == '1');
 bits(datasize) imm;
 
 case sh of
     when '0' imm = ZeroExtend(imm12, datasize);
     when '1' imm = ZeroExtend(imm12 : Zeros(12), datasize);
 
 bits(datasize) result;
 bits(datasize) operand1 = if n == 31 then SP[] else X[n];
 bits(datasize) operand2 = imm;
 bits(4) nzcv;
 bit carry_in;
 
 if sub_op then
     operand2 = NOT(operand2);
     carry_in = '1';
 else
     carry_in = '0';
 
 (result, nzcv) = AddWithCarry(operand1, operand2, carry_in);
 
 if setflags then 
     PSTATE.<N,Z,C,V> = nzcv;
 
 if d == 31 && !setflags then
     SP[] = result;
 else
     X[d] = result;
 

.SS Assembler Symbols

 <Wd|WSP>
  Encoded in Rd
  Is the 32-bit name of the destination general-purpose register or stack
  pointer, encoded in the "Rd" field.

 <Wn|WSP>
  Encoded in Rn
  Is the 32-bit name of the source general-purpose register or stack pointer,
  encoded in the "Rn" field.

 <Xd|SP>
  Encoded in Rd
  Is the 64-bit name of the destination general-purpose register or stack
  pointer, encoded in the "Rd" field.

 <Xn|SP>
  Encoded in Rn
  Is the 64-bit name of the source general-purpose register or stack pointer,
  encoded in the "Rn" field.

 <imm>
  Encoded in imm12
  Is an unsigned immediate, in the range 0 to 4095, encoded in the "imm12"
  field.

 <shift>
  Encoded in sh
  Is the optional left shift to apply to the immediate, defaulting to LSL #0 and

  sh <shift> 
  0  LSL #0  
  1  LSL #12 



.SS Operation

 bits(datasize) result;
 bits(datasize) operand1 = if n == 31 then SP[] else X[n];
 bits(datasize) operand2 = imm;
 bits(4) nzcv;
 bit carry_in;
 
 if sub_op then
     operand2 = NOT(operand2);
     carry_in = '1';
 else
     carry_in = '0';
 
 (result, nzcv) = AddWithCarry(operand1, operand2, carry_in);
 
 if setflags then 
     PSTATE.<N,Z,C,V> = nzcv;
 
 if d == 31 && !setflags then
     SP[] = result;
 else
     X[d] = result;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
