.nh
.TH "SMULH -- A64" "7" " "  "instruction" "general"
.SS SMULH
 Signed Multiply High

 Signed Multiply High multiplies two 64-bit register values, and writes
 bits[127:64] of the 128-bit result to the 64-bit destination register.



.SS 64-bit - A64 - SMULH_64_dp_3src
 
                                                                   
                                                                   
                   23              15                              
   31  29        24 |  21        16 |        10         5         0
    |   |         | |   |         | |         |         |         |
  |1|0 0|1 1 0 1 1|0|1 0|. . . . .|0|1 1 1 1 1|. . . . .|. . . . .|
  | |             |     |         | |         |         |
  | `-op54        `-U   `-Rm      | `-Ra      `-Rn      `-Rd
  `-sf                            `-o0
  
  
 
.SS 64-bit
 
 SMULH  <Xd>, <Xn>, <Xm>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 integer a = UInt(Ra);           // ignored by UMULH/SMULH
 integer destsize = 64;
 integer datasize = destsize;
 boolean unsigned = (U == '1');
 
 bits(datasize) operand1 = X[n];
 bits(datasize) operand2 = X[m];
 
 integer result;
 
 result = Int(operand1, unsigned) * Int(operand2, unsigned);
 
 X[d] = result<127:64>;
 

.SS Assembler Symbols

 <Xd>
  Encoded in Rd
  Is the 64-bit name of the general-purpose destination register, encoded in the
  "Rd" field.

 <Xn>
  Encoded in Rn
  Is the 64-bit name of the first general-purpose source register holding the
  multiplicand, encoded in the "Rn" field.

 <Xm>
  Encoded in Rm
  Is the 64-bit name of the second general-purpose source register holding the
  multiplier, encoded in the "Rm" field.



.SS Operation

 bits(datasize) operand1 = X[n];
 bits(datasize) operand2 = X[m];
 
 integer result;
 
 result = Int(operand1, unsigned) * Int(operand2, unsigned);
 
 X[d] = result<127:64>;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
