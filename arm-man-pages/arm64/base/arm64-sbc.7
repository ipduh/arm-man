.nh
.TH "SBC -- A64" "7" " "  "instruction" "general"
.SS SBC
 Subtract with Carry

 Subtract with Carry subtracts a register value and the value of NOT (Carry
 flag) from a register value, and writes the result to the destination register.



.SS Not setting the condition flags - A64 - no_s
 
                                                                   
       29                                                          
     30 |                                                          
   31 | |              21        16          10         5         0
    | | |               |         |           |         |         |
  |.|1|0|1 1 0 1 0 0 0 0|. . . . .|0 0 0 0 0 0|. . . . .|. . . . .|
  | | |                 |                     |         |
  | | `-S               `-Rm                  `-Rn      `-Rd
  | `-op
  `-sf
  
  
 
.SS 32-bit(sf == 0)
 
 SBC  <Wd>, <Wn>, <Wm>
.SS 64-bit(sf == 1)
 
 SBC  <Xd>, <Xn>, <Xm>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 integer datasize = if sf == '1' then 64 else 32;
 boolean sub_op = (op == '1');
 boolean setflags = (S == '1');
 
 bits(datasize) result;
 bits(datasize) operand1 = X[n];
 bits(datasize) operand2 = X[m];
 bits(4) nzcv;
 
 if sub_op then
     operand2 = NOT(operand2);
 
 (result, nzcv) = AddWithCarry(operand1, operand2, PSTATE.C);
 
 if setflags then 
     PSTATE.<N,Z,C,V> = nzcv;
 
 X[d] = result;
 

.SS Assembler Symbols

 <Wd>
  Encoded in Rd
  Is the 32-bit name of the general-purpose destination register, encoded in the
  "Rd" field.

 <Wn>
  Encoded in Rn
  Is the 32-bit name of the first general-purpose source register, encoded in
  the "Rn" field.

 <Wm>
  Encoded in Rm
  Is the 32-bit name of the second general-purpose source register, encoded in
  the "Rm" field.

 <Xd>
  Encoded in Rd
  Is the 64-bit name of the general-purpose destination register, encoded in the
  "Rd" field.

 <Xn>
  Encoded in Rn
  Is the 64-bit name of the first general-purpose source register, encoded in
  the "Rn" field.

 <Xm>
  Encoded in Rm
  Is the 64-bit name of the second general-purpose source register, encoded in
  the "Rm" field.



.SS Operation

 bits(datasize) result;
 bits(datasize) operand1 = X[n];
 bits(datasize) operand2 = X[m];
 bits(4) nzcv;
 
 if sub_op then
     operand2 = NOT(operand2);
 
 (result, nzcv) = AddWithCarry(operand1, operand2, PSTATE.C);
 
 if setflags then 
     PSTATE.<N,Z,C,V> = nzcv;
 
 X[d] = result;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
