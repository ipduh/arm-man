.nh
.TH "ADDS (shifted register) -- A64" "7" " "  "instruction" "general"
.SS ADDS (shifted register)
 Add (shifted register), setting flags

 Add (shifted register), setting flags, adds a register value and an optionally-
 shifted register value, and writes the result to the destination register. It
 updates the condition flags based on the result.



.SS Setting the condition flags - A64 - s
 
                                                                   
       29                                                          
     30 |              21                                          
   31 | |        24  22 |        16          10         5         0
    | | |         |   | |         |           |         |         |
  |.|0|1|0 1 0 1 1|. .|0|. . . . .|. . . . . .|. . . . .|. . . . .|
  | | |           |     |         |           |         |
  | | `-S         |     `-Rm      `-imm6      `-Rn      `-Rd
  | `-op          `-shift
  `-sf
  
  
 
.SS 32-bit(sf == 0)
 
 ADDS  <Wd>, <Wn>, <Wm>{, <shift> #<amount>}
.SS 64-bit(sf == 1)
 
 ADDS  <Xd>, <Xn>, <Xm>{, <shift> #<amount>}
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 integer datasize = if sf == '1' then 64 else 32;
 boolean sub_op = (op == '1');
 boolean setflags = (S == '1');
 
 if shift == '11' then UNDEFINED;
 if sf == '0' && imm6<5> == '1' then UNDEFINED;
 
 ShiftType shift_type = DecodeShift(shift);
 integer shift_amount = UInt(imm6);
 
 bits(datasize) result;
 bits(datasize) operand1 = X[n];
 bits(datasize) operand2 = ShiftReg(m, shift_type, shift_amount);
 bits(4) nzcv;
 bit carry_in;
 
 if sub_op then
     operand2 = NOT(operand2);
     carry_in = '1';
 else
     carry_in = '0';
 
 (result, nzcv) = AddWithCarry(operand1, operand2, carry_in);
 
 if setflags then 
     PSTATE.<N,Z,C,V> = nzcv;
 
 X[d] = result;
 

.SS Assembler Symbols

 <Wd>
  Encoded in Rd
  Is the 32-bit name of the general-purpose destination register, encoded in the
  "Rd" field.

 <Wn>
  Encoded in Rn
  Is the 32-bit name of the first general-purpose source register, encoded in
  the "Rn" field.

 <Wm>
  Encoded in Rm
  Is the 32-bit name of the second general-purpose source register, encoded in
  the "Rm" field.

 <Xd>
  Encoded in Rd
  Is the 64-bit name of the general-purpose destination register, encoded in the
  "Rd" field.

 <Xn>
  Encoded in Rn
  Is the 64-bit name of the first general-purpose source register, encoded in
  the "Rn" field.

 <Xm>
  Encoded in Rm
  Is the 64-bit name of the second general-purpose source register, encoded in
  the "Rm" field.

 <shift>
  Encoded in shift
  Is the optional shift type to be applied to the second source operand,
  defaulting to LSL and

  shift <shift>  
  00    LSL      
  01    LSR      
  10    ASR      
  11    RESERVED 

 <amount>
  Encoded in imm6
  For the 32-bit variant: is the shift amount, in the range 0 to 31, defaulting
  to 0 and encoded in the "imm6" field.

 <amount>
  Encoded in imm6
  For the 64-bit variant: is the shift amount, in the range 0 to 63, defaulting
  to 0 and encoded in the "imm6" field.



.SS Operation

 bits(datasize) result;
 bits(datasize) operand1 = X[n];
 bits(datasize) operand2 = ShiftReg(m, shift_type, shift_amount);
 bits(4) nzcv;
 bit carry_in;
 
 if sub_op then
     operand2 = NOT(operand2);
     carry_in = '1';
 else
     carry_in = '0';
 
 (result, nzcv) = AddWithCarry(operand1, operand2, carry_in);
 
 if setflags then 
     PSTATE.<N,Z,C,V> = nzcv;
 
 X[d] = result;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
