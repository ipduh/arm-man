.nh
.TH "HVC -- A64" "7" " "  "instruction" "system"
.SS HVC
 Hypervisor Call

 Hypervisor Call causes an exception to EL2. Non-secure software executing at
 EL1 can use this instruction to call the hypervisor to request a service.

 The HVC instruction is undefined:

 When SCR_EL3. HCE is set to 0.


 On executing an HVC instruction, the PE records the exception as a Hypervisor
 Call exception in ESR_ELx, using the EC value 0x16, and the value of the
 immediate argument.



.SS System - A64 - HVC_EX_exception
 
                                                                   
                                                                   
                                                                   
                 24    21                               5     2   0
                  |     |                               |     |   |
   1 1 0 1 0 1 0 0|0 0 0|. . . . . . . . . . . . . . . .|0 0 0|1 0|
                  |     |                               |     |
                  `-opc `-imm16                         `-op2 `-LL
  
  
 
.SS System
 
 HVC  #<imm>
 
 bits(16) imm = imm16;
 
 if !HaveEL(EL2) || PSTATE.EL == EL0 || (PSTATE.EL == EL1 && (!IsSecureEL2Enabled() && IsSecure())) then
     UNDEFINED;
 
 hvc_enable = if HaveEL(EL3) then SCR_EL3.HCE else NOT(HCR_EL2.HCD);
 
 if hvc_enable == '0' then
     UNDEFINED;
 else
     AArch64.CallHypervisor(imm);
 

.SS Assembler Symbols

 <imm>
  Encoded in imm16
  Is a 16-bit unsigned immediate, in the range 0 to 65535, encoded in the
  "imm16" field.



.SS Operation

 if !HaveEL(EL2) || PSTATE.EL == EL0 || (PSTATE.EL == EL1 && (!IsSecureEL2Enabled() && IsSecure())) then
     UNDEFINED;
 
 hvc_enable = if HaveEL(EL3) then SCR_EL3.HCE else NOT(HCR_EL2.HCD);
 
 if hvc_enable == '0' then
     UNDEFINED;
 else
     AArch64.CallHypervisor(imm);

