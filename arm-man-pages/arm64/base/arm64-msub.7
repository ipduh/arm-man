.nh
.TH "MSUB -- A64" "7" " "  "instruction" "general"
.SS MSUB
 Multiply-Subtract

 Multiply-Subtract multiplies two register values, subtracts the product from a
 third register value, and writes the result to the destination register.



.SS Integer - A64 - general
 
                                                                   
                                                                   
                                   15                              
   31  29        24    21        16 |        10         5         0
    |   |         |     |         | |         |         |         |
  |.|0 0|1 1 0 1 1|0 0 0|. . . . .|1|. . . . .|. . . . .|. . . . .|
  | |             |     |         | |         |         |
  | `-op54        |     `-Rm      | `-Ra      `-Rn      `-Rd
  `-sf            `-op31          `-o0
  
  
 
.SS 32-bit(sf == 0)
 
 MSUB  <Wd>, <Wn>, <Wm>, <Wa>
.SS 64-bit(sf == 1)
 
 MSUB  <Xd>, <Xn>, <Xm>, <Xa>
 
 integer d = UInt(Rd);
 integer n = UInt(Rn);
 integer m = UInt(Rm);
 integer a = UInt(Ra);
 integer destsize = if sf == '1' then 64 else 32;
 integer datasize = destsize;
 boolean sub_op = (o0 == '1');
 
 bits(datasize) operand1 = X[n];
 bits(datasize) operand2 = X[m];
 bits(destsize) operand3 = X[a];
 
 integer result;
 
 if sub_op then
     result = UInt(operand3) - (UInt(operand1) * UInt(operand2));
 else
     result = UInt(operand3) + (UInt(operand1) * UInt(operand2));
 
 X[d] = result<destsize-1:0>;
 

.SS Assembler Symbols

 <Wd>
  Encoded in Rd
  Is the 32-bit name of the general-purpose destination register, encoded in the
  "Rd" field.

 <Wn>
  Encoded in Rn
  Is the 32-bit name of the first general-purpose source register holding the
  multiplicand, encoded in the "Rn" field.

 <Wm>
  Encoded in Rm
  Is the 32-bit name of the second general-purpose source register holding the
  multiplier, encoded in the "Rm" field.

 <Wa>
  Encoded in Ra
  Is the 32-bit name of the third general-purpose source register holding the
  minuend, encoded in the "Ra" field.

 <Xd>
  Encoded in Rd
  Is the 64-bit name of the general-purpose destination register, encoded in the
  "Rd" field.

 <Xn>
  Encoded in Rn
  Is the 64-bit name of the first general-purpose source register holding the
  multiplicand, encoded in the "Rn" field.

 <Xm>
  Encoded in Rm
  Is the 64-bit name of the second general-purpose source register holding the
  multiplier, encoded in the "Rm" field.

 <Xa>
  Encoded in Ra
  Is the 64-bit name of the third general-purpose source register holding the
  minuend, encoded in the "Ra" field.



.SS Operation

 bits(datasize) operand1 = X[n];
 bits(datasize) operand2 = X[m];
 bits(destsize) operand3 = X[a];
 
 integer result;
 
 if sub_op then
     result = UInt(operand3) - (UInt(operand1) * UInt(operand2));
 else
     result = UInt(operand3) + (UInt(operand1) * UInt(operand2));
 
 X[d] = result<destsize-1:0>;


.SS Operational Notes

 
 If PSTATE.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
