.nh
.TH "LDCLRB, LDCLRAB, LDCLRALB, LDCLRLB -- A64" "7" " "  "instruction" "general"
.SS LDCLRB, LDCLRAB, LDCLRALB, LDCLRLB
 Atomic bit clear on byte in memory

 Atomic bit clear on byte in memory atomically loads an 8-bit byte from memory,
 performs a bitwise AND with the complement of the value held in a register on
 it, and stores the result back to memory. The value initially loaded from
 memory is returned in the destination register.

 If the destination register is not WZR, LDCLRAB and LDCLRALB load from memory
 with acquire semantics.

 If the destination register is not WZR, LDCLRAB and LDCLRALB load from memory
 with acquire semantics.

 If the destination register is not WZR, LDCLRAB and LDCLRALB load from memory
 with acquire semantics.

 LDCLRLB and LDCLRALB store to memory with release semantics.

 LDCLRLB and LDCLRALB store to memory with release semantics.

 LDCLRB has no memory ordering requirements.


 For more information about memory ordering semantics see Load-Acquire, Store-
 Release.

 For information about memory accesses see Load/Store addressing modes.



.SS Integer - A64 - general
 
                       21                                          
                     22 |                                          
             26    23 | |          15                              
     30    27 |  24 | | |        16 |    12  10         5         0
      |     | |   | | | |         | |     |   |         |         |
  |0 0|1 1 1|0|0 0|.|.|1|. . . . .|0|0 0 1|0 0|. . . . .|. . . . .|
  |         |     | |   |         | |         |         |
  `-size    `-V   | `-R `-Rs      | `-opc     `-Rn      `-Rt
                  `-A             `-o3
  
  
 
.SS LDCLRAB(A == 1 && R == 0)
 
 LDCLRAB  <Ws>, <Wt>, [<Xn|SP>]
.SS LDCLRALB(A == 1 && R == 1)
 
 LDCLRALB  <Ws>, <Wt>, [<Xn|SP>]
.SS LDCLRB(A == 0 && R == 0)
 
 LDCLRB  <Ws>, <Wt>, [<Xn|SP>]
.SS LDCLRLB(A == 0 && R == 1)
 
 LDCLRLB  <Ws>, <Wt>, [<Xn|SP>]
 
 if !HaveAtomicExt() then UNDEFINED;
 
 integer t = UInt(Rt);
 integer n = UInt(Rn);
 integer s = UInt(Rs);
 
 integer datasize = 8 << UInt(size);
 integer regsize = if datasize == 64 then 64 else 32;
 AccType ldacctype = if A == '1' && Rt != '11111' then AccType_ORDEREDATOMICRW else AccType_ATOMICRW;
 AccType stacctype = if R == '1' then AccType_ORDEREDATOMICRW else AccType_ATOMICRW;
 MemAtomicOp op;
 case opc of
     when '000' op = MemAtomicOp_ADD;
     when '001' op = MemAtomicOp_BIC;
     when '010' op = MemAtomicOp_EOR;
     when '011' op = MemAtomicOp_ORR;
     when '100' op = MemAtomicOp_SMAX;
     when '101' op = MemAtomicOp_SMIN;
     when '110' op = MemAtomicOp_UMAX;
     when '111' op = MemAtomicOp_UMIN;
 boolean tag_checked = n != 31;
 
 bits(64) address;
 bits(datasize) value;
 bits(datasize) data;
 
 if HaveMTEExt() then
     SetTagCheckedInstruction(tag_checked);
 
 value = X[s];
 if n == 31 then
     CheckSPAlignment();
     address = SP[];
 else
     address = X[n];
 
 data = MemAtomic(address, op, value, ldacctype, stacctype);
 
 if t != 31 then
     X[t] = ZeroExtend(data, regsize);
 

.SS Assembler Symbols

 <Ws>
  Encoded in Rs
  Is the 32-bit name of the general-purpose register holding the data value to
  be operated on with the contents of the memory location, encoded in the "Rs"
  field.

 <Wt>
  Encoded in Rt
  Is the 32-bit name of the general-purpose register to be loaded, encoded in
  the "Rt" field.

 <Xn|SP>
  Encoded in Rn
  Is the 64-bit name of the general-purpose base register or stack pointer,
  encoded in the "Rn" field.



.SS Operation

 bits(64) address;
 bits(datasize) value;
 bits(datasize) data;
 
 if HaveMTEExt() then
     SetTagCheckedInstruction(tag_checked);
 
 value = X[s];
 if n == 31 then
     CheckSPAlignment();
     address = SP[];
 else
     address = X[n];
 
 data = MemAtomic(address, op, value, ldacctype, stacctype);
 
 if t != 31 then
     X[t] = ZeroExtend(data, regsize);


.SS Operational Notes

 
 If PSTATE.DIT is 1, the timing of this instruction is insensitive to the value of the data being loaded or stored.
