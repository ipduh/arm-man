.nh
.TH "VSUBW -- AArch32" "7" " "  "instruction" "fpsimd"
.SS VSUBW
 Vector Subtract Wide

 Vector Subtract Wide subtracts the elements of a doubleword vector from the
 corresponding elements of a quadword vector, and places the results in another
 quadword vector. Before subtracting, it sign-extends or zero-extends the
 elements of the doubleword operand.

 Depending on settings in the CPACR, NSACR, and HCPTR registers, and the
 Security state and PE mode in which the instruction is executed, an attempt to
 execute the instruction might be undefined, or trapped to Hyp mode. For more
 information see Enabling Advanced SIMD and floating-point support.

 Related encodings: See Advanced SIMD data-processing for the T32 instruction
 set, or Advanced SIMD data-processing for the A32 instruction set.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                     22                                            
                   23 |                                            
                 24 | |                                            
               25 | | |  20      16      12     9 8 7 6 5 4       0
                | | | |   |       |       |     | | | | | |       |
   1 1 1 1 0 0 1|.|1|.|. .|. . . .|. . . .|0 0 1|1|.|0|.|0|. . . .|
                |   | |   |       |             | |   |   |
                `-U | |   `-Vn    `-Vd          | `-N `-M `-Vm
                    | `-size(!= 11)             `-op
                    `-D
  
  
 
.SS A1
 
 VSUBW{<c>}{<q>}.<dt> {<Qd>,} <Qn>, <Dm>
 
 if size == '11' then SEE "Related encodings";
 if Vd<0> == '1' || (op == '1' && Vn<0> == '1') then UNDEFINED;
 unsigned = (U == '1');
 esize = 8 << UInt(size);  elements = 64 DIV esize;  is_vsubw = (op == '1');
 d = UInt(D:Vd);  n = UInt(N:Vn);  m = UInt(M:Vm);
.SS T1 - T32
 
                                                                   
                                                                   
         13          07                                            
       14 |        08 |  05      01      12     9 8 7 6 5 4       0
        | |         | |   |       |       |     | | | | | |       |
   1 1 1|.|1 1 1 1 1|.|. .|. . . .|. . . .|0 0 1|1|.|0|.|0|. . . .|
        |           | |   |       |             | |   |   |
        `-U         | |   `-Vn    `-Vd          | `-N `-M `-Vm
                    | `-size(!= 11)             `-op
                    `-D
  
  
 
.SS T1
 
 VSUBW{<c>}{<q>}.<dt> {<Qd>,} <Qn>, <Dm>
 
 if size == '11' then SEE "Related encodings";
 if Vd<0> == '1' || (op == '1' && Vn<0> == '1') then UNDEFINED;
 unsigned = (U == '1');
 esize = 8 << UInt(size);  elements = 64 DIV esize;  is_vsubw = (op == '1');
 d = UInt(D:Vd);  n = UInt(N:Vn);  m = UInt(M:Vm);
 
 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     for e = 0 to elements-1
         if is_vsubw then
             op1 = Int(Elem[Qin[n>>1],e,2*esize], unsigned);
         else
             op1 = Int(Elem[Din[n],e,esize], unsigned);
         result = op1 - Int(Elem[Din[m],e,esize], unsigned);
         Elem[Q[d>>1],e,2*esize] = result<2*esize-1:0>;
 

.SS Assembler Symbols

 <c>
  For encoding A1: see Standard assembler syntax fields. This encoding must be
  unconditional.

 <c>
  For encoding T1: see Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <dt>
  Encoded in U:size
  Is the data type for the elements of the second operand vector,

  U size <dt> 
  0 00   S8   
  0 01   S16  
  0 10   S32  
  1 00   U8   
  1 01   U16  
  1 10   U32  

 <Qd>
  Encoded in D:Vd
  Is the 128-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field as <Qd>*2.

 <Qn>
  Encoded in N:Vn
  Is the 128-bit name of the first SIMD&FP source register, encoded in the
  "N:Vn" field as <Qn>*2.

 <Dm>
  Encoded in M:Vm
  Is the 64-bit name of the second SIMD&FP source register, encoded in the
  "M:Vm" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     for e = 0 to elements-1
         if is_vsubw then
             op1 = Int(Elem[Qin[n>>1],e,2*esize], unsigned);
         else
             op1 = Int(Elem[Din[n],e,esize], unsigned);
         result = op1 - Int(Elem[Din[m],e,esize], unsigned);
         Elem[Q[d>>1],e,2*esize] = result<2*esize-1:0>;


.SS Operational Notes

 
 If CPSR.DIT is 1 and this instruction passes its condition execution check: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
