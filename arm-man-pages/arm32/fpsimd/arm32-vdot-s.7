.nh
.TH "VDOT (by element) -- AArch32" "7" " "  "instruction" "fpsimd"
.SS VDOT (by element)
 BFloat16 floating-point indexed dot product (vector, by element)

 BFloat16 floating-point indexed dot product (vector, by element). This
 instruction delimits the source vectors into pairs of 16-bit BF16 elements.
 Each pair of elements in the first source vector is multiplied by the indexed
 pair of elements in the second source vector. The resulting single-precision
 products are then summed and added destructively to the single-precision
 element in the destination vector which aligns with the pair of BFloat16 values
 in the first source vector. The instruction does not update the FPSCR exception
 status.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                     22                      10                    
                   23 |                    11 |                    
                 24 | |  20      16      12 | | 9 8 7 6 5 4       0
                  | | |   |       |       | | | | | | | | |       |
   1 1 1 1 1 1 1 0|0|.|0 0|. . . .|. . . .|1|1|0|1|.|.|.|0|. . . .|
                  | | |   |       |         |   | | | | | |
                  | | |   `-Vn    `-Vd      |   | | | | | `-Vm
                  | | `-op2                 |   | | | | `-U
                  | `-D                     |   | | | `-M
                  `-op1                     |   | | `-Q
                                            |   | `-N
                                            |   `-op4
                                            `-op3
  
  
 
.SS 64-bit SIMD vector(Q == 0)
 
 VDOT{<q>}.BF16 <Dd>, <Dn>, <Dm>[<index>]
.SS 128-bit SIMD vector(Q == 1)
 
 VDOT{<q>}.BF16 <Qd>, <Qn>, <Dm>[<index>]
 
 if !HaveAArch32BF16Ext() then UNDEFINED;
 if Q == '1' && (Vd<0> == '1' || Vn<0> == '1') then UNDEFINED;
 integer d = UInt(D:Vd);
 integer n = UInt(N:Vn);
 integer m = UInt(Vm);
 integer i = UInt(M);
 integer regs = if Q == '1' then 2 else 1;
.SS T1 - T32
 
                                                                   
                     07                      10                    
                   08 |                    11 |                    
                 09 | |  05      01      12 | | 9 8 7 6 5 4       0
                  | | |   |       |       | | | | | | | | |       |
   1 1 1 1 1 1 1 0|0|.|0 0|. . . .|. . . .|1|1|0|1|.|.|.|0|. . . .|
                  | | |   |       |         |   | | | | | |
                  | | |   `-Vn    `-Vd      |   | | | | | `-Vm
                  | | `-op2                 |   | | | | `-U
                  | `-D                     |   | | | `-M
                  `-op1                     |   | | `-Q
                                            |   | `-N
                                            |   `-op4
                                            `-op3
  
  
 
.SS 64-bit SIMD vector(Q == 0)
 
 VDOT{<q>}.BF16 <Dd>, <Dn>, <Dm>[<index>]
.SS 128-bit SIMD vector(Q == 1)
 
 VDOT{<q>}.BF16 <Qd>, <Qn>, <Dm>[<index>]
 
 if InITBlock() then UNPREDICTABLE;
 if !HaveAArch32BF16Ext() then UNDEFINED;
 if Q == '1' && (Vd<0> == '1' || Vn<0> == '1') then UNDEFINED;
 integer d = UInt(D:Vd);
 integer n = UInt(N:Vn);
 integer m = UInt(Vm);
 integer i = UInt(M);
 integer regs = if Q == '1' then 2 else 1;
 
 bits(64) operand1;
 bits(64) operand2;
 bits(64) result;
 
 CheckAdvSIMDEnabled();
 
 operand2 = Din[m];
 for r = 0 to regs-1
     operand1 = Din[n+r];
     result = Din[d+r];
     for e = 0 to 1
         bits(16) elt1_a = Elem[operand1, 2 * e + 0, 16];
         bits(16) elt1_b = Elem[operand1, 2 * e + 1, 16];
         bits(16) elt2_a = Elem[operand2, 2 * i + 0, 16];
         bits(16) elt2_b = Elem[operand2, 2 * i + 1, 16];
         bits(32) sum = BFAdd(BFMul(elt1_a, elt2_a), BFMul(elt1_b, elt2_b));
         Elem[result, e, 32] = BFAdd(Elem[result, e, 32], sum);
     D[d+r] = result;
 

.SS Assembler Symbols

 <q>
  See Standard assembler syntax fields.

 <Qd>
  Encoded in D:Vd
  Is the 128-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field as <Qd>*2.

 <Qn>
  Encoded in N:Vn
  Is the 128-bit name of the first SIMD&FP source register, encoded in the
  "N:Vn" field as <Qn>*2.

 <Dd>
  Encoded in D:Vd
  Is the 64-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field.

 <Dn>
  Encoded in N:Vn
  Is the 64-bit name of the first SIMD&FP source register, encoded in the "N:Vn"
  field.

 <Dm>
  Encoded in Vm
  Is the 64-bit name of the second SIMD&FP source register, encoded in the "Vm"
  field.

 <index>
  Encoded in M
  Is the element index in the range 0 to 1, encoded in the "M" field.



.SS Operation

 bits(64) operand1;
 bits(64) operand2;
 bits(64) result;
 
 CheckAdvSIMDEnabled();
 
 operand2 = Din[m];
 for r = 0 to regs-1
     operand1 = Din[n+r];
     result = Din[d+r];
     for e = 0 to 1
         bits(16) elt1_a = Elem[operand1, 2 * e + 0, 16];
         bits(16) elt1_b = Elem[operand1, 2 * e + 1, 16];
         bits(16) elt2_a = Elem[operand2, 2 * i + 0, 16];
         bits(16) elt2_b = Elem[operand2, 2 * i + 1, 16];
         bits(32) sum = BFAdd(BFMul(elt1_a, elt2_a), BFMul(elt1_b, elt2_b));
         Elem[result, e, 32] = BFAdd(Elem[result, e, 32], sum);
     D[d+r] = result;

