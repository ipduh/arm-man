.nh
.TH "SHA256SU0 -- AArch32" "7" " "  "instruction" "fpsimd"
.SS SHA256SU0
 SHA256 schedule update 0

 SHA256 schedule update 0.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                                                                   
                     22                    11                      
                   23 |  20  18  16      12 |       7 6 5 4       0
                    | |   |   |   |       | |       | | | |       |
   1 1 1 1 0 0 1 1 1|.|1 1|. .|1 0|. . . .|0|0 1 1 1|1|.|0|. . . .|
                    |     |   |   |         |       | |   |
                    `-D   |   |   `-Vd      `-opc2  | `-M `-Vm
                          |   `-opc1                `-Q
                          `-size
  
  
 
.SS A1
 
 SHA256SU0.32 <Qd>, <Qm>
 
 if !HaveSHA256Ext() then UNDEFINED;
 if size != '10' then UNDEFINED;
 if Vd<0> == '1' || Vm<0> == '1' then UNDEFINED;
 d = UInt(D:Vd); m = UInt(M:Vm);
.SS T1 - T32
 
                                                                   
                                                                   
                     07                    11                      
                   08 |  05  03  01      12 |       7 6 5 4       0
                    | |   |   |   |       | |       | | | |       |
   1 1 1 1 1 1 1 1 1|.|1 1|. .|1 0|. . . .|0|0 1 1 1|1|.|0|. . . .|
                    |     |   |   |         |       | |   |
                    `-D   |   |   `-Vd      `-opc2  | `-M `-Vm
                          |   `-opc1                `-Q
                          `-size
  
  
 
.SS T1
 
 SHA256SU0.32 <Qd>, <Qm>
 
 if InITBlock() then UNPREDICTABLE;
 if !HaveSHA256Ext() then UNDEFINED;
 if size != '10' then UNDEFINED;
 if Vd<0> == '1' || Vm<0> == '1' then UNDEFINED;
 d = UInt(D:Vd); m = UInt(M:Vm);
 
 if ConditionPassed() then
     bits(128) result;
     EncodingSpecificOperations(); CheckCryptoEnabled32();
     X = Q[d>>1]; Y = Q[m>>1];
     T = Y<31:0> : X<127:32>;
     for e = 0 to 3
         elt = Elem[T, e, 32];
         elt = ROR(elt, 7) EOR ROR(elt, 18) EOR LSR(elt, 3);
         Elem[result, e, 32] = elt + Elem[X, e, 32];
     Q[d>>1] = result;
 

.SS Assembler Symbols

 <Qd>
  Encoded in D:Vd
  Is the 128-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field as <Qd>*2.

 <Qm>
  Encoded in M:Vm
  Is the 128-bit name of the SIMD&FP source register, encoded in the "M:Vm"
  field as <Qm>*2.



.SS Operation

 if ConditionPassed() then
     bits(128) result;
     EncodingSpecificOperations(); CheckCryptoEnabled32();
     X = Q[d>>1]; Y = Q[m>>1];
     T = Y<31:0> : X<127:32>;
     for e = 0 to 3
         elt = Elem[T, e, 32];
         elt = ROR(elt, 7) EOR ROR(elt, 18) EOR LSR(elt, 3);
         Elem[result, e, 32] = elt + Elem[X, e, 32];
     Q[d>>1] = result;


.SS Operational Notes

 
 If CPSR.DIT is 1: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
