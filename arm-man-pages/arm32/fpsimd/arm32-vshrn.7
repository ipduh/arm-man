.nh
.TH "VSHRN -- AArch32" "7" " "  "instruction" "fpsimd"
.SS VSHRN
 Vector Shift Right Narrow

 Vector Shift Right Narrow takes each element in a vector, right shifts them by
 an immediate value, and places the truncated results in the destination vector.
 For rounded results, see VRSHRN.

 The operand elements can be 16-bit, 32-bit, or 64-bit integers. There is no
 distinction between signed and unsigned integers. The destination elements are
 half the size of the source elements.

 Depending on settings in the CPACR, NSACR, and HCPTR registers, and the
 Security state and PE mode in which the instruction is executed, an attempt to
 execute the instruction might be undefined, or trapped to Hyp mode. For more
 information see Enabling Advanced SIMD and floating-point support.

 Related encodings: See Advanced SIMD one register and modified immediate for
 the T32 instruction set, or Advanced SIMD one register and modified immediate
 for the A32 instruction set.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                     22                                            
                   23 |                                            
                 24 | |                                            
               25 | | |          16      12       8 7 6 5 4       0
                | | | |           |       |       | | | | |       |
   1 1 1 1 0 0 1|0|1|.|. . . . . .|. . . .|1 0 0 0|0|0|.|1|. . . .|
                |   | |           |       |       | | |   |
                `-U | `-imm6      `-Vd    `-opc   | | `-M `-Vm
                    `-D                           | `-Q
                                                  `-L
  
  
 
.SS A1(imm6 != 000xxx)
 
 VSHRN{<c>}{<q>}.I<size> <Dd>, <Qm>, #<imm>
 
 if imm6 == '000xxx' then SEE "Related encodings";
 if Vm<0> == '1' then UNDEFINED;
 case imm6 of
     when '001xxx'  esize = 8;  elements = 8;  shift_amount = 16 - UInt(imm6);
     when '01xxxx'  esize = 16;  elements = 4;  shift_amount = 32 - UInt(imm6);
     when '1xxxxx'  esize = 32;  elements = 2;  shift_amount = 64 - UInt(imm6);
 d = UInt(D:Vd);  m = UInt(M:Vm);
.SS T1 - T32
 
                                                                   
                                                                   
         13          07                                            
       14 |        08 |          01      12       8 7 6 5 4       0
        | |         | |           |       |       | | | | |       |
   1 1 1|0|1 1 1 1 1|.|. . . . . .|. . . .|1 0 0 0|0|0|.|1|. . . .|
        |           | |           |       |       | | |   |
        `-U         | `-imm6      `-Vd    `-opc   | | `-M `-Vm
                    `-D                           | `-Q
                                                  `-L
  
  
 
.SS T1(imm6 != 000xxx)
 
 VSHRN{<c>}{<q>}.I<size> <Dd>, <Qm>, #<imm>
 
 if imm6 == '000xxx' then SEE "Related encodings";
 if Vm<0> == '1' then UNDEFINED;
 case imm6 of
     when '001xxx'  esize = 8;  elements = 8;  shift_amount = 16 - UInt(imm6);
     when '01xxxx'  esize = 16;  elements = 4;  shift_amount = 32 - UInt(imm6);
     when '1xxxxx'  esize = 32;  elements = 2;  shift_amount = 64 - UInt(imm6);
 d = UInt(D:Vd);  m = UInt(M:Vm);
 
 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     for e = 0 to elements-1
         result = LSR(Elem[Qin[m>>1],e,2*esize], shift_amount);
         Elem[D[d],e,esize] = result<esize-1:0>;
 

.SS Assembler Symbols

 <c>
  For encoding A1: see Standard assembler syntax fields. This encoding must be
  unconditional.

 <c>
  For encoding T1: see Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <size>
  Encoded in imm6<5:3>
  Is the data size for the elements of the vectors,

  imm6<5:3> <size> 
  001       16     
  01x       32     
  1xx       64     

 <Dd>
  Encoded in D:Vd
  Is the 64-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field.

 <Qm>
  Encoded in M:Vm
  Is the 128-bit name of the SIMD&FP source register, encoded in the "M:Vm"
  field as <Qm>*2.

 <imm>
  Encoded in imm6
  Is an immediate value, in the range 1 to <size>/2, encoded in the "imm6" field
  as <size>/2 - <imm>.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     for e = 0 to elements-1
         result = LSR(Elem[Qin[m>>1],e,2*esize], shift_amount);
         Elem[D[d],e,esize] = result<esize-1:0>;

