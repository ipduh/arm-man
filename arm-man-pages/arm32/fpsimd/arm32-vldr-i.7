.nh
.TH "VLDR (immediate) -- AArch32" "7" " "  "instruction" "fpsimd"
.SS VLDR (immediate)
 Load SIMD&FP register (immediate)

 Load SIMD&FP register (immediate) loads a single register from the Advanced
 SIMD and floating-point register file, using an address from a general-purpose
 register, with an optional offset.

 Depending on settings in the CPACR, NSACR, HCPTR, and FPEXC registers, and the
 Security state and PE mode in which the instruction is executed, an attempt to
 execute the instruction might be undefined, or trapped to Hyp mode. For more
 information see Enabling Advanced SIMD and floating-point support.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                     22                                            
                   23 |                                            
                 24 | |  20                                        
         28    25 | | |21 |      16      12  10   8               0
          |     | | | | | |       |       |   |   |               |
  |. . . .|1 1 0|1|.|.|0|1|. . . .|. . . .|1 0|. .|. . . . . . . .|
  |             | | | | | |       |           |   |
  |             | | | | | |       `-Vd        |   `-imm8
  |             | | | | | `-Rn(!= 1111)       `-size
  |             | | | | `-L
  |             | | | `-W
  |             | | `-D
  |             | `-U
  |             `-P
  `-cond(!= 1111)
  
  
 
.SS Half-precision scalar(size == 01)
 
 VLDR{<c>}{<q>}.16 <Sd>, [<Rn> {, #{+/-}<imm>}]
.SS Single-precision scalar(size == 10)
 
 VLDR{<c>}{<q>}{.32} <Sd>, [<Rn> {, #{+/-}<imm>}]
.SS Double-precision scalar(size == 11)
 
 VLDR{<c>}{<q>}{.64} <Dd>, [<Rn> {, #{+/-}<imm>}]
 
 if size == '00' || (size == '01' && !HaveFP16Ext()) then UNDEFINED;
 if size == '01' && cond != '1110' then UNPREDICTABLE;
 esize = 8 << UInt(size);  add = (U == '1');
 imm32 = if esize == 16 then ZeroExtend(imm8:'0', 32) else ZeroExtend(imm8:'00', 32);
 case size of
     when '01' d = UInt(Vd:D);
     when '10' d = UInt(Vd:D);
     when '11' d = UInt(D:Vd);
 n = UInt(Rn);
.SS T1 - T32
 
                     07                                            
                   08 |                                            
                 09 | |  05                                        
               10 | | |06 |      01      12  10   8               0
                | | | | | |       |       |   |   |               |
   1 1 1 0 1 1 0|1|.|.|0|1|. . . .|. . . .|1 0|. .|. . . . . . . .|
                | | | | | |       |           |   |
                | | | | | |       `-Vd        |   `-imm8
                | | | | | `-Rn(!= 1111)       `-size
                | | | | `-L
                | | | `-W
                | | `-D
                | `-U
                `-P
  
  
 
.SS Half-precision scalar(size == 01)
 
 VLDR{<c>}{<q>}.16 <Sd>, [<Rn> {, #{+/-}<imm>}]
.SS Single-precision scalar(size == 10)
 
 VLDR{<c>}{<q>}{.32} <Sd>, [<Rn> {, #{+/-}<imm>}]
.SS Double-precision scalar(size == 11)
 
 VLDR{<c>}{<q>}{.64} <Dd>, [<Rn> {, #{+/-}<imm>}]
 
 if size == '00' || (size == '01' && !HaveFP16Ext()) then UNDEFINED;
 if size == '01' && InITBlock()  then UNPREDICTABLE;
 esize = 8 << UInt(size);  add = (U == '1');
 imm32 = if esize == 16 then ZeroExtend(imm8:'0', 32) else ZeroExtend(imm8:'00', 32);
 case size of
     when '01' d = UInt(Vd:D);
     when '10' d = UInt(Vd:D);
     when '11' d = UInt(D:Vd);
 n = UInt(Rn);
 
 if ConditionPassed() then
     EncodingSpecificOperations();  CheckVFPEnabled(TRUE);
     base = if n == 15 then Align(PC,4) else R[n];
     address = if add then (base + imm32) else (base - imm32);
     case esize of
         when 16
             S[d] = Zeros(16) : MemA[address,2];
         when 32
             S[d] = MemA[address,4];
         when 64
             word1 = MemA[address,4];  word2 = MemA[address+4,4];
             // Combine the word-aligned words in the correct order for current endianness.
             D[d] = if BigEndian() then word1:word2 else word2:word1;
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 .64
  Is an optional data size specifier for 64-bit memory accesses that can be used
  in the assembler source code, but is otherwise ignored.

 <Dd>
  Encoded in D:Vd
  Is the 64-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field.

 .32
  Is an optional data size specifier for 32-bit memory accesses that can be used
  in the assembler source code, but is otherwise ignored.

 <Sd>
  Encoded in Vd:D
  Is the 32-bit name of the SIMD&FP destination register, encoded in the "Vd:D"
  field.

 <Rn>
  Encoded in Rn
  Is the general-purpose base register, encoded in the "Rn" field.

 +/-
  Encoded in U
  Specifies the offset is added to or subtracted from the base register,
  defaulting to + if omitted and

  U +/- 
  0 -   
  1 +   

 <imm>
  Encoded in imm8
  For the single-precision scalar or double-precision scalar variants: is the
  optional unsigned immediate byte offset, a multiple of 4, in the range 0 to
  1020, defaulting to 0, and encoded in the "imm8" field as <imm>/4.
  For the half-precision scalar variant: is the optional unsigned immediate byte
  offset, a multiple of 2, in the range 0 to 510, defaulting to 0, and encoded
  in the "imm8" field as <imm>/2.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();  CheckVFPEnabled(TRUE);
     base = if n == 15 then Align(PC,4) else R[n];
     address = if add then (base + imm32) else (base - imm32);
     case esize of
         when 16
             S[d] = Zeros(16) : MemA[address,2];
         when 32
             S[d] = MemA[address,4];
         when 64
             word1 = MemA[address,4];  word2 = MemA[address+4,4];
             // Combine the word-aligned words in the correct order for current endianness.
             D[d] = if BigEndian() then word1:word2 else word2:word1;

