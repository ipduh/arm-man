.nh
.TH "VFMAB, VFMAT (BFloat16, by scalar) -- AArch32" "7" " "  "instruction" "fpsimd"
.SS VFMAB, VFMAT (BFloat16, by scalar)
 BFloat16 floating-point widening multiply-add long (by scalar)

 The BFloat16 floating-point widening multiply-add long instruction widens the
 even-numbered (bottom) or odd-numbered (top) 16-bit elements in the first
 source vector, and an indexed element in the second source vector from Bfloat16
 to single-precision format. The instruction then multiplies and adds these
 values to the overlapping single-precision elements of the destination vector.

 Unlike other BFloat16 multiplication instructions, this performs a fused
 multiply-add, without intermediate rounding that uses the Round to Nearest
 rounding mode and can generate a floating-point exception that causes
 cumulative exception bits in the FPSCR to be set.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                     22                      10                    
                   23 |                    11 |                    
                 24 | |  20      16      12 | | 9 8 7 6 5 4       0
                  | | |   |       |       | | | | | | | | |       |
   1 1 1 1 1 1 1 0|0|.|1 1|. . . .|. . . .|1|0|0|0|.|.|.|1|. . . .|
                  | | |   |       |         |   | | | | | |
                  | | |   `-Vn    `-Vd      |   | | | | | `-Vm
                  | | `-op2                 |   | | | | `-U
                  | `-D                     |   | | | `-M
                  `-op1                     |   | | `-Q
                                            |   | `-N
                                            |   `-op4
                                            `-op3
  
  
 
.SS A1
 
 VFMA<bt>{<q>}.BF16 <Qd>, <Qn>, <Dm>[<index>]
 
 if !HaveAArch32BF16Ext() then UNDEFINED;
 if Vd<0> == '1' || Vn<0> == '1' then UNDEFINED;
 integer d = UInt(D:Vd);
 integer n = UInt(N:Vn);
 integer m = UInt(Vm<2:0>);
 integer i = UInt(M:Vm<3>);
 integer elements = 128 DIV 32;
 integer sel = UInt(Q);
.SS T1 - T32
 
                                                                   
                     07                      10                    
                   08 |                    11 |                    
                 09 | |  05      01      12 | | 9 8 7 6 5 4       0
                  | | |   |       |       | | | | | | | | |       |
   1 1 1 1 1 1 1 0|0|.|1 1|. . . .|. . . .|1|0|0|0|.|.|.|1|. . . .|
                  | | |   |       |         |   | | | | | |
                  | | |   `-Vn    `-Vd      |   | | | | | `-Vm
                  | | `-op2                 |   | | | | `-U
                  | `-D                     |   | | | `-M
                  `-op1                     |   | | `-Q
                                            |   | `-N
                                            |   `-op4
                                            `-op3
  
  
 
.SS T1
 
 VFMA<bt>{<q>}.BF16 <Qd>, <Qn>, <Dm>[<index>]
 
 if InITBlock() then UNPREDICTABLE;
 if !HaveAArch32BF16Ext() then UNDEFINED;
 if Vd<0> == '1' || Vn<0> == '1' then UNDEFINED;
 integer d = UInt(D:Vd);
 integer n = UInt(N:Vn);
 integer m = UInt(Vm<2:0>);
 integer i = UInt(M:Vm<3>);
 integer elements = 128 DIV 32;
 integer sel = UInt(Q);
 
 CheckAdvSIMDEnabled();
 bits(128) operand1 = Q[n>>1];
 bits(64) operand2 = D[m];
 bits(128) operand3 = Q[d>>1];
 bits(128) result;
 
 bits(32) element2 = Elem[operand2, i, 16] : Zeros(16);
 
 for e = 0 to elements-1
     bits(32) element1 = Elem[operand1, 2 * e + sel, 16] : Zeros(16);
     bits(32) addend = Elem[operand3, e, 32];
     Elem[result, e, 32] = FPMulAdd(addend, element1, element2,
                                    StandardFPSCRValue());
 
 Q[d>>1] = result;
 

.SS Assembler Symbols

 <bt>
  Encoded in T
  Is the bottom or top element specifier,

  T <bt> 
  0 B    
  1 T    

 <q>
  See Standard assembler syntax fields.

 <Qd>
  Encoded in D:Vd
  Is the 128-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field as <Qd>*2.

 <Qn>
  Encoded in N:Vn
  Is the 128-bit name of the first SIMD&FP source register, encoded in the
  "N:Vn" field as <Qn>*2.

 <Dm>
  Encoded in Vm<2:0>
  Is the 64-bit name of the second SIMD&FP source register, encoded in the
  "Vm<2:0>" field.

 <index>
  Encoded in M:Vm<3>
  Is the element index in the range 0 to 3, encoded in the "M:Vm<3>" field.



.SS Operation

 CheckAdvSIMDEnabled();
 bits(128) operand1 = Q[n>>1];
 bits(64) operand2 = D[m];
 bits(128) operand3 = Q[d>>1];
 bits(128) result;
 
 bits(32) element2 = Elem[operand2, i, 16] : Zeros(16);
 
 for e = 0 to elements-1
     bits(32) element1 = Elem[operand1, 2 * e + sel, 16] : Zeros(16);
     bits(32) addend = Elem[operand3, e, 32];
     Elem[result, e, 32] = FPMulAdd(addend, element1, element2,
                                    StandardFPSCRValue());
 
 Q[d>>1] = result;

