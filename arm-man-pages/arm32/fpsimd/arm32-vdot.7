.nh
.TH "VDOT (vector) -- AArch32" "7" " "  "instruction" "fpsimd"
.SS VDOT (vector)
 BFloat16 floating-point (BF16) dot product (vector)

 BFloat16 floating-point (BF16) dot product (vector). This instruction delimits
 the source vectors into pairs of 16-bit BF16 elements. Within each pair, the
 elements in the first source vector are multiplied by the corresponding
 elements in the second source vector. The resulting single-precision products
 are then summed and added destructively to the single-precision element in the
 destination vector which aligns with the pair of BF16 values in the first
 source vector. The instruction does not update the FPSCR exception status.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                                             10                    
                     22                    11 |                    
               25  23 |  20      16      12 | | 9 8 7 6 5 4       0
                |   | |   |       |       | | | | | | | | |       |
   1 1 1 1 1 1 0|0 0|.|0 0|. . . .|. . . .|1|1|0|1|.|.|.|0|. . . .|
                |   | |   |       |         |   | | | | | |
                |   | |   `-Vn    `-Vd      |   | | | | | `-Vm
                |   | `-op2                 |   | | | | `-U
                |   `-D                     |   | | | `-M
                `-op1                       |   | | `-Q
                                            |   | `-N
                                            |   `-op4
                                            `-op3
  
  
 
.SS 64-bit SIMD vector(Q == 0)
 
 VDOT{<q>}.BF16 <Dd>, <Dn>, <Dm>
.SS 128-bit SIMD vector(Q == 1)
 
 VDOT{<q>}.BF16 <Qd>, <Qn>, <Qm>
 
 if !HaveAArch32BF16Ext() then UNDEFINED;
 if Q == '1' && (Vd<0> == '1' || Vn<0> == '1' || Vm<0> == '1') then UNDEFINED;
 integer d = UInt(D:Vd);
 integer n = UInt(N:Vn);
 integer m = UInt(M:Vm);
 integer regs = if Q == '1' then 2 else 1;
.SS T1 - T32
 
                                                                   
                                             10                    
                     07                    11 |                    
               10  08 |  05      01      12 | | 9 8 7 6 5 4       0
                |   | |   |       |       | | | | | | | | |       |
   1 1 1 1 1 1 0|0 0|.|0 0|. . . .|. . . .|1|1|0|1|.|.|.|0|. . . .|
                |   | |   |       |         |   | | | | | |
                |   | |   `-Vn    `-Vd      |   | | | | | `-Vm
                |   | `-op2                 |   | | | | `-U
                |   `-D                     |   | | | `-M
                `-op1                       |   | | `-Q
                                            |   | `-N
                                            |   `-op4
                                            `-op3
  
  
 
.SS 64-bit SIMD vector(Q == 0)
 
 VDOT{<q>}.BF16 <Dd>, <Dn>, <Dm>
.SS 128-bit SIMD vector(Q == 1)
 
 VDOT{<q>}.BF16 <Qd>, <Qn>, <Qm>
 
 if InITBlock() then UNPREDICTABLE;
 if !HaveAArch32BF16Ext() then UNDEFINED;
 if Q == '1' && (Vd<0> == '1' || Vn<0> == '1' || Vm<0> == '1') then UNDEFINED;
 integer d = UInt(D:Vd);
 integer n = UInt(N:Vn);
 integer m = UInt(M:Vm);
 integer regs = if Q == '1' then 2 else 1;
 
 bits(64) operand1;
 bits(64) operand2;
 bits(64) result;
 
 CheckAdvSIMDEnabled();
 
 for r = 0 to regs-1
     operand1 = Din[n+r];
     operand2 = Din[m+r];
     result = Din[d+r];
     for e = 0 to 1
         bits(16) elt1_a = Elem[operand1, 2 * e + 0, 16];
         bits(16) elt1_b = Elem[operand1, 2 * e + 1, 16];
         bits(16) elt2_a = Elem[operand2, 2 * e + 0, 16];
         bits(16) elt2_b = Elem[operand2, 2 * e + 1, 16];
         bits(32) sum = BFAdd(BFMul(elt1_a, elt2_a), BFMul(elt1_b, elt2_b));
         Elem[result, e, 32] = BFAdd(Elem[result, e, 32], sum);
     D[d+r] = result;
 

.SS Assembler Symbols

 <q>
  See Standard assembler syntax fields.

 <Qd>
  Encoded in D:Vd
  Is the 128-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field as <Qd>*2.

 <Qn>
  Encoded in N:Vn
  Is the 128-bit name of the first SIMD&FP source register, encoded in the
  "N:Vn" field as <Qn>*2.

 <Qm>
  Encoded in M:Vm
  Is the 128-bit name of the second SIMD&FP source register, encoded in the
  "M:Vm" field as <Qm>*2.

 <Dd>
  Encoded in D:Vd
  Is the 64-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field.

 <Dn>
  Encoded in N:Vn
  Is the 64-bit name of the first SIMD&FP source register, encoded in the "N:Vn"
  field.

 <Dm>
  Encoded in M:Vm
  Is the 64-bit name of the second SIMD&FP source register, encoded in the
  "M:Vm" field.



.SS Operation

 bits(64) operand1;
 bits(64) operand2;
 bits(64) result;
 
 CheckAdvSIMDEnabled();
 
 for r = 0 to regs-1
     operand1 = Din[n+r];
     operand2 = Din[m+r];
     result = Din[d+r];
     for e = 0 to 1
         bits(16) elt1_a = Elem[operand1, 2 * e + 0, 16];
         bits(16) elt1_b = Elem[operand1, 2 * e + 1, 16];
         bits(16) elt2_a = Elem[operand2, 2 * e + 0, 16];
         bits(16) elt2_b = Elem[operand2, 2 * e + 1, 16];
         bits(32) sum = BFAdd(BFMul(elt1_a, elt2_a), BFMul(elt1_b, elt2_b));
         Elem[result, e, 32] = BFAdd(Elem[result, e, 32], sum);
     D[d+r] = result;

