.nh
.TH "VMMLA -- AArch32" "7" " "  "instruction" "fpsimd"
.SS VMMLA
 BFloat16 floating-point matrix multiply-accumulate

 BFloat16 floating-point matrix multiply-accumulate. This instruction multiplies
 the 2x4 matrix of BF16 values in the first 128-bit source vector by the 4x2
 BF16 matrix in the second 128-bit source vector. The resulting 2x2 single-
 precision matrix product is then added destructively to the 2x2 single-
 precision matrix in the 128-bit destination vector. This is equivalent to
 performing a 4-way dot product per destination element. The instruction does
 not update the FPSCR exception status.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                         20                                        
                       21 |                  10                    
                     22 | |                11 |                    
               25  23 | | |      16      12 | | 9 8 7 6 5 4       0
                |   | | | |       |       | | | | | | | | |       |
   1 1 1 1 1 1 0|0 0|.|0|0|. . . .|. . . .|1|1|0|0|.|1|.|0|. . . .|
                |   | | | |       |         |   | | | | | |
                |   | | | `-Vn    `-Vd      |   | | | | | `-Vm
                |   | | `-sz                |   | | | | `-U
                |   | `-op                  |   | | | `-M
                |   `-D                     |   | | `-Q
                `-op1                       |   | `-N
                                            |   `-op4
                                            `-op3
  
  
 
.SS A1
 
 VMMLA{<q>}.BF16 <Qd>, <Qn>, <Qm>
 
 if !HaveAArch32BF16Ext() then UNDEFINED;
 if Vd<0> == '1' || Vn<0> == '1' || Vm<0> == '1' then UNDEFINED;
 integer d = UInt(D:Vd);
 integer n = UInt(N:Vn);
 integer m = UInt(M:Vm);
 integer regs = 2;
.SS T1 - T32
 
                         05                                        
                       06 |                  10                    
                     07 | |                11 |                    
               10  08 | | |      01      12 | | 9 8 7 6 5 4       0
                |   | | | |       |       | | | | | | | | |       |
   1 1 1 1 1 1 0|0 0|.|0|0|. . . .|. . . .|1|1|0|0|.|1|.|0|. . . .|
                |   | | | |       |         |   | | | | | |
                |   | | | `-Vn    `-Vd      |   | | | | | `-Vm
                |   | | `-sz                |   | | | | `-U
                |   | `-op                  |   | | | `-M
                |   `-D                     |   | | `-Q
                `-op1                       |   | `-N
                                            |   `-op4
                                            `-op3
  
  
 
.SS T1
 
 VMMLA{<q>}.BF16 <Qd>, <Qn>, <Qm>
 
 if InITBlock() then UNPREDICTABLE;
 if !HaveAArch32BF16Ext() then UNDEFINED;
 if Vd<0> == '1' || Vn<0> == '1' || Vm<0> == '1' then UNDEFINED;
 integer d = UInt(D:Vd);
 integer n = UInt(N:Vn);
 integer m = UInt(M:Vm);
 integer regs = 2;
 
 CheckAdvSIMDEnabled();
 
 bits(128) op1 = Q[n>>1];
 bits(128) op2 = Q[m>>1];
 bits(128) acc = Q[d>>1];
 
 Q[d>>1] = BFMatMulAdd(acc, op1, op2);
 

.SS Assembler Symbols

 <q>
  See Standard assembler syntax fields.

 <Qd>
  Encoded in D:Vd
  Is the 128-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field as <Qd>*2.

 <Qn>
  Encoded in N:Vn
  Is the 128-bit name of the first SIMD&FP source register, encoded in the
  "N:Vn" field as <Qn>*2.

 <Qm>
  Encoded in M:Vm
  Is the 128-bit name of the second SIMD&FP source register, encoded in the
  "M:Vm" field as <Qm>*2.



.SS Operation

 CheckAdvSIMDEnabled();
 
 bits(128) op1 = Q[n>>1];
 bits(128) op2 = Q[m>>1];
 bits(128) acc = Q[d>>1];
 
 Q[d>>1] = BFMatMulAdd(acc, op1, op2);

