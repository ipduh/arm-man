.nh
.TH "VLD3 (multiple 3-element structures) -- AArch32" "7" " "  "instruction" "fpsimd"
.SS VLD3 (multiple 3-element structures)
 Load multiple 3-element structures to three registers

 Load multiple 3-element structures to three registers loads multiple 3-element
 structures from memory into three registers, with de-interleaving. For more
 information, see Element and structure load/store instructions. Every element
 of each register is loaded. For details of the addressing mode see Advanced
 SIMD addressing mode.

 Depending on settings in the CPACR, NSACR, and HCPTR registers, and the
 Security state and PE mode in which the instruction is executed, an attempt to
 execute the instruction might be undefined, or trapped to Hyp mode. For more
 information see Enabling Advanced SIMD and floating-point support.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors, and
 particularly VLD3 (multiple 3-element structures).

 Related encodings: See Advanced SIMD element or structure load/store for the
 T32 instruction set, or Advanced SIMD element or structure load/store for the
 A32 instruction set.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                         20                                        
                       21 |                                        
                     22 | |                                        
                   23 | | |      16      12       8   6   4       0
                    | | | |       |       |       |   |   |       |
   1 1 1 1 0 1 0 0 0|.|1|0|. . . .|. . . .|0 1 0 x|. .|. .|. . . .|
                    | |   |       |       |       |   |   |
                    | `-L `-Rn    `-Vd    `-itype |   |   `-Rm
                    `-D                           |   `-align
                                                  `-size
  
  
 
.SS Offset(Rm == 1111)
 
 VLD3{<c>}{<q>}.<size> <list>, [<Rn>{:<align>}]
.SS Post-indexed(Rm == 1101)
 
 VLD3{<c>}{<q>}.<size> <list>, [<Rn>{:<align>}]!
.SS Post-indexed(Rm != 11x1)
 
 VLD3{<c>}{<q>}.<size> <list>, [<Rn>{:<align>}], <Rm>
 
 case itype of
     when '0100'
         inc = 1;
     when '0101'
         inc = 2;
     otherwise
         SEE "Related encodings";
 if size == '11' || align<1> == '1' then UNDEFINED;
 alignment = if align<0> == '0' then 1 else 8;
 ebytes = 1 << UInt(size);  elements = 8 DIV ebytes;
 d = UInt(D:Vd);  d2 = d + inc;  d3 = d2 + inc;  n = UInt(Rn);  m = UInt(Rm);
 wback = (m != 15);  register_index = (m != 15 && m != 13);
 if n == 15 || d3 > 31 then UNPREDICTABLE;
.SS T1 - T32
 
                         05                                        
                       06 |                                        
                     07 | |                                        
                   08 | | |      01      12       8   6   4       0
                    | | | |       |       |       |   |   |       |
   1 1 1 1 1 0 0 1 0|.|1|0|. . . .|. . . .|0 1 0 x|. .|. .|. . . .|
                    | |   |       |       |       |   |   |
                    | `-L `-Rn    `-Vd    `-itype |   |   `-Rm
                    `-D                           |   `-align
                                                  `-size
  
  
 
.SS Offset(Rm == 1111)
 
 VLD3{<c>}{<q>}.<size> <list>, [<Rn>{:<align>}]
.SS Post-indexed(Rm == 1101)
 
 VLD3{<c>}{<q>}.<size> <list>, [<Rn>{:<align>}]!
.SS Post-indexed(Rm != 11x1)
 
 VLD3{<c>}{<q>}.<size> <list>, [<Rn>{:<align>}], <Rm>
 
 case itype of
     when '0100'
         inc = 1;
     when '0101'
         inc = 2;
     otherwise
         SEE "Related encodings";
 if size == '11' || align<1> == '1' then UNDEFINED;
 alignment = if align<0> == '0' then 1 else 8;
 ebytes = 1 << UInt(size);  elements = 8 DIV ebytes;
 d = UInt(D:Vd);  d2 = d + inc;  d3 = d2 + inc;  n = UInt(Rn);  m = UInt(Rm);
 wback = (m != 15);  register_index = (m != 15 && m != 13);
 if n == 15 || d3 > 31 then UNPREDICTABLE;
 
 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     address = R[n];  iswrite = FALSE;
     - = AArch32.CheckAlignment(address, alignment, AccType_VEC, iswrite);
     for e = 0 to elements-1
         Elem[D[d], e] = MemU[address,ebytes];
         Elem[D[d2],e] = MemU[address+ebytes,ebytes];
         Elem[D[d3],e] = MemU[address+2*ebytes,ebytes];
         address = address + 3*ebytes;
     if wback then
         if register_index then
             R[n] = R[n] + R[m];
         else
             R[n] = R[n] + 24;
 

.SS Assembler Symbols

 <c>
  For encoding A1: see Standard assembler syntax fields. This encoding must be
  unconditional.

 <c>
  For encoding T1: see Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <size>
  Encoded in size
  Is the data size,

  size <size>   
  00   8        
  01   16       
  10   32       
  11   RESERVED 

 <list>
  Encoded in itype
  Is a list containing the 64-bit names of the SIMD&FP registers.           The
  list must be one of:                                       { <Dd>, <Dd+1>,
  <Dd+2> }Single-spaced registers, encoded in the "itype" field as 0b0100.
  { <Dd>, <Dd+2>, <Dd+4> }Double-spaced registers, encoded in the "itype" field
  as 0b0101.                                   The register <Dd> is encoded in
  the "D:Vd" field.

 <Rn>
  Encoded in Rn
  Is the general-purpose base register, encoded in the "Rn" field.

 <align>
  Encoded in align
  Is the optional alignment.           Whenever <align> is omitted, the standard
  alignment is used, see Unaligned data access, and is encoded in the "align"
  field as 0b00.           Whenever <align> is present, the only permitted
  values is 64, meaning 64-bit alignment, encoded in the "align" field as 0b01.
  : is the preferred separator before the <align> value, but the alignment can
  be specified as @<align>, see Advanced SIMD addressing mode.

 <Rm>
  Encoded in Rm
  Is the general-purpose index register containing an offset applied after the
  access, encoded in the "Rm" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     address = R[n];  iswrite = FALSE;
     - = AArch32.CheckAlignment(address, alignment, AccType_VEC, iswrite);
     for e = 0 to elements-1
         Elem[D[d], e] = MemU[address,ebytes];
         Elem[D[d2],e] = MemU[address+ebytes,ebytes];
         Elem[D[d3],e] = MemU[address+2*ebytes,ebytes];
         address = address + 3*ebytes;
     if wback then
         if register_index then
             R[n] = R[n] + R[m];
         else
             R[n] = R[n] + 24;

