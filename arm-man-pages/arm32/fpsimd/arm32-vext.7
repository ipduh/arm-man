.nh
.TH "VEXT (byte elements) -- AArch32" "7" " "  "instruction" "fpsimd"
.SS VEXT (byte elements)
 Vector Extract

 Vector Extract extracts elements from the bottom end of the second operand
 vector and the top end of the first, concatenates them and places the result in
 the destination vector.

 The elements of the vectors are treated as being 8-bit fields. There is no
 distinction between data types.



 Depending on settings in the CPACR, NSACR, and HCPTR registers, and the
 Security state and PE mode in which the instruction is executed, an attempt to
 execute the instruction might be undefined, or trapped to Hyp mode. For more
 information see Enabling Advanced SIMD and floating-point support.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                                                                   
                     22                                            
                   23 |  20      16      12       8 7 6 5 4       0
                    | |   |       |       |       | | | | |       |
   1 1 1 1 0 0 1 0 1|.|1 1|. . . .|. . . .|. . . .|.|.|.|0|. . . .|
                    |     |       |       |       | | |   |
                    `-D   `-Vn    `-Vd    `-imm4  | | `-M `-Vm
                                                  | `-Q
                                                  `-N
  
  
 
.SS 64-bit SIMD vector(Q == 0)
 
 VEXT{<c>}{<q>}.8 {<Dd>,} <Dn>, <Dm>, #<imm>
.SS 128-bit SIMD vector(Q == 1)
 
 VEXT{<c>}{<q>}.8 {<Qd>,} <Qn>, <Qm>, #<imm>
 
 if Q == '1' && (Vd<0> == '1' || Vn<0> == '1' || Vm<0> == '1') then UNDEFINED;
 if Q == '0' && imm4<3> == '1' then UNDEFINED;
 quadword_operation = (Q == '1');  position = 8 * UInt(imm4);
 d = UInt(D:Vd);  n = UInt(N:Vn);  m = UInt(M:Vm);
.SS T1 - T32
 
                                                                   
                                                                   
                     07                                            
                   08 |  05      01      12       8 7 6 5 4       0
                    | |   |       |       |       | | | | |       |
   1 1 1 0 1 1 1 1 1|.|1 1|. . . .|. . . .|. . . .|.|.|.|0|. . . .|
                    |     |       |       |       | | |   |
                    `-D   `-Vn    `-Vd    `-imm4  | | `-M `-Vm
                                                  | `-Q
                                                  `-N
  
  
 
.SS 64-bit SIMD vector(Q == 0)
 
 VEXT{<c>}{<q>}.8 {<Dd>,} <Dn>, <Dm>, #<imm>
.SS 128-bit SIMD vector(Q == 1)
 
 VEXT{<c>}{<q>}.8 {<Qd>,} <Qn>, <Qm>, #<imm>
 
 if Q == '1' && (Vd<0> == '1' || Vn<0> == '1' || Vm<0> == '1') then UNDEFINED;
 if Q == '0' && imm4<3> == '1' then UNDEFINED;
 quadword_operation = (Q == '1');  position = 8 * UInt(imm4);
 d = UInt(D:Vd);  n = UInt(N:Vn);  m = UInt(M:Vm);
 
 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     if quadword_operation then
         Q[d>>1] = (Q[m>>1]:Q[n>>1])<position+127:position>;
     else
         D[d] = (D[m]:D[n])<position+63:position>;
 

.SS Assembler Symbols

 <c>
  For encoding A1: see Standard assembler syntax fields. This encoding must be
  unconditional.

 <c>
  For encoding T1: see Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Qd>
  Encoded in D:Vd
  Is the 128-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field as <Qd>*2.

 <Qn>
  Encoded in N:Vn
  Is the 128-bit name of the first SIMD&FP source register, encoded in the
  "N:Vn" field as <Qn>*2.

 <Qm>
  Encoded in M:Vm
  Is the 128-bit name of the second SIMD&FP source register, encoded in the
  "M:Vm" field as <Qm>*2.

 <Dd>
  Encoded in D:Vd
  Is the 64-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field.

 <Dn>
  Encoded in N:Vn
  Is the 64-bit name of the first SIMD&FP source register, encoded in the "N:Vn"
  field.

 <Dm>
  Encoded in M:Vm
  Is the 64-bit name of the second SIMD&FP source register, encoded in the
  "M:Vm" field.

 <imm>
  Encoded in imm4
  For the 64-bit SIMD vector variant: is the location of the extracted result in
  the concatenation of the operands, as a number of bytes from the least
  significant end, in the range 0 to 7, encoded in the "imm4" field.

 <imm>
  Encoded in imm4
  For the 128-bit SIMD vector variant: is the location of the extracted result
  in the concatenation of the operands, as a number of bytes from the least
  significant end, in the range 0 to 15, encoded in the "imm4" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     if quadword_operation then
         Q[d>>1] = (Q[m>>1]:Q[n>>1])<position+127:position>;
     else
         D[d] = (D[m]:D[n])<position+63:position>;


.SS Operational Notes

 
 If CPSR.DIT is 1 and this instruction passes its condition execution check: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
