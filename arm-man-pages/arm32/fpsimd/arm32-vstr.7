.nh
.TH "VSTR -- AArch32" "7" " "  "instruction" "fpsimd"
.SS VSTR
 Store SIMD&FP register

 Store SIMD&FP register stores a single register from the Advanced SIMD and
 floating-point register file to memory, using an address from a general-purpose
 register, with an optional offset.

 Depending on settings in the CPACR, NSACR, HCPTR, and FPEXC registers, and the
 Security state and PE mode in which the instruction is executed, an attempt to
 execute the instruction might be undefined, or trapped to Hyp mode. For more
 information see Enabling Advanced SIMD and floating-point support.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                     22                                            
                   23 |                                            
                 24 | |  20                                        
         28    25 | | |21 |      16      12  10   8               0
          |     | | | | | |       |       |   |   |               |
  |. . . .|1 1 0|1|.|.|0|0|. . . .|. . . .|1 0|. .|. . . . . . . .|
  |             | | | | | |       |           |   |
  |             | | | | | `-Rn    `-Vd        |   `-imm8
  |             | | | | `-L                   `-size
  |             | | | `-W
  |             | | `-D
  |             | `-U
  |             `-P
  `-cond(!= 1111)
  
  
 
.SS Half-precision scalar(size == 01)
 
 VSTR{<c>}{<q>}.16 <Sd>, [<Rn>{, #{+/-}<imm>}]
.SS Single-precision scalar(size == 10)
 
 VSTR{<c>}{<q>}{.32} <Sd>, [<Rn>{, #{+/-}<imm>}]
.SS Double-precision scalar(size == 11)
 
 VSTR{<c>}{<q>}{.64} <Dd>, [<Rn>{, #{+/-}<imm>}]
 
 if size == '00' || (size == '01' && !HaveFP16Ext()) then UNDEFINED;
 if size == '01' && cond != '1110' then UNPREDICTABLE;
 esize = 8 << UInt(size);  add = (U == '1');
 imm32 = if esize == 16 then ZeroExtend(imm8:'0', 32) else ZeroExtend(imm8:'00', 32);
 case size of
     when '01' d = UInt(Vd:D);
     when '10' d = UInt(Vd:D);
     when '11' d = UInt(D:Vd);
 n = UInt(Rn);
 if n == 15 && CurrentInstrSet() != InstrSet_A32 then UNPREDICTABLE;
.SS T1 - T32
 
                     07                                            
                   08 |                                            
                 09 | |  05                                        
               10 | | |06 |      01      12  10   8               0
                | | | | | |       |       |   |   |               |
   1 1 1 0 1 1 0|1|.|.|0|0|. . . .|. . . .|1 0|. .|. . . . . . . .|
                | | | | | |       |           |   |
                | | | | | `-Rn    `-Vd        |   `-imm8
                | | | | `-L                   `-size
                | | | `-W
                | | `-D
                | `-U
                `-P
  
  
 
.SS Half-precision scalar(size == 01)
 
 VSTR{<c>}{<q>}.16 <Sd>, [<Rn>{, #{+/-}<imm>}]
.SS Single-precision scalar(size == 10)
 
 VSTR{<c>}{<q>}{.32} <Sd>, [<Rn>{, #{+/-}<imm>}]
.SS Double-precision scalar(size == 11)
 
 VSTR{<c>}{<q>}{.64} <Dd>, [<Rn>{, #{+/-}<imm>}]
 
 if size == '00' || (size == '01' && !HaveFP16Ext()) then UNDEFINED;
 if size == '01' && InITBlock()  then UNPREDICTABLE;
 esize = 8 << UInt(size);  add = (U == '1');
 imm32 = if esize == 16 then ZeroExtend(imm8:'0', 32) else ZeroExtend(imm8:'00', 32);
 case size of
     when '01' d = UInt(Vd:D);
     when '10' d = UInt(Vd:D);
     when '11' d = UInt(D:Vd);
 n = UInt(Rn);
 if n == 15 && CurrentInstrSet() != InstrSet_A32 then UNPREDICTABLE;
 
 if ConditionPassed() then
     EncodingSpecificOperations();  CheckVFPEnabled(TRUE);
     address = if add then (R[n] + imm32) else (R[n] - imm32);
     case esize of
         when 16
             MemA[address,2] = S[d]<15:0>;
         when 32
             MemA[address,4] = S[d];
         when 64
             // Store as two word-aligned words in the correct order for current endianness.
             MemA[address,4]   = if BigEndian() then D[d]<63:32> else D[d]<31:0>;
             MemA[address+4,4] = if BigEndian() then D[d]<31:0>  else D[d]<63:32>;
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 .64
  Is an optional data size specifier for 64-bit memory accesses that can be used
  in the assembler source code, but is otherwise ignored.

 <Dd>
  Encoded in D:Vd
  Is the 64-bit name of the SIMD&FP source register, encoded in the "D:Vd"
  field.

 .32
  Is an optional data size specifier for 32-bit memory accesses that can be used
  in the assembler source code, but is otherwise ignored.

 <Sd>
  Encoded in Vd:D
  Is the 32-bit name of the SIMD&FP source register, encoded in the "Vd:D"
  field.

 <Rn>
  Encoded in Rn
  Is the general-purpose base register, encoded in the "Rn" field. The PC can be
  used, but this is deprecated.

 +/-
  Encoded in U
  Specifies the offset is added to or subtracted from the base register,
  defaulting to + if omitted and

  U +/- 
  0 -   
  1 +   

 <imm>
  Encoded in imm8
  For the single-precision scalar or double-precision scalar variants: is the
  optional unsigned immediate byte offset, a multiple of 4, in the range 0 to
  1020, defaulting to 0, and encoded in the "imm8" field as <imm>/4.
  For the half-precision scalar variant: is the optional unsigned immediate byte
  offset, a multiple of 2, in the range 0 to 510, defaulting to 0, and encoded
  in the "imm8" field as <imm>/2.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();  CheckVFPEnabled(TRUE);
     address = if add then (R[n] + imm32) else (R[n] - imm32);
     case esize of
         when 16
             MemA[address,2] = S[d]<15:0>;
         when 32
             MemA[address,4] = S[d];
         when 64
             // Store as two word-aligned words in the correct order for current endianness.
             MemA[address,4]   = if BigEndian() then D[d]<63:32> else D[d]<31:0>;
             MemA[address+4,4] = if BigEndian() then D[d]<31:0>  else D[d]<63:32>;

