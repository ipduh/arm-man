.nh
.TH "VPMIN (floating-point) -- AArch32" "7" " "  "instruction" "fpsimd"
.SS VPMIN (floating-point)
 Vector Pairwise Minimum (floating-point)

 Vector Pairwise Minimum compares adjacent pairs of elements in two doubleword
 vectors, and copies the smaller of each pair into the corresponding element in
 the destination doubleword vector.

 Depending on settings in the CPACR, NSACR, and HCPTR registers, and the
 Security state and PE mode in which the instruction is executed, an attempt to
 execute the instruction might be undefined, or trapped to Hyp mode. For more
 information see Enabling Advanced SIMD and floating-point support.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                     22                                            
                   23 |                                            
                 24 | |  20                                        
               25 | | |21 |      16      12       8 7 6 5 4       0
                | | | | | |       |       |       | | | | |       |
   1 1 1 1 0 0 1|1|0|.|1|.|. . . .|. . . .|1 1 1 1|.|0|.|0|. . . .|
                |   | | | |       |       |       | | | | |
                `-U | | | `-Vn    `-Vd    `-opc   | | | | `-Vm
                    | | `-sz                      | | | `-o1
                    | `-op                        | | `-M
                    `-D                           | `-Q
                                                  `-N
  
  
 
.SS A1
 
 VPMIN{<c>}{<q>}.<dt> {<Dd>, }<Dn>, <Dm>
 
 if sz == '1' && !HaveFP16Ext() then UNDEFINED;
 maximum = (op == '0');
 case sz of
     when '0' esize = 32; elements = 2;
     when '1' esize = 16; elements = 4;
 d = UInt(D:Vd);  n = UInt(N:Vn);  m = UInt(M:Vm);
.SS T1 - T32
 
                         05                                        
                       06 |                                        
         13          07 | |                                        
       14 |        08 | | |      01      12       8 7 6 5 4       0
        | |         | | | |       |       |       | | | | |       |
   1 1 1|1|1 1 1 1 0|.|1|.|. . . .|. . . .|1 1 1 1|.|0|.|0|. . . .|
        |           | | | |       |       |       | | | | |
        `-U         | | | `-Vn    `-Vd    `-opc   | | | | `-Vm
                    | | `-sz                      | | | `-o1
                    | `-op                        | | `-M
                    `-D                           | `-Q
                                                  `-N
  
  
 
.SS T1
 
 VPMIN{<c>}{<q>}.<dt> {<Dd>, }<Dn>, <Dm>
 
 if sz == '1' && !HaveFP16Ext() then UNDEFINED;
 if sz == '1' && InITBlock() then UNPREDICTABLE;
 maximum = (op == '0');
 case sz of
     when '0' esize = 32; elements = 2;
     when '1' esize = 16; elements = 4;
 d = UInt(D:Vd);  n = UInt(N:Vn);  m = UInt(M:Vm);
 
 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     bits(64) dest;
     h = elements DIV 2;
 
     for e = 0 to h-1
         op1 = Elem[D[n],2*e,esize];  op2 = Elem[D[n],2*e+1,esize];
         Elem[dest,e,esize] = if maximum then FPMax(op1,op2,StandardFPSCRValue()) else FPMin(op1,op2,StandardFPSCRValue());
         op1 = Elem[D[m],2*e,esize];  op2 = Elem[D[m],2*e+1,esize];
         Elem[dest,e+h,esize] = if maximum then FPMax(op1,op2,StandardFPSCRValue()) else FPMin(op1,op2,StandardFPSCRValue());
 
     D[d] = dest;
 

.SS Assembler Symbols

 <c>
  For encoding A1: see Standard assembler syntax fields. This encoding must be
  unconditional.

 <c>
  For encoding T1: see Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <dt>
  Encoded in sz
  Is the data type for the elements of the vectors,

  sz <dt> 
  0  F32  
  1  F16  

 <Dd>
  Encoded in D:Vd
  Is the 64-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field.

 <Dn>
  Encoded in N:Vn
  Is the 64-bit name of the first SIMD&FP source register, encoded in the "N:Vn"
  field.

 <Dm>
  Encoded in M:Vm
  Is the 64-bit name of the second SIMD&FP source register, encoded in the
  "M:Vm" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     bits(64) dest;
     h = elements DIV 2;
 
     for e = 0 to h-1
         op1 = Elem[D[n],2*e,esize];  op2 = Elem[D[n],2*e+1,esize];
         Elem[dest,e,esize] = if maximum then FPMax(op1,op2,StandardFPSCRValue()) else FPMin(op1,op2,StandardFPSCRValue());
         op1 = Elem[D[m],2*e,esize];  op2 = Elem[D[m],2*e+1,esize];
         Elem[dest,e+h,esize] = if maximum then FPMax(op1,op2,StandardFPSCRValue()) else FPMin(op1,op2,StandardFPSCRValue());
 
     D[d] = dest;

