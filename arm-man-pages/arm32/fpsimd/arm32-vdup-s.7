.nh
.TH "VDUP (scalar) -- AArch32" "7" " "  "instruction" "fpsimd"
.SS VDUP (scalar)
 Duplicate vector element to vector

 Duplicate vector element to vector duplicates a single element of a vector into
 every element of the destination vector.

 The scalar, and the destination vector elements, can be any one of 8-bit,
 16-bit, or 32-bit fields. There is no distinction between data types.

 For more information about scalars see Advanced SIMD scalars.

 Depending on settings in the CPACR, NSACR, and HCPTR registers, and the
 Security state and PE mode in which the instruction is executed, an attempt to
 execute the instruction might be undefined, or trapped to Hyp mode. For more
 information see Enabling Advanced SIMD and floating-point support.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                                                                   
                     22                                            
                   23 |  20      16      12  10     7 6 5 4       0
                    | |   |       |       |   |     | | | |       |
   1 1 1 1 0 0 1 1 1|.|1 1|. . . .|. . . .|1 1|0 0 0|.|.|0|. . . .|
                    |     |       |           |     | |   |
                    `-D   `-imm4  `-Vd        `-opc | `-M `-Vm
                                                    `-Q
  
  
 
 (Q == 0)
 
 VDUP{<c>}{<q>}.<size> <Dd>, <Dm[x]>
 (Q == 1)
 
 VDUP{<c>}{<q>}.<size> <Qd>, <Dm[x]>
 
 if imm4 == 'x000' then UNDEFINED;
 if Q == '1' && Vd<0> == '1' then UNDEFINED;
 case imm4 of
     when 'xxx1'  esize = 8;  elements = 8;  index = UInt(imm4<3:1>);
     when 'xx10'  esize = 16;  elements = 4;  index = UInt(imm4<3:2>);
     when 'x100'  esize = 32;  elements = 2;  index = UInt(imm4<3>);
 d = UInt(D:Vd);  m = UInt(M:Vm);  regs = if Q == '0' then 1 else 2;
.SS T1 - T32
 
                                                                   
                                                                   
                     07                                            
                   08 |  05      01      12  10     7 6 5 4       0
                    | |   |       |       |   |     | | | |       |
   1 1 1 1 1 1 1 1 1|.|1 1|. . . .|. . . .|1 1|0 0 0|.|.|0|. . . .|
                    |     |       |           |     | |   |
                    `-D   `-imm4  `-Vd        `-opc | `-M `-Vm
                                                    `-Q
  
  
 
 (Q == 0)
 
 VDUP{<c>}{<q>}.<size> <Dd>, <Dm[x]>
 (Q == 1)
 
 VDUP{<c>}{<q>}.<size> <Qd>, <Dm[x]>
 
 if imm4 == 'x000' then UNDEFINED;
 if Q == '1' && Vd<0> == '1' then UNDEFINED;
 case imm4 of
     when 'xxx1'  esize = 8;  elements = 8;  index = UInt(imm4<3:1>);
     when 'xx10'  esize = 16;  elements = 4;  index = UInt(imm4<3:2>);
     when 'x100'  esize = 32;  elements = 2;  index = UInt(imm4<3>);
 d = UInt(D:Vd);  m = UInt(M:Vm);  regs = if Q == '0' then 1 else 2;
 
 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     scalar = Elem[D[m],index,esize];
     for r = 0 to regs-1
         for e = 0 to elements-1
             Elem[D[d+r],e,esize] = scalar;
 

.SS Assembler Symbols

 <c>
  For encoding A1: see Standard assembler syntax fields. This encoding must be
  unconditional.

 <c>
  For encoding T1: see Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <size>
  The data size. It must be one of:
  8Encoded as imm4<0> = '1'. imm4<3:1> encodes the index[x] of the scalar.
  16Encoded as imm4<1:0> = '10'. imm4<3:2> encodes the index [x] of the scalar.
  32Encoded as imm4<2:0> = '100'. imm4<3> encodes the index [x] of the scalar.

 <Qd>
  Encoded in D:Vd
  Is the 128-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field as <Qd>*2.

 <Dd>
  Encoded in D:Vd
  Is the 64-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field.

 <Dm[x]>
  The scalar. For details of how [x] is encoded, see the description of <size>.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     scalar = Elem[D[m],index,esize];
     for r = 0 to regs-1
         for e = 0 to elements-1
             Elem[D[d+r],e,esize] = scalar;


.SS Operational Notes

 
 If CPSR.DIT is 1 and this instruction passes its condition execution check: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
