.nh
.TH "VQNEG -- AArch32" "7" " "  "instruction" "fpsimd"
.SS VQNEG
 Vector Saturating Negate

 Vector Saturating Negate negates each element in a vector, and places the
 results in the destination vector.

 If any of the results overflow, they are saturated. The cumulative saturation
 bit, FPSCR.QC, is set if saturation occurs. For details see Pseudocode details
 of saturation.

 Depending on settings in the CPACR, NSACR, and HCPTR registers, and the
 Security state and PE mode in which the instruction is executed, an attempt to
 execute the instruction might be undefined, or trapped to Hyp mode. For more
 information see Enabling Advanced SIMD and floating-point support.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                                                                   
                     22                    11                      
                   23 |  20  18  16      12 |       7 6 5 4       0
                    | |   |   |   |       | |       | | | |       |
   1 1 1 1 0 0 1 1 1|.|1 1|. .|0 0|. . . .|0|1 1 1 1|.|.|0|. . . .|
                    |     |   |   |         |       | |   |
                    `-D   |   |   `-Vd      `-opc2  | `-M `-Vm
                          |   `-opc1                `-Q
                          `-size
  
  
 
.SS 64-bit SIMD vector(Q == 0)
 
 VQNEG{<c>}{<q>}.<dt> <Dd>, <Dm>
.SS 128-bit SIMD vector(Q == 1)
 
 VQNEG{<c>}{<q>}.<dt> <Qd>, <Qm>
 
 if size == '11' then UNDEFINED;
 if Q == '1' && (Vd<0> == '1' || Vm<0> == '1') then UNDEFINED;
 esize = 8 << UInt(size);  elements = 64 DIV esize;
 d = UInt(D:Vd);  m = UInt(M:Vm);  regs = if Q == '0' then 1 else 2;
.SS T1 - T32
 
                                                                   
                                                                   
                     07                    11                      
                   08 |  05  03  01      12 |       7 6 5 4       0
                    | |   |   |   |       | |       | | | |       |
   1 1 1 1 1 1 1 1 1|.|1 1|. .|0 0|. . . .|0|1 1 1 1|.|.|0|. . . .|
                    |     |   |   |         |       | |   |
                    `-D   |   |   `-Vd      `-opc2  | `-M `-Vm
                          |   `-opc1                `-Q
                          `-size
  
  
 
.SS 64-bit SIMD vector(Q == 0)
 
 VQNEG{<c>}{<q>}.<dt> <Dd>, <Dm>
.SS 128-bit SIMD vector(Q == 1)
 
 VQNEG{<c>}{<q>}.<dt> <Qd>, <Qm>
 
 if size == '11' then UNDEFINED;
 if Q == '1' && (Vd<0> == '1' || Vm<0> == '1') then UNDEFINED;
 esize = 8 << UInt(size);  elements = 64 DIV esize;
 d = UInt(D:Vd);  m = UInt(M:Vm);  regs = if Q == '0' then 1 else 2;
 
 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     for r = 0 to regs-1
         for e = 0 to elements-1
             result = -SInt(Elem[D[m+r],e,esize]);
             (Elem[D[d+r],e,esize], sat) = SignedSatQ(result, esize);
             if sat then FPSCR.QC = '1';
 

.SS Assembler Symbols

 <c>
  For encoding A1: see Standard assembler syntax fields. This encoding must be
  unconditional.

 <c>
  For encoding T1: see Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <dt>
  Encoded in size
  Is the data type for the elements of the vectors,

  size <dt>     
  00   S8       
  01   S16      
  10   S32      
  11   RESERVED 

 <Qd>
  Encoded in D:Vd
  Is the 128-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field as <Qd>*2.

 <Qm>
  Encoded in M:Vm
  Is the 128-bit name of the SIMD&FP source register, encoded in the "M:Vm"
  field as <Qm>*2.

 <Dd>
  Encoded in D:Vd
  Is the 64-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field.

 <Dm>
  Encoded in M:Vm
  Is the 64-bit name of the SIMD&FP source register, encoded in the "M:Vm"
  field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     for r = 0 to regs-1
         for e = 0 to elements-1
             result = -SInt(Elem[D[m+r],e,esize]);
             (Elem[D[d+r],e,esize], sat) = SignedSatQ(result, esize);
             if sat then FPSCR.QC = '1';

