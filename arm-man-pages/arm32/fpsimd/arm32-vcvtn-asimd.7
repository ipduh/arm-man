.nh
.TH "VCVTN (Advanced SIMD) -- AArch32" "7" " "  "instruction" "fpsimd"
.SS VCVTN (Advanced SIMD)
 Vector Convert floating-point to integer with Round to Nearest

 Vector Convert floating-point to integer with Round to Nearest converts each
 element in a vector from floating-point to integer using the Round to Nearest
 rounding mode, and places the results in a second vector.

 The operand vector elements are floating-point numbers.

 The result vector elements are integers, and the same size as the operand
 vector elements. Signed and unsigned integers are distinct.

 Depending on settings in the CPACR, NSACR, HCPTR, and FPEXC registers, and the
 Security state and PE mode in which the instruction is executed, an attempt to
 execute the instruction might be undefined, or trapped to Hyp mode. For more
 information see Enabling Advanced SIMD and floating-point support.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                                             10                    
                     22                    11 |                    
                   23 |  20  18  16      12 | |   8 7 6 5 4       0
                    | |   |   |   |       | | |   | | | | |       |
   1 1 1 1 0 0 1 1 1|.|1 1|. .|1 1|. . . .|0|0|0 1|.|.|.|0|. . . .|
                    |     |   |   |           |   | | |   |
                    `-D   |   |   `-Vd        |   | | `-M `-Vm
                          |   `-OP            |   | `-Q
                          `-size              |   `-op
                                              `-RM
  
  
 
.SS 64-bit SIMD vector(Q == 0)
 
 VCVTN{<q>}.<dt>.<dt2> <Dd>, <Dm>
.SS 128-bit SIMD vector(Q == 1)
 
 VCVTN{<q>}.<dt>.<dt2> <Qd>, <Qm>
 
 if Q == '1' && (Vd<0> == '1' || Vm<0> == '1') then UNDEFINED;
 if (size == '01' && !HaveFP16Ext()) || size IN {'00', '11'} then UNDEFINED;
 rounding = FPDecodeRM(RM);  unsigned = (op == '1');
 case size of
     when '01' esize = 16; elements = 4;
     when '10' esize = 32; elements = 2;
 d = UInt(D:Vd);  m = UInt(M:Vm);  regs = if Q == '0' then 1 else 2;
.SS T1 - T32
 
                                                                   
                                             10                    
                     07                    11 |                    
                   08 |  05  03  01      12 | |   8 7 6 5 4       0
                    | |   |   |   |       | | |   | | | | |       |
   1 1 1 1 1 1 1 1 1|.|1 1|. .|1 1|. . . .|0|0|0 1|.|.|.|0|. . . .|
                    |     |   |   |           |   | | |   |
                    `-D   |   |   `-Vd        |   | | `-M `-Vm
                          |   `-opc1          |   | `-Q
                          `-size              |   `-op
                                              `-RM
  
  
 
.SS 64-bit SIMD vector(Q == 0)
 
 VCVTN{<q>}.<dt>.<dt2> <Dd>, <Dm>
.SS 128-bit SIMD vector(Q == 1)
 
 VCVTN{<q>}.<dt>.<dt2> <Qd>, <Qm>
 
 if InITBlock() then UNPREDICTABLE;
 if Q == '1' && (Vd<0> == '1' || Vm<0> == '1') then UNDEFINED;
 if (size == '01' && !HaveFP16Ext()) || size IN {'00', '11'} then UNDEFINED;
 rounding = FPDecodeRM(RM);  unsigned = (op == '1');
 case size of
     when '01' esize = 16; elements = 4;
     when '10' esize = 32; elements = 2;
 d = UInt(D:Vd);  m = UInt(M:Vm);  regs = if Q == '0' then 1 else 2;
 
 EncodingSpecificOperations(); CheckAdvSIMDEnabled();
 bits(esize) result;
 for r = 0 to regs-1
     for e = 0 to elements-1
         Elem[D[d+r],e,esize] = FPToFixed(Elem[D[m+r],e,esize], 0, unsigned,
                                          StandardFPSCRValue(), rounding);
 

.SS Assembler Symbols

 <q>
  See Standard assembler syntax fields.

 <dt>
  Encoded in op:size
  Is the data type for the elements of the destination,

  op size <dt> 
  0  01   S16  
  0  10   S32  
  1  01   U16  
  1  10   U32  

 <dt2>
  Encoded in size
  Is the data type for the elements of the source vector,

  size <dt2> 
  01   F16   
  10   F32   

 <Qd>
  Encoded in D:Vd
  Is the 128-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field as <Qd>*2.

 <Qm>
  Encoded in M:Vm
  Is the 128-bit name of the SIMD&FP source register, encoded in the "M:Vm"
  field as <Qm>*2.

 <Dd>
  Encoded in D:Vd
  Is the 64-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field.

 <Dm>
  Encoded in M:Vm
  Is the 64-bit name of the SIMD&FP source register, encoded in the "M:Vm"
  field.



.SS Operation

 EncodingSpecificOperations(); CheckAdvSIMDEnabled();
 bits(esize) result;
 for r = 0 to regs-1
     for e = 0 to elements-1
         Elem[D[d+r],e,esize] = FPToFixed(Elem[D[m+r],e,esize], 0, unsigned,
                                          StandardFPSCRValue(), rounding);

