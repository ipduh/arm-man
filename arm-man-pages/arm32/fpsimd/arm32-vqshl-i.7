.nh
.TH "VQSHL, VQSHLU (immediate) -- AArch32" "7" " "  "instruction" "fpsimd"
.SS VQSHL, VQSHLU (immediate)
 Vector Saturating Shift Left (immediate)

 Vector Saturating Shift Left (immediate) takes each element in a vector of
 integers, left shifts them by an immediate value, and places the results in a
 second vector.

 The operand elements must all be the same size, and can be any one of:


 The result elements are the same size as the operand elements. If the operand
 elements are signed, the results can be either signed or unsigned. If the
 operand elements are unsigned, the result elements must also be unsigned.

 If any of the results overflow, they are saturated. The cumulative saturation
 bit, FPSCR.QC, is set if saturation occurs. For details see Pseudocode details
 of saturation.

 Depending on settings in the CPACR, NSACR, and HCPTR registers, and the
 Security state and PE mode in which the instruction is executed, an attempt to
 execute the instruction might be undefined, or trapped to Hyp mode. For more
 information see Enabling Advanced SIMD and floating-point support.

 Related encodings: See Advanced SIMD one register and modified immediate for
 the T32 instruction set, or Advanced SIMD one register and modified immediate
 for the A32 instruction set.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                     22                                            
                   23 |                                            
                 24 | |                                            
               25 | | |          16      12     9 8 7 6 5 4       0
                | | | |           |       |     | | | | | |       |
   1 1 1 1 0 0 1|.|1|.|. . . . . .|. . . .|0 1 1|.|.|.|.|1|. . . .|
                |   | |           |             | | | |   |
                `-U | `-imm6      `-Vd          | | | `-M `-Vm
                    `-D                         | | `-Q
                                                | `-L
                                                `-op
  
  
 
.SS VQSHL,double,signed-result(!(imm6 == 000xxx && L == 0) && op == 1 && Q == 0)
 
 VQSHL{<c>}{<q>}.<type><size> {<Dd>,} <Dm>, #<imm>
.SS VQSHL,quad,signed-result(!(imm6 == 000xxx && L == 0) && op == 1 && Q == 1)
 
 VQSHL{<c>}{<q>}.<type><size> {<Qd>,} <Qm>, #<imm>
.SS VQSHLU,double,unsigned-result(U == 1 && !(imm6 == 000xxx && L == 0) && op == 0 && Q == 0)
 
 VQSHLU{<c>}{<q>}.<type><size> {<Dd>,} <Dm>, #<imm>
.SS VQSHLU,quad,unsigned-result(U == 1 && !(imm6 == 000xxx && L == 0) && op == 0 && Q == 1)
 
 VQSHLU{<c>}{<q>}.<type><size> {<Qd>,} <Qm>, #<imm>
 
 if (L:imm6) == '0000xxx' then SEE "Related encodings";
 if U == '0' && op == '0' then UNDEFINED;
 if Q == '1' && (Vd<0> == '1' || Vm<0> == '1') then UNDEFINED;
 case L:imm6 of
     when '0001xxx'  esize = 8;  elements = 8;  shift_amount = UInt(imm6) - 8;
     when '001xxxx'  esize = 16;  elements = 4;  shift_amount = UInt(imm6) - 16;
     when '01xxxxx'  esize = 32;  elements = 2;  shift_amount = UInt(imm6) - 32;
     when '1xxxxxx'  esize = 64;  elements = 1;  shift_amount = UInt(imm6);
 src_unsigned = (U == '1' && op == '1');  dest_unsigned = (U == '1');
 d = UInt(D:Vd);  m = UInt(M:Vm);  regs = if Q == '0' then 1 else 2;
.SS T1 - T32
 
                                                                   
                                                                   
         13          07                                            
       14 |        08 |          01      12     9 8 7 6 5 4       0
        | |         | |           |       |     | | | | | |       |
   1 1 1|.|1 1 1 1 1|.|. . . . . .|. . . .|0 1 1|.|.|.|.|1|. . . .|
        |           | |           |             | | | |   |
        `-U         | `-imm6      `-Vd          | | | `-M `-Vm
                    `-D                         | | `-Q
                                                | `-L
                                                `-op
  
  
 
.SS VQSHL,double,signed-result(!(imm6 == 000xxx && L == 0) && op == 1 && Q == 0)
 
 VQSHL{<c>}{<q>}.<type><size> {<Dd>,} <Dm>, #<imm>
.SS VQSHL,quad,signed-result(!(imm6 == 000xxx && L == 0) && op == 1 && Q == 1)
 
 VQSHL{<c>}{<q>}.<type><size> {<Qd>,} <Qm>, #<imm>
.SS VQSHLU,double,unsigned-result(U == 1 && !(imm6 == 000xxx && L == 0) && op == 0 && Q == 0)
 
 VQSHLU{<c>}{<q>}.<type><size> {<Dd>,} <Dm>, #<imm>
.SS VQSHLU,quad,unsigned-result(U == 1 && !(imm6 == 000xxx && L == 0) && op == 0 && Q == 1)
 
 VQSHLU{<c>}{<q>}.<type><size> {<Qd>,} <Qm>, #<imm>
 
 if (L:imm6) == '0000xxx' then SEE "Related encodings";
 if U == '0' && op == '0' then UNDEFINED;
 if Q == '1' && (Vd<0> == '1' || Vm<0> == '1') then UNDEFINED;
 case L:imm6 of
     when '0001xxx'  esize = 8;  elements = 8;  shift_amount = UInt(imm6) - 8;
     when '001xxxx'  esize = 16;  elements = 4;  shift_amount = UInt(imm6) - 16;
     when '01xxxxx'  esize = 32;  elements = 2;  shift_amount = UInt(imm6) - 32;
     when '1xxxxxx'  esize = 64;  elements = 1;  shift_amount = UInt(imm6);
 src_unsigned = (U == '1' && op == '1');  dest_unsigned = (U == '1');
 d = UInt(D:Vd);  m = UInt(M:Vm);  regs = if Q == '0' then 1 else 2;
 
 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     for r = 0 to regs-1
         for e = 0 to elements-1
             operand = Int(Elem[D[m+r],e,esize], src_unsigned);
             (result, sat) = SatQ(operand << shift_amount, esize, dest_unsigned);
             Elem[D[d+r],e,esize] = result;
             if sat then FPSCR.QC = '1';
 

.SS Assembler Symbols

 <c>
  For encoding A1: see Standard assembler syntax fields. This encoding must be
  unconditional.

 <c>
  For encoding T1: see Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <type>
  Encoded in U
  Is the data type for the elements of the vectors,

  U <type> 
  0 S      
  1 U      

 <size>
  Encoded in L:imm6<5:3>
  Is the data size for the elements of the vectors,

  L imm6<5:3> <size> 
  0 001       8      
  0 01x       16     
  0 1xx       32     
  1 xxx       64     

 <Qd>
  Encoded in D:Vd
  Is the 128-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field as <Qd>*2.

 <Qm>
  Encoded in M:Vm
  Is the 128-bit name of the SIMD&FP source register, encoded in the "M:Vm"
  field as <Qm>*2.

 <Dd>
  Encoded in D:Vd
  Is the 64-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field.

 <Dm>
  Encoded in M:Vm
  Is the 64-bit name of the SIMD&FP source register, encoded in the "M:Vm"
  field.

 <imm>
  Encoded in imm6
  Is an immediate value, in the range 0 to <size>-1, encoded in the "imm6"
  field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     for r = 0 to regs-1
         for e = 0 to elements-1
             operand = Int(Elem[D[m+r],e,esize], src_unsigned);
             (result, sat) = SatQ(operand << shift_amount, esize, dest_unsigned);
             Elem[D[d+r],e,esize] = result;
             if sat then FPSCR.QC = '1';

