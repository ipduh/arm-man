.nh
.TH "VSLI -- AArch32" "7" " "  "instruction" "fpsimd"
.SS VSLI
 Vector Shift Left and Insert

 Vector Shift Left and Insert takes each element in the operand vector, left
 shifts them by an immediate value, and inserts the results in the destination
 vector. Bits shifted out of the left of each element are lost.

 The elements must all be the same size, and can be 8-bit, 16-bit, 32-bit, or
 64-bit. There is no distinction between data types.

 Depending on settings in the CPACR, NSACR, and HCPTR registers, and the
 Security state and PE mode in which the instruction is executed, an attempt to
 execute the instruction might be undefined, or trapped to Hyp mode. For more
 information see Enabling Advanced SIMD and floating-point support.

 Related encodings: See Advanced SIMD one register and modified immediate for
 the T32 instruction set, or Advanced SIMD one register and modified immediate
 for the A32 instruction set.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                     22                                            
                   23 |                                            
                 24 | |                                            
               25 | | |          16      12       8 7 6 5 4       0
                | | | |           |       |       | | | | |       |
   1 1 1 1 0 0 1|1|1|.|. . . . . .|. . . .|0 1 0 1|.|.|.|1|. . . .|
                |   | |           |       |       | | |   |
                `-U | `-imm6      `-Vd    `-opc   | | `-M `-Vm
                    `-D                           | `-Q
                                                  `-L
  
  
 
.SS 64-bit SIMD vector(!(imm6 == 000xxx && L == 0) && Q == 0)
 
 VSLI{<c>}{<q>}.<size> {<Dd>,} <Dm>, #<imm>
.SS 128-bit SIMD vector(!(imm6 == 000xxx && L == 0) && Q == 1)
 
 VSLI{<c>}{<q>}.<size> {<Qd>,} <Qm>, #<imm>
 
 if (L:imm6) == '0000xxx' then SEE "Related encodings";
 if Q == '1' && (Vd<0> == '1' || Vm<0> == '1') then UNDEFINED;
 case L:imm6 of
     when '0001xxx'  esize = 8;  elements = 8;  shift_amount = UInt(imm6) - 8;
     when '001xxxx'  esize = 16;  elements = 4;  shift_amount = UInt(imm6) - 16;
     when '01xxxxx'  esize = 32;  elements = 2;  shift_amount = UInt(imm6) - 32;
     when '1xxxxxx'  esize = 64;  elements = 1;  shift_amount = UInt(imm6);
 d = UInt(D:Vd);  m = UInt(M:Vm);  regs = if Q == '0' then 1 else 2;
.SS T1 - T32
 
                                                                   
                                                                   
         13          07                                            
       14 |        08 |          01      12       8 7 6 5 4       0
        | |         | |           |       |       | | | | |       |
   1 1 1|1|1 1 1 1 1|.|. . . . . .|. . . .|0 1 0 1|.|.|.|1|. . . .|
        |           | |           |       |       | | |   |
        `-U         | `-imm6      `-Vd    `-opc   | | `-M `-Vm
                    `-D                           | `-Q
                                                  `-L
  
  
 
.SS 64-bit SIMD vector(!(imm6 == 000xxx && L == 0) && Q == 0)
 
 VSLI{<c>}{<q>}.<size> {<Dd>,} <Dm>, #<imm>
.SS 128-bit SIMD vector(!(imm6 == 000xxx && L == 0) && Q == 1)
 
 VSLI{<c>}{<q>}.<size> {<Qd>,} <Qm>, #<imm>
 
 if (L:imm6) == '0000xxx' then SEE "Related encodings";
 if Q == '1' && (Vd<0> == '1' || Vm<0> == '1') then UNDEFINED;
 case L:imm6 of
     when '0001xxx'  esize = 8;  elements = 8;  shift_amount = UInt(imm6) - 8;
     when '001xxxx'  esize = 16;  elements = 4;  shift_amount = UInt(imm6) - 16;
     when '01xxxxx'  esize = 32;  elements = 2;  shift_amount = UInt(imm6) - 32;
     when '1xxxxxx'  esize = 64;  elements = 1;  shift_amount = UInt(imm6);
 d = UInt(D:Vd);  m = UInt(M:Vm);  regs = if Q == '0' then 1 else 2;
 
 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     mask = LSL(Ones(esize), shift_amount);
     for r = 0 to regs-1
         for e = 0 to elements-1
             shifted_op = LSL(Elem[D[m+r],e,esize], shift_amount);
             Elem[D[d+r],e,esize] = (Elem[D[d+r],e,esize] AND NOT(mask)) OR shifted_op;
 

.SS Assembler Symbols

 <c>
  For encoding A1: see Standard assembler syntax fields. This encoding must be
  unconditional.

 <c>
  For encoding T1: see Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <size>
  Encoded in L:imm6<5:3>
  Is the data size for the elements of the vectors,

  L imm6<5:3> <size> 
  0 001       8      
  0 01x       16     
  0 1xx       32     
  1 xxx       64     

 <Qd>
  Encoded in D:Vd
  Is the 128-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field as <Qd>*2.

 <Qm>
  Encoded in M:Vm
  Is the 128-bit name of the SIMD&FP source register, encoded in the "M:Vm"
  field as <Qm>*2.

 <Dd>
  Encoded in D:Vd
  Is the 64-bit name of the SIMD&FP destination register, encoded in the "D:Vd"
  field.

 <Dm>
  Encoded in M:Vm
  Is the 64-bit name of the SIMD&FP source register, encoded in the "M:Vm"
  field.

 <imm>
  Encoded in imm6
  Is an immediate value, in the range 0 to <size>-1, encoded in the "imm6"
  field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();  CheckAdvSIMDEnabled();
     mask = LSL(Ones(esize), shift_amount);
     for r = 0 to regs-1
         for e = 0 to elements-1
             shifted_op = LSL(Elem[D[m+r],e,esize], shift_amount);
             Elem[D[d+r],e,esize] = (Elem[D[d+r],e,esize] AND NOT(mask)) OR shifted_op;


.SS Operational Notes

 
 If CPSR.DIT is 1 and this instruction passes its condition execution check: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
