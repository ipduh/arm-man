.nh
.TH "MVN, MVNS (register-shifted register) -- AArch32" "7" " "  "instruction" "general"
.SS MVN, MVNS (register-shifted register)
 Bitwise NOT (register-shifted register)

 Bitwise NOT (register-shifted register) writes the bitwise inverse of a
 register-shifted register value to the destination register. It can optionally
 update the condition flags based on the result.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.



.SS A1 - A32
 
                                                                   
                                                                   
                         20                                        
         28        23  21 |      16      12       8 7   5 4       0
          |         |   | |       |       |       | |   | |       |
  |. . . .|0 0 0 1 1|1 1|.|0 0 0 0|. . . .|. . . .|0|. .|1|. . . .|
  |                 |   | |       |       |         |     |
  `-cond(!= 1111)   |   | `-Rn    `-Rd    `-Rs      |     `-Rm
                    |   `-S                         `-stype
                    `-opc
  
  
 
.SS Flag setting(S == 1)
 
 MVNS{<c>}{<q>} <Rd>, <Rm>, <shift> <Rs>
.SS Not flag setting(S == 0)
 
 MVN{<c>}{<q>} <Rd>, <Rm>, <shift> <Rs>
 
 d = UInt(Rd);  m = UInt(Rm);  s = UInt(Rs);
 setflags = (S == '1');  shift_t = DecodeRegShift(stype);
 if d == 15 || m == 15 || s == 15 then UNPREDICTABLE;
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     shift_n = UInt(R[s]<7:0>);
     (shifted, carry) = Shift_C(R[m], shift_t, shift_n, PSTATE.C);
     result = NOT(shifted);
     R[d] = result;
     if setflags then
         PSTATE.N = result<31>;
         PSTATE.Z = IsZeroBit(result);
         PSTATE.C = carry;
         // PSTATE.V unchanged
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rd>
  Encoded in Rd
  Is the general-purpose destination register, encoded in the "Rd" field.

 <Rm>
  Encoded in Rm
  Is the general-purpose source register, encoded in the "Rm" field.

 <shift>
  Encoded in stype
  Is the type of shift to be applied to the second source register,

  stype <shift> 
  00    LSL     
  01    LSR     
  10    ASR     
  11    ROR     

 <Rs>
  Encoded in Rs
  Is the general-purpose source register holding a shift amount in its bottom 8
  bits, encoded in the "Rs" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     shift_n = UInt(R[s]<7:0>);
     (shifted, carry) = Shift_C(R[m], shift_t, shift_n, PSTATE.C);
     result = NOT(shifted);
     R[d] = result;
     if setflags then
         PSTATE.N = result<31>;
         PSTATE.Z = IsZeroBit(result);
         PSTATE.C = carry;
         // PSTATE.V unchanged

