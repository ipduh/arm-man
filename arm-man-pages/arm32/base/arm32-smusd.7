.nh
.TH "SMUSD, SMUSDX -- AArch32" "7" " "  "instruction" "general"
.SS SMUSD, SMUSDX
 Signed Multiply Subtract Dual

 Signed Multiply Subtract Dual performs two signed 16 x 16-bit multiplications.
 It subtracts one of the products from the other, and writes the result to the
 destination register.

 Optionally, the instruction can exchange the halfwords of the second operand
 before performing the arithmetic. This produces top x bottom and bottom x top
 multiplication.

 Overflow cannot occur.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                                                                   
                                                                   
         28        23    20      16      12       8   6 5 4       0
          |         |     |       |       |       |   | | |       |
  |. . . .|0 1 1 1 0|0 0 0|. . . .|1 1 1 1|. . . .|0 1|.|1|. . . .|
  |                 |     |       |       |           |   |
  `-cond(!= 1111)   `-op1 `-Rd    `-Ra    `-Rm        `-M `-Rn
  
  
 
.SS SMUSD(M == 0)
 
 SMUSD{<c>}{<q>} {<Rd>,} <Rn>, <Rm>
.SS SMUSDX(M == 1)
 
 SMUSDX{<c>}{<q>} {<Rd>,} <Rn>, <Rm>
 
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);  m_swap = (M == '1');
 if d == 15 || n == 15 || m == 15 then UNPREDICTABLE;
.SS T1 - T32
 
                                                                   
                                                                   
                                                                   
                   08    05      01      12       8   6 5 4       0
                    |     |       |       |       |   | | |       |
   1 1 1 1 1 0 1 1 0|1 0 0|. . . .|1 1 1 1|. . . .|0 0|0|.|. . . .|
                    |     |       |       |             | |
                    `-op1 `-Rn    `-Ra    `-Rd          | `-Rm
                                                        `-M
  
  
 
.SS SMUSD(M == 0)
 
 SMUSD{<c>}{<q>} {<Rd>,} <Rn>, <Rm>
.SS SMUSDX(M == 1)
 
 SMUSDX{<c>}{<q>} {<Rd>,} <Rn>, <Rm>
 
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);  m_swap = (M == '1');
 if d == 15 || n == 15 || m == 15 then UNPREDICTABLE; // Armv8-A removes UNPREDICTABLE for R13
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     operand2 = if m_swap then ROR(R[m],16) else R[m];
     product1 = SInt(R[n]<15:0>) * SInt(operand2<15:0>);
     product2 = SInt(R[n]<31:16>) * SInt(operand2<31:16>);
     result = product1 - product2;
     R[d] = result<31:0>;
     // Signed overflow cannot occur
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rd>
  Encoded in Rd
  Is the general-purpose destination register, encoded in the "Rd" field.

 <Rn>
  Encoded in Rn
  Is the first general-purpose source register, encoded in the "Rn" field.

 <Rm>
  Encoded in Rm
  Is the second general-purpose source register, encoded in the "Rm" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     operand2 = if m_swap then ROR(R[m],16) else R[m];
     product1 = SInt(R[n]<15:0>) * SInt(operand2<15:0>);
     product2 = SInt(R[n]<31:16>) * SInt(operand2<31:16>);
     result = product1 - product2;
     R[d] = result<31:0>;
     // Signed overflow cannot occur

