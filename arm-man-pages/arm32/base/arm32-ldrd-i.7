.nh
.TH "LDRD (immediate) -- AArch32" "7" " "  "instruction" "general"
.SS LDRD (immediate)
 Load Register Dual (immediate)

 Load Register Dual (immediate) calculates an address from a base register value
 and an immediate offset, loads two words from memory, and writes them to two
 registers. It can use offset, post-indexed, or pre-indexed addressing. For
 information about memory accesses see Memory accesses.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.

 Related encodings: Load/store dual, load/store exclusive, table branch.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                     22                                            
                   23 |                                            
                 24 | |  20                                        
         28    25 | | |21 |      16      12       8 7   5 4       0
          |     | | | | | |       |       |       | |   | |       |
  |. . . .|0 0 0|.|.|1|.|0|. . . .|. . . .|. . . .|1|1 0|1|. . . .|
  |             | |   | | |       |       |         |     |
  |             | `-U | | |       `-Rt    `-imm4H   `-op2 `-imm4L
  |             `-P   | | `-Rn(!= 1111)
  `-cond(!= 1111)     | `-o1
                      `-W
  
  
 
.SS Offset(P == 1 && W == 0)
 
 LDRD{<c>}{<q>} <Rt>, <Rt2>, [<Rn> {, #{+/-}<imm>}]
.SS Post-indexed(P == 0 && W == 0)
 
 LDRD{<c>}{<q>} <Rt>, <Rt2>, [<Rn>], #{+/-}<imm>
.SS Pre-indexed(P == 1 && W == 1)
 
 LDRD{<c>}{<q>} <Rt>, <Rt2>, [<Rn>, #{+/-}<imm>]!
 
 if Rn == '1111' then SEE "LDRD (literal)";
 if Rt<0> == '1' then UNPREDICTABLE;
 t = UInt(Rt);  t2 = t+1;  n = UInt(Rn);  imm32 = ZeroExtend(imm4H:imm4L, 32);
 index = (P == '1');  add = (U == '1');  wback = (P == '0') || (W == '1');
 if P == '0' && W == '1' then UNPREDICTABLE;
 if wback && (n == t || n == t2) then UNPREDICTABLE;
 if t2 == 15 then UNPREDICTABLE;
.SS T1 - T32
 
                     07                                            
                   08 |                                            
                 09 | |  05                                        
               10 | | |06 |      01      12       8               0
                | | | | | |       |       |       |               |
   1 1 1 0 1 0 0|.|.|1|.|1|. . . .|. . . .|. . . .|. . . . . . . .|
                | |   | | |       |       |       |
                | `-U | | |       `-Rt    `-Rt2   `-imm8
                `-P   | | `-Rn(!= 1111)
                      | `-L
                      `-W
  
  
 
.SS Offset(P == 1 && W == 0)
 
 LDRD{<c>}{<q>} <Rt>, <Rt2>, [<Rn> {, #{+/-}<imm>}]
.SS Post-indexed(P == 0 && W == 1)
 
 LDRD{<c>}{<q>} <Rt>, <Rt2>, [<Rn>], #{+/-}<imm>
.SS Pre-indexed(P == 1 && W == 1)
 
 LDRD{<c>}{<q>} <Rt>, <Rt2>, [<Rn>, #{+/-}<imm>]!
 
 if P == '0' && W == '0' then SEE "Related encodings";
 if Rn == '1111' then SEE "LDRD (literal)";
 t = UInt(Rt);  t2 = UInt(Rt2);  n = UInt(Rn);  imm32 = ZeroExtend(imm8:'00', 32);
 index = (P == '1');  add = (U == '1');  wback = (W == '1');
 if wback && (n == t || n == t2) then UNPREDICTABLE;
 if t == 15 || t2 == 15 || t == t2 then UNPREDICTABLE; // Armv8-A removes UNPREDICTABLE for R13
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     offset_addr = if add then (R[n] + imm32) else (R[n] - imm32);
     address = if index then offset_addr else R[n];
     if address == Align(address, 8) then
         data = MemA[address,8];
         if BigEndian()  then
             R[t] = data<63:32>;
             R[t2] = data<31:0>;
         else
             R[t] = data<31:0>;
             R[t2] = data<63:32>;
     else
         R[t] = MemA[address,4];
         R[t2] = MemA[address+4,4];
     if wback then R[n] = offset_addr;
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rt>
  Encoded in Rt
  For encoding A1: is the first general-purpose register to be transferred,
  encoded in the "Rt" field. This register must be even-numbered and not R14.

 <Rt>
  Encoded in Rt
  For encoding T1: is the first general-purpose register to be transferred,
  encoded in the "Rt" field.

 <Rt2>
  For encoding A1: is the second general-purpose register to be transferred.
  This register must be <R(t+1)>.

 <Rt2>
  Encoded in Rt2
  For encoding T1: is the second general-purpose register to be transferred,
  encoded in the "Rt2" field.

 <Rn>
  Encoded in Rn
  Is the general-purpose base register, encoded in the "Rn" field. For PC use
  see LDRD (literal).

 +/-
  Encoded in U
  Specifies the offset is added to or subtracted from the base register,
  defaulting to + if omitted and

  U +/- 
  0 -   
  1 +   

 <imm>
  Encoded in imm4H:imm4L
  For encoding A1: is the 8-bit unsigned immediate byte offset, in the range 0
  to 255, defaulting to 0 if omitted, and encoded in the "imm4H:imm4L" field.

 <imm>
  Encoded in imm8
  For encoding T1: is the unsigned immediate byte offset, a multiple of 4, in
  the range 0 to 1020, defaulting to 0 if omitted, and encoded in the "imm8"
  field as <imm>/4.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     offset_addr = if add then (R[n] + imm32) else (R[n] - imm32);
     address = if index then offset_addr else R[n];
     if address == Align(address, 8) then
         data = MemA[address,8];
         if BigEndian()  then
             R[t] = data<63:32>;
             R[t2] = data<31:0>;
         else
             R[t] = data<31:0>;
             R[t2] = data<63:32>;
     else
         R[t] = MemA[address,4];
         R[t2] = MemA[address+4,4];
     if wback then R[n] = offset_addr;


.SS Operational Notes

 
 If CPSR.DIT is 1, the timing of this instruction is insensitive to the value of the data being loaded or stored.
