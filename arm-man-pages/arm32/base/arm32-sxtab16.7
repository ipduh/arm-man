.nh
.TH "SXTAB16 -- AArch32" "7" " "  "instruction" "general"
.SS SXTAB16
 Signed Extend and Add Byte 16

 Signed Extend and Add Byte 16 extracts two 8-bit values from a register, sign-
 extends them to 16 bits each, adds the results to two 16-bit values from
 another register, and writes the final results to the destination register. The
 instruction can specify a rotation by 0, 8, 16, or 24 bits before extracting
 the 8-bit values.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                                                                   
                     22                                            
         28        23 |  20      16      12  10 9 8       4       0
          |         | |   |       |       |   | | |       |       |
  |. . . .|0 1 1 0 1|0|0 0|. . . .|. . . .|. .|0|0|0 1 1 1|. . . .|
  |                 | |   |       |       |               |
  `-cond(!= 1111)   | |   |       `-Rd    `-rotate        `-Rm
                    | |   `-Rn(!= 1111)
                    | `-op
                    `-U
  
  
 
.SS A1
 
 SXTAB16{<c>}{<q>} {<Rd>,} <Rn>, <Rm> {, ROR #<amount>}
 
 if Rn == '1111' then SEE "SXTB16";
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);  rotation = UInt(rotate:'000');
 if d == 15 || m == 15 then UNPREDICTABLE;
.SS T1 - T32
 
                                                                   
                                                                   
                         05                                        
                   08  06 |      01      12       8 7 6   4       0
                    |   | |       |       |       | | |   |       |
   1 1 1 1 1 0 1 0 0|0 1|0|. . . .|1 1 1 1|. . . .|1|0|. .|. . . .|
                    |   | |               |           |   |
                    |   | `-Rn(!= 1111)   `-Rd        |   `-Rm
                    |   `-U                           `-rotate
                    `-op1
  
  
 
.SS T1
 
 SXTAB16{<c>}{<q>} {<Rd>,} <Rn>, <Rm> {, ROR #<amount>}
 
 if Rn == '1111' then SEE "SXTB16";
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);  rotation = UInt(rotate:'000');
 if d == 15 || m == 15 then UNPREDICTABLE; // Armv8-A removes UNPREDICTABLE for R13
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     rotated = ROR(R[m], rotation);
     R[d]<15:0>  = R[n]<15:0> + SignExtend(rotated<7:0>, 16);
     R[d]<31:16> = R[n]<31:16> + SignExtend(rotated<23:16>, 16);
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rd>
  Encoded in Rd
  Is the general-purpose destination register, encoded in the "Rd" field.

 <Rn>
  Encoded in Rn
  Is the first general-purpose source register, encoded in the "Rn" field.

 <Rm>
  Encoded in Rm
  Is the second general-purpose source register, encoded in the "Rm" field.

 <amount>
  Encoded in rotate
  Is the rotate amount,

  rotate <amount>  
  00     (omitted) 
  01     8         
  10     16        
  11     24        



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     rotated = ROR(R[m], rotation);
     R[d]<15:0>  = R[n]<15:0> + SignExtend(rotated<7:0>, 16);
     R[d]<31:16> = R[n]<31:16> + SignExtend(rotated<23:16>, 16);


.SS Operational Notes

 
 If CPSR.DIT is 1, this instruction has passed its condition execution check, and does not use R15 as either its source or destination: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
