.nh
.TH "SMMLS, SMMLSR -- AArch32" "7" " "  "instruction" "general"
.SS SMMLS, SMMLSR
 Signed Most Significant Word Multiply Subtract

 Signed Most Significant Word Multiply Subtract multiplies two signed 32-bit
 values, subtracts the result from a 32-bit accumulate value that is shifted
 left by 32 bits, and extracts the most significant 32 bits of the result of
 that subtraction.

 Optionally, the instruction can specify that the result of the instruction is
 rounded instead of being truncated. In this case, the constant 0x80000000 is
 added to the result of the subtraction before the high word is extracted.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                                                                   
                                                                   
         28        23    20      16      12       8   6 5 4       0
          |         |     |       |       |       |   | | |       |
  |. . . .|0 1 1 1 0|1 0 1|. . . .|. . . .|. . . .|1 1|.|1|. . . .|
  |                 |     |       |       |           |   |
  `-cond(!= 1111)   `-op1 `-Rd    `-Ra    `-Rm        `-R `-Rn
  
  
 
.SS SMMLS(R == 0)
 
 SMMLS{<c>}{<q>} <Rd>, <Rn>, <Rm>, <Ra>
.SS SMMLSR(R == 1)
 
 SMMLSR{<c>}{<q>} <Rd>, <Rn>, <Rm>, <Ra>
 
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);  a = UInt(Ra);  round = (R == '1');
 if d == 15 || n == 15 || m == 15 || a == 15 then UNPREDICTABLE;
.SS T1 - T32
 
                                                                   
                                                                   
                                                                   
                   08    05      01      12       8   6 5 4       0
                    |     |       |       |       |   | | |       |
   1 1 1 1 1 0 1 1 0|1 1 0|. . . .|. . . .|. . . .|0 0|0|.|. . . .|
                    |     |       |       |             | |
                    `-op1 `-Rn    `-Ra    `-Rd          | `-Rm
                                                        `-R
  
  
 
.SS SMMLS(R == 0)
 
 SMMLS{<c>}{<q>} <Rd>, <Rn>, <Rm>, <Ra>
.SS SMMLSR(R == 1)
 
 SMMLSR{<c>}{<q>} <Rd>, <Rn>, <Rm>, <Ra>
 
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);  a = UInt(Ra);  round = (R == '1');
 if d == 15 || n == 15 || m == 15 || a == 15 then UNPREDICTABLE;
 // Armv8-A removes UNPREDICTABLE for R13
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     result = (SInt(R[a]) << 32) - SInt(R[n]) * SInt(R[m]);
     if round then result = result + 0x80000000;
     R[d] = result<63:32>;
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rd>
  Encoded in Rd
  Is the general-purpose destination register, encoded in the "Rd" field.

 <Rn>
  Encoded in Rn
  Is the first general-purpose source register holding the multiplicand, encoded
  in the "Rn" field.

 <Rm>
  Encoded in Rm
  Is the second general-purpose source register holding the multiplier, encoded
  in the "Rm" field.

 <Ra>
  Encoded in Ra
  Is the third general-purpose source register holding the addend, encoded in
  the "Ra" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     result = (SInt(R[a]) << 32) - SInt(R[n]) * SInt(R[m]);
     if round then result = result + 0x80000000;
     R[d] = result<63:32>;


.SS Operational Notes

 
 If CPSR.DIT is 1, this instruction has passed its condition execution check, and does not use R15 as either its source or destination: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
