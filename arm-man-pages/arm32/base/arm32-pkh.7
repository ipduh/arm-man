.nh
.TH "PKHBT, PKHTB -- AArch32" "7" " "  "instruction" "general"
.SS PKHBT, PKHTB
 Pack Halfword

 Pack Halfword combines one halfword of its first operand with the other
 halfword of its shifted second operand.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                                                                   
                                                                   
         28              20      16      12         7 6   4       0
          |               |       |       |         | |   |       |
  |. . . .|0 1 1 0 1 0 0 0|. . . .|. . . .|. . . . .|.|0 1|. . . .|
  |                       |       |       |         |     |
  `-cond(!= 1111)         `-Rn    `-Rd    `-imm5    `-tb  `-Rm
  
  
 
.SS PKHBT(tb == 0)
 
 PKHBT{<c>}{<q>} {<Rd>,} <Rn>, <Rm> {, LSL #<imm>}
.SS PKHTB(tb == 1)
 
 PKHTB{<c>}{<q>} {<Rd>,} <Rn>, <Rm> {, ASR #<imm>}
 
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);  tbform = (tb == '1');
 (shift_t, shift_n) = DecodeImmShift(tb:'0', imm5);
 if d == 15 || n == 15 || m == 15 then UNPREDICTABLE;
.SS T1 - T32
 
                                                                   
                                                                   
                         05        15                              
               10      06 |      01 |    12       8   6 5 4       0
                |       | |       | |     |       |   | | |       |
   1 1 1 0 1 0 1|0 1 1 0|0|. . . .|0|. . .|. . . .|. .|.|0|. . . .|
                |       | |         |     |       |   | | |
                `-op1   | `-Rn      |     `-Rd    |   | | `-Rm
                        `-S         `-imm3        |   | `-T
                                                  |   `-tb
                                                  `-imm2
  
  
 
.SS PKHBT(tb == 0)
 
 PKHBT{<c>}{<q>} {<Rd>,} <Rn>, <Rm> {, LSL #<imm>}
.SS PKHTB(tb == 1)
 
 PKHTB{<c>}{<q>} {<Rd>,} <Rn>, <Rm> {, ASR #<imm>}
 
 if S == '1' || T == '1' then UNDEFINED;
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);  tbform = (tb == '1');
 (shift_t, shift_n) = DecodeImmShift(tb:'0', imm3:imm2);
 if d == 15 || n == 15 || m == 15 then UNPREDICTABLE; // Armv8-A removes UNPREDICTABLE for R13
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     operand2 = Shift(R[m], shift_t, shift_n, PSTATE.C);  // PSTATE.C ignored
     R[d]<15:0>  = if tbform then operand2<15:0> else R[n]<15:0>;
     R[d]<31:16> = if tbform then R[n]<31:16>    else operand2<31:16>;
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rd>
  Encoded in Rd
  Is the general-purpose destination register, encoded in the "Rd" field.

 <Rn>
  Encoded in Rn
  Is the first general-purpose source register, encoded in the "Rn" field.

 <Rm>
  Encoded in Rm
  Is the second general-purpose source register, encoded in the "Rm" field.

 <imm>
  Encoded in imm5
  For encoding A1: the shift to apply to the value read from <Rm>, encoded in
  the "imm5" field.  Is one of:                                       omittedNo
  shift, encoded as 0b00000.                                         1-31Left
  shift by specified number of bits, encoded as a binary number.

 <imm>
  Encoded in imm5
  For encoding A1: the shift to apply to the value read from <Rm>, encoded in
  the "imm5" field.  Is one of:
  omittedInstruction is a pseudo-instruction and is assembled as though
  PKHBT{<c>}{<q>} <Rd>, <Rm>, <Rn> had been written.
  1-32Arithmetic right shift by specified number of bits. A shift by 32 bits is
  encoded as 0b00000. Other shift amounts are encoded as binary numbers.
  An assembler can permit <imm> = 0 to mean the same thing as omitting the
  shift, but this is not standard UAL and must not be used for disassembly.

 <imm>
  Encoded in imm3:imm2
  For encoding T1: the shift to apply to the value read from <Rm>, encoded in
  the "imm3:imm2" field.           For PKHBT, it is one of:
  omittedNo shift, encoded as 0b00000.
  1-31Left shift by specified number of bits, encoded as a binary number.
  For PKHTB, it is one of:
  omittedInstruction is a pseudo-instruction and is assembled as though
  PKHBT{<c>}{<q>} <Rd>, <Rm>, <Rn> had been written.
  1-32Arithmetic right shift by specified number of bits. A shift by 32 bits is
  encoded as 0b00000. Other shift amounts are encoded as binary numbers.
  An assembler can permit <imm> = 0 to mean the same thing as omitting the
  shift, but this is not standard UAL and must not be used for disassembly.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     operand2 = Shift(R[m], shift_t, shift_n, PSTATE.C);  // PSTATE.C ignored
     R[d]<15:0>  = if tbform then operand2<15:0> else R[n]<15:0>;
     R[d]<31:16> = if tbform then R[n]<31:16>    else operand2<31:16>;


.SS Operational Notes

 
 If CPSR.DIT is 1, this instruction has passed its condition execution check, and does not use R15 as either its source or destination: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
