.nh
.TH "SMULBB, SMULBT, SMULTB, SMULTT -- AArch32" "7" " "  "instruction" "general"
.SS SMULBB, SMULBT, SMULTB, SMULTT
 Signed Multiply (halfwords)

 Signed Multiply (halfwords) multiplies two signed 16-bit quantities, taken from
 either the bottom or the top half of their respective source registers. The
 other halves of these source registers are ignored. The 32-bit product is
 written to the destination register. No overflow is possible during this
 instruction.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                                                                   
                         20                                        
         28        23  21 |      16      12       8 7 6 5 4       0
          |         |   | |       |       |       | | | | |       |
  |. . . .|0 0 0 1 0|1 1|0|. . . .|0 0 0 0|. . . .|1|.|.|0|. . . .|
  |                 |     |       |       |         | |   |
  `-cond(!= 1111)   `-opc `-Rd    `-Ra    `-Rm      | `-N `-Rn
                                                    `-M
  
  
 
.SS SMULBB(M == 0 && N == 0)
 
 SMULBB{<c>}{<q>} {<Rd>,} <Rn>, <Rm>
.SS SMULBT(M == 1 && N == 0)
 
 SMULBT{<c>}{<q>} {<Rd>,} <Rn>, <Rm>
.SS SMULTB(M == 0 && N == 1)
 
 SMULTB{<c>}{<q>} {<Rd>,} <Rn>, <Rm>
.SS SMULTT(M == 1 && N == 1)
 
 SMULTT{<c>}{<q>} {<Rd>,} <Rn>, <Rm>
 
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);
 n_high = (N == '1');  m_high = (M == '1');
 if d == 15 || n == 15 || m == 15 then UNPREDICTABLE;
.SS T1 - T32
 
                                                                   
                                                                   
                                                                   
                   08    05      01      12       8   6 5 4       0
                    |     |       |       |       |   | | |       |
   1 1 1 1 1 0 1 1 0|0 0 1|. . . .|1 1 1 1|. . . .|0 0|.|.|. . . .|
                    |     |       |       |           | | |
                    `-op1 `-Rn    `-Ra    `-Rd        | | `-Rm
                                                      | `-M
                                                      `-N
  
  
 
.SS SMULBB(N == 0 && M == 0)
 
 SMULBB{<c>}{<q>} {<Rd>,} <Rn>, <Rm>
.SS SMULBT(N == 0 && M == 1)
 
 SMULBT{<c>}{<q>} {<Rd>,} <Rn>, <Rm>
.SS SMULTB(N == 1 && M == 0)
 
 SMULTB{<c>}{<q>} {<Rd>,} <Rn>, <Rm>
.SS SMULTT(N == 1 && M == 1)
 
 SMULTT{<c>}{<q>} {<Rd>,} <Rn>, <Rm>
 
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);
 n_high = (N == '1');  m_high = (M == '1');
 if d == 15 || n == 15 || m == 15 then UNPREDICTABLE; // Armv8-A removes UNPREDICTABLE for R13
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     operand1 = if n_high then R[n]<31:16> else R[n]<15:0>;
     operand2 = if m_high then R[m]<31:16> else R[m]<15:0>;
     result = SInt(operand1) * SInt(operand2);
     R[d] = result<31:0>;
     // Signed overflow cannot occur
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rd>
  Encoded in Rd
  Is the general-purpose destination register, encoded in the "Rd" field.

 <Rn>
  Encoded in Rn
  Is the first general-purpose source register holding the multiplicand in the
  bottom or top half (selected by <x>), encoded in the "Rn" field.

 <Rm>
  Encoded in Rm
  Is the second general-purpose source register holding the multiplier in the
  bottom or top half (selected by <y>), encoded in the "Rm" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     operand1 = if n_high then R[n]<31:16> else R[n]<15:0>;
     operand2 = if m_high then R[m]<31:16> else R[m]<15:0>;
     result = SInt(operand1) * SInt(operand2);
     R[d] = result<31:0>;
     // Signed overflow cannot occur


.SS Operational Notes

 
 If CPSR.DIT is 1, this instruction has passed its condition execution check, and does not use R15 as either its source or destination: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
