.nh
.TH "STR (immediate) -- AArch32" "7" " "  "instruction" "general"
.SS STR (immediate)
 Store Register (immediate)

 Store Register (immediate) calculates an address from a base register value and
 an immediate offset, and stores a word from a register to memory. It can use
 offset, post-indexed, or pre-indexed addressing. For information about memory
 accesses see Memory accesses.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1, T2, T3 and T4).

.SS A1 - A32
 
                     22                                            
                   23 |                                            
                 24 | |  20                                        
         28    25 | | |21 |      16      12                       0
          |     | | | | | |       |       |                       |
  |. . . .|0 1 0|.|.|0|.|0|. . . .|. . . .|. . . . . . . . . . . .|
  |             | | | | | |       |       |
  |             | | | | | `-Rn    `-Rt    `-imm12
  |             | | | | `-o1
  |             | | | `-W
  |             | | `-o2
  |             | `-U
  |             `-P
  `-cond(!= 1111)
  
  
 
.SS Offset(P == 1 && W == 0)
 
 STR{<c>}{<q>} <Rt>, [<Rn> {, #{+/-}<imm>}]
.SS Post-indexed(P == 0 && W == 0)
 
 STR{<c>}{<q>} <Rt>, [<Rn>], #{+/-}<imm>
.SS Pre-indexed(P == 1 && W == 1)
 
 STR{<c>}{<q>} <Rt>, [<Rn>, #{+/-}<imm>]!
 
 if P == '0' && W == '1' then SEE "STRT";
 t = UInt(Rt);  n = UInt(Rn);  imm32 = ZeroExtend(imm12, 32);
 index = (P == '1');  add = (U == '1');  wback = (P == '0') || (W == '1');
 if wback && (n == 15 || n == t) then UNPREDICTABLE;
.SS T1 - T32
 
                                                                   
           11                                                      
         12 |                                                      
       13 | |         6     3     0                                
        | | |         |     |     |                                
   0 1 1|0|0|. . . . .|. . .|. . .|                                
        | | |         |     |
        | | `-imm5    `-Rn  `-Rt
        | `-L
        `-B
  
  
 
.SS T1
 
 STR{<c>}{<q>} <Rt>, [<Rn> {, #{+}<imm>}]
 
 t = UInt(Rt);  n = UInt(Rn);  imm32 = ZeroExtend(imm5:'00', 32);
 index = TRUE;  add = TRUE;  wback = FALSE;
.SS T2 - T32
 
                                                                   
                                                                   
           11                                                      
         12 |     8               0                                
          | |     |               |                                
   1 0 0 1|0|. . .|. . . . . . . .|                                
          | |     |
          | `-Rt  `-imm8
          `-L
  
  
 
.SS T2
 
 STR{<c>}{<q>} <Rt>, [SP{, #{+}<imm>}]
 
 t = UInt(Rt);  n = 13;  imm32 = ZeroExtend(imm8:'00', 32);
 index = TRUE;  add = TRUE;  wback = FALSE;
.SS T3 - T32
 
                                                                   
                                                                   
                         05                                        
                   08  06 |      01      12                       0
                    |   | |       |       |                       |
   1 1 1 1 1 0 0 0 1|1 0|0|. . . .|. . . .|. . . . . . . . . . . .|
                    |   | |       |       |
                    |   | |       `-Rt    `-imm12
                    |   | `-Rn(!= 1111)
                    |   `-L
                    `-size
  
  
 
.SS T3
 
 STR{<c>}.W <Rt>, [<Rn> {, #{+}<imm>}]
 
 STR{<c>}{<q>} <Rt>, [<Rn> {, #{+}<imm>}]
 
 if Rn == '1111' then UNDEFINED;
 t = UInt(Rt);  n = UInt(Rn);  imm32 = ZeroExtend(imm12, 32);
 index = TRUE;  add = TRUE;  wback = FALSE;
 if t == 15 then UNPREDICTABLE;
.SS T4 - T32
 
                                                                   
                                             10                    
                         05                11 |                    
                   08  06 |      01      12 | | 9 8               0
                    |   | |       |       | | | | |               |
   1 1 1 1 1 0 0 0 0|1 0|0|. . . .|. . . .|1|.|.|.|. . . . . . . .|
                    |   | |       |         | | | |
                    |   | |       `-Rt      | | | `-imm8
                    |   | `-Rn(!= 1111)     | | `-W
                    |   `-L                 | `-U
                    `-size                  `-P
  
  
 
.SS Offset(P == 1 && U == 0 && W == 0)
 
 STR{<c>}{<q>} <Rt>, [<Rn> {, #-<imm>}]
.SS Post-indexed(P == 0 && W == 1)
 
 STR{<c>}{<q>} <Rt>, [<Rn>], #{+/-}<imm>
.SS Pre-indexed(P == 1 && W == 1)
 
 STR{<c>}{<q>} <Rt>, [<Rn>, #{+/-}<imm>]!
 
 if P == '1' && U == '1' && W == '0' then SEE "STRT";
 if Rn == '1111' || (P == '0' && W == '0') then UNDEFINED;
 t = UInt(Rt);  n = UInt(Rn);  imm32 = ZeroExtend(imm8, 32);
 index = (P == '1');  add = (U == '1');  wback = (W == '1');
 if t == 15 || (wback && n == t) then UNPREDICTABLE;
 
 if CurrentInstrSet() == InstrSet_A32 then
     if ConditionPassed() then
         EncodingSpecificOperations();
         offset_addr = if add then (R[n] + imm32) else (R[n] - imm32);
         address = if index then offset_addr else R[n];
         MemU[address,4] = if t == 15 then PCStoreValue() else R[t];
         if wback then R[n] = offset_addr;
 else
     if ConditionPassed() then
         EncodingSpecificOperations();
         offset_addr = if add then (R[n] + imm32) else (R[n] - imm32);
         address = if index then offset_addr else R[n];
         MemU[address,4] = R[t];
         if wback then R[n] = offset_addr;
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rt>
  Encoded in Rt
  For encoding A1: is the general-purpose register to be transferred, encoded in
  the "Rt" field. The PC can be used, but this is deprecated.

 <Rt>
  Encoded in Rt
  For encoding T1, T2, T3 and T4: is the general-purpose register to be
  transferred, encoded in the "Rt" field.

 <Rn>
  Encoded in Rn
  For encoding A1: is the general-purpose base register, encoded in the "Rn"
  field. The PC can be used in the offset variant, but this is deprecated.

 <Rn>
  Encoded in Rn
  For encoding T1, T3 and T4: is the general-purpose base register, encoded in
  the "Rn" field.

 +/-
  Encoded in U
  Specifies the offset is added to or subtracted from the base register,
  defaulting to + if omitted and

  U +/- 
  0 -   
  1 +   

 +
  Specifies the offset is added to the base register.

 <imm>
  Encoded in imm12
  For encoding A1: is the 12-bit unsigned immediate byte offset, in the range 0
  to 4095, defaulting to 0 if omitted, and encoded in the "imm12" field.

 <imm>
  Encoded in imm5
  For encoding T1: is the optional positive unsigned immediate byte offset, a
  multiple of 4, in the range 0 to 124, defaulting to 0 and encoded in the
  "imm5" field as <imm>/4.

 <imm>
  Encoded in imm8
  For encoding T2: is the optional positive unsigned immediate byte offset, a
  multiple of 4, in the range 0 to 1020, defaulting to 0 and encoded in the
  "imm8" field as <imm>/4.

 <imm>
  Encoded in imm12
  For encoding T3: is an optional 12-bit unsigned immediate byte offset, in the
  range 0 to 4095, defaulting to 0 and encoded in the "imm12" field.

 <imm>
  Encoded in imm8
  For encoding T4: is an 8-bit unsigned immediate byte offset, in the range 0 to
  255, defaulting to 0 if omitted, and encoded in the "imm8" field.



.SS Operation

 if CurrentInstrSet() == InstrSet_A32 then
     if ConditionPassed() then
         EncodingSpecificOperations();
         offset_addr = if add then (R[n] + imm32) else (R[n] - imm32);
         address = if index then offset_addr else R[n];
         MemU[address,4] = if t == 15 then PCStoreValue() else R[t];
         if wback then R[n] = offset_addr;
 else
     if ConditionPassed() then
         EncodingSpecificOperations();
         offset_addr = if add then (R[n] + imm32) else (R[n] - imm32);
         address = if index then offset_addr else R[n];
         MemU[address,4] = R[t];
         if wback then R[n] = offset_addr;


.SS Operational Notes

 
 If CPSR.DIT is 1, the timing of this instruction is insensitive to the value of the data being loaded or stored.
