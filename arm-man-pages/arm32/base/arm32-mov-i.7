.nh
.TH "MOV, MOVS (immediate) -- AArch32" "7" " "  "instruction" "general"
.SS MOV, MOVS (immediate)
 Move (immediate)

 Move (immediate) writes an immediate value to the destination register.

 If the destination register is not the PC, the MOVS variant of the instruction
 updates the condition flags based on the result.

 The field descriptions for <Rd> identify the encodings where the PC is
 permitted as the destination register. Arm deprecates any use of these
 encodings. However, when the destination register is the PC:

 The MOV variant of the instruction is an interworking branch, see Pseudocode
 description of operations on the AArch32 general-purpose registers and the PC.

 The MOVS variant of the instruction performs an exception return without the
 use of the stack. In this case:
 The PE branches to the address written to the PC, and restores PSTATE from
 SPSR_<current_mode>.

 The PE checks SPSR_<current_mode> for an illegal return event.  See Illegal
 return events from AArch32 state.

 The instruction is undefined in Hyp mode.

 The instruction is constrained unpredictable in User mode and System mode.



 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1 and A2) and  T32 (T1, T2 and T3).

.SS A1 - A32
 
                                                                   
                                                                   
                         20                                        
         28        23  21 |      16      12                       0
          |         |   | |       |       |                       |
  |. . . .|0 0 1 1 1|0 1|.|0 0 0 0|. . . .|. . . . . . . . . . . .|
  |                 |   | |       |       |
  `-cond(!= 1111)   |   | `-Rn    `-Rd    `-imm12
                    |   `-S
                    `-opc
  
  
 
.SS MOV(S == 0)
 
 MOV{<c>}{<q>} <Rd>, #<const>
.SS MOVS(S == 1)
 
 MOVS{<c>}{<q>} <Rd>, #<const>
 
 d = UInt(Rd);  setflags = (S == '1');  (imm32, carry) = A32ExpandImm_C(imm12, PSTATE.C);
.SS A2 - A32
 
                                                                   
                                                                   
                     22                                            
         28        23 |  20      16      12                       0
          |         | |   |       |       |                       |
  |. . . .|0 0 1 1 0|0|0 0|. . . .|. . . .|. . . . . . . . . . . .|
  |                 |     |       |       |
  `-cond(!= 1111)   `-H   `-imm4  `-Rd    `-imm12
  
  
 
.SS A2
 
 MOV{<c>}{<q>} <Rd>, #<imm16>
 
 MOVW{<c>}{<q>} <Rd>, #<imm16>
 
 d = UInt(Rd);  setflags = FALSE;  imm32 = ZeroExtend(imm4:imm12, 32);
 if d == 15 then UNPREDICTABLE;
.SS T1 - T32
 
                                                                   
                                                                   
                                                                   
       13  11     8               0                                
        |   |     |               |                                
   0 0 1|0 0|. . .|. . . . . . . .|                                
        |   |     |
        |   `-Rd  `-imm8
        `-op
  
  
 
.SS T1
 
 MOV<c>{<q>} <Rd>, #<imm8>
 
 MOVS{<q>} <Rd>, #<imm8>
 
 d = UInt(Rd);  setflags = !InITBlock();  imm32 = ZeroExtend(imm8, 32);  carry = PSTATE.C;
.SS T2 - T32
 
                                                                   
               10                                                  
             11 |        05        15                              
           12 | |      06 |      01 |    12       8               0
            | | |       | |       | |     |       |               |
   1 1 1 1 0|.|0|0 0 1 0|.|1 1 1 1|0|. . .|. . . .|. . . . . . . .|
            |   |       | |         |     |       |
            `-i `-op1   | `-Rn      |     `-Rd    `-imm8
                        `-S         `-imm3
  
  
 
.SS MOV(S == 0)
 
 MOV<c>.W <Rd>, #<const>
 
 MOV{<c>}{<q>} <Rd>, #<const>
.SS MOVS(S == 1)
 
 MOVS.W <Rd>, #<const>
 
 MOVS{<c>}{<q>} <Rd>, #<const>
 
 d = UInt(Rd);  setflags = (S == '1');  (imm32, carry) = T32ExpandImm_C(i:imm3:imm8, PSTATE.C);
 if d == 15 then UNPREDICTABLE; // Armv8-A removes UNPREDICTABLE for R13
.SS T3 - T32
 
                                                                   
                                                                   
             11    08              15                              
           12 |  09 |    05      01 |    12       8               0
            | |   | |     |       | |     |       |               |
   1 1 1 1 0|.|1 0|0|1 0 0|. . . .|0|. . .|. . . .|. . . . . . . .|
            |     |       |         |     |       |
            `-i   `-o1    `-imm4    |     `-Rd    `-imm8
                                    `-imm3
  
  
 
.SS T3
 
 MOV{<c>}{<q>} <Rd>, #<imm16>
 
 MOVW{<c>}{<q>} <Rd>, #<imm16>
 
 d = UInt(Rd);  setflags = FALSE;  imm32 = ZeroExtend(imm4:i:imm3:imm8, 32);
 if d == 15 then UNPREDICTABLE; // Armv8-A removes UNPREDICTABLE for R13
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     result = imm32;
     if d == 15 then          // Can only occur for encoding A1
         if setflags then
             ALUExceptionReturn(result);
         else
             ALUWritePC(result);
     else
         R[d] = result;
         if setflags then
             PSTATE.N = result<31>;
             PSTATE.Z = IsZeroBit(result);
             PSTATE.C = carry;
             // PSTATE.V unchanged
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rd>
  Encoded in Rd
  For encoding A1: is the general-purpose destination register, encoded in the
  "Rd" field. Arm deprecates using the PC as the destination register, but if
  the PC is used:                        For the MOV variant, the instruction is
  a branch to the address calculated by the operation. This is an interworking
  branch, see Pseudocode description of operations on the AArch32 general-
  purpose registers and the PC.             For the MOVS variant, the
  instruction performs an exception return, that restores PSTATE from
  SPSR_<current_mode>.

 <Rd>
  Encoded in Rd
  For encoding A2, T1, T2 and T3: is the general-purpose destination register,
  encoded in the "Rd" field.

 <imm8>
  Encoded in imm8
  Is a 8-bit unsigned immediate, in the range 0 to 255, encoded in the "imm8"
  field.

 <imm16>
  Encoded in imm4:imm12
  For encoding A2: is a 16-bit unsigned immediate, in the range 0 to 65535,
  encoded in the "imm4:imm12" field.

 <imm16>
  Encoded in imm4:i:imm3:imm8
  For encoding T3: is a 16-bit unsigned immediate, in the range 0 to 65535,
  encoded in the "imm4:i:imm3:imm8" field.

 <const>
  Encoded in imm12
  For encoding A1: an immediate value. See Modified immediate constants in A32
  instructions for the range of values.

 <const>
  Encoded in i:imm3:imm8
  For encoding T2: an immediate value. See Modified immediate constants in T32
  instructions for the range of values.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     result = imm32;
     if d == 15 then          // Can only occur for encoding A1
         if setflags then
             ALUExceptionReturn(result);
         else
             ALUWritePC(result);
     else
         R[d] = result;
         if setflags then
             PSTATE.N = result<31>;
             PSTATE.Z = IsZeroBit(result);
             PSTATE.C = carry;
             // PSTATE.V unchanged


.SS Operational Notes

 
 If CPSR.DIT is 1 and this instruction does not use R15 as either its source or destination: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
