.nh
.TH "LDRSH (register) -- AArch32" "7" " "  "instruction" "general"
.SS LDRSH (register)
 Load Register Signed Halfword (register)

 Load Register Signed Halfword (register) calculates an address from a base
 register value and an offset register value, loads a halfword from memory,
 sign-extends it to form a 32-bit word, and writes it to a register. The offset
 register value can be shifted left by 0, 1, 2, or 3 bits. For information about
 memory accesses see Memory accesses.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.

 Related instructions: Load/store, signed (register offset).


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1 and T2).

.SS A1 - A32
 
                     22                                            
                   23 |                      10                    
                 24 | |  20                11 |                    
         28    25 | | |21 |      16      12 | | 9 8 7   5 4       0
          |     | | | | | |       |       | | | | | |   | |       |
  |. . . .|0 0 0|.|.|0|.|1|. . . .|. . . .|0|0|0|0|1|1 1|1|. . . .|
  |             | |   | | |       |                 |     |
  |             | `-U | | `-Rn    `-Rt              `-op2 `-Rm
  |             `-P   | `-o1
  `-cond(!= 1111)     `-W
  
  
 
.SS Offset(P == 1 && W == 0)
 
 LDRSH{<c>}{<q>} <Rt>, [<Rn>, {+/-}<Rm>]
.SS Post-indexed(P == 0 && W == 0)
 
 LDRSH{<c>}{<q>} <Rt>, [<Rn>], {+/-}<Rm>
.SS Pre-indexed(P == 1 && W == 1)
 
 LDRSH{<c>}{<q>} <Rt>, [<Rn>, {+/-}<Rm>]!
 
 if P == '0' && W == '1' then SEE "LDRSHT";
 t = UInt(Rt);  n = UInt(Rn);  m = UInt(Rm);
 index = (P == '1');  add = (U == '1');  wback = (P == '0') || (W == '1');
 (shift_t, shift_n) = (SRType_LSL, 0);
 if t == 15 || m == 15 then UNPREDICTABLE;
 if wback && (n == 15 || n == t) then UNPREDICTABLE;
.SS T1 - T32
 
                9                                                  
             10 |                                                  
           11 | |                                                  
         12 | | |     6     3     0                                
          | | | |     |     |     |                                
   0 1 0 1|1|1|1|. . .|. . .|. . .|                                
          | | | |     |     |
          | | | `-Rm  `-Rn  `-Rt
          | | `-H
          | `-B
          `-L
  
  
 
.SS T1
 
 LDRSH{<c>}{<q>} <Rt>, [<Rn>, {+}<Rm>]
 
 t = UInt(Rt);  n = UInt(Rn);  m = UInt(Rm);
 index = TRUE;  add = TRUE;  wback = FALSE;
 (shift_t, shift_n) = (SRType_LSL, 0);
.SS T2 - T32
 
                                                                   
                                                                   
                         05                                        
                   08  06 |      01      12           6   4       0
                    |   | |       |       |           |   |       |
   1 1 1 1 1 0 0 1 0|0 1|1|. . . .|. . . .|0 0 0 0 0 0|. .|. . . .|
                    |     |       |                   |   |
                    |     |       `-Rt(!= 1111)       |   `-Rm
                    |     `-Rn(!= 1111)               `-imm2
                    `-size
  
  
 
.SS T2
 
 LDRSH{<c>}.W <Rt>, [<Rn>, {+}<Rm>]
 
 LDRSH{<c>}{<q>} <Rt>, [<Rn>, {+}<Rm>{, LSL #<imm>}]
 
 if Rn == '1111' then SEE "LDRSH (literal)";
 if Rt == '1111' then SEE "Related instructions";
 t = UInt(Rt);  n = UInt(Rn);  m = UInt(Rm);
 index = TRUE;  add = TRUE;  wback = FALSE;
 (shift_t, shift_n) = (SRType_LSL, UInt(imm2));
 if m == 15 then UNPREDICTABLE; // Armv8-A removes UNPREDICTABLE for R13
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     offset = Shift(R[m], shift_t, shift_n, PSTATE.C);
     offset_addr = if add then (R[n] + offset) else (R[n] - offset);
     address = if index then offset_addr else R[n];
     data = MemU[address,2];
     if wback then R[n] = offset_addr;
     R[t] = SignExtend(data, 32);
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rt>
  Encoded in Rt
  Is the general-purpose register to be transferred, encoded in the "Rt" field.

 <Rn>
  Encoded in Rn
  For encoding A1: is the general-purpose base register, encoded in the "Rn"
  field. The PC can be used in the offset variant.

 <Rn>
  Encoded in Rn
  For encoding T1 and T2: is the general-purpose base register, encoded in the
  "Rn" field.

 +/-
  Encoded in U
  Specifies the index register is added to or subtracted from the base register,
  defaulting to + if omitted and

  U +/- 
  0 -   
  1 +   

 +
  Specifies the index register is added to the base register.

 <Rm>
  Encoded in Rm
  Is the general-purpose index register, encoded in the "Rm" field.

 <imm>
  If present, the size of the left shift to apply to the value from <Rm>, in the
  range 1-3. <imm> is encoded in imm2. If absent, no shift is specified and imm2
  is encoded as 0b00.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     offset = Shift(R[m], shift_t, shift_n, PSTATE.C);
     offset_addr = if add then (R[n] + offset) else (R[n] - offset);
     address = if index then offset_addr else R[n];
     data = MemU[address,2];
     if wback then R[n] = offset_addr;
     R[t] = SignExtend(data, 32);


.SS Operational Notes

 
 If CPSR.DIT is 1, the timing of this instruction is insensitive to the value of the data being loaded or stored.
