.nh
.TH "USADA8 -- AArch32" "7" " "  "instruction" "general"
.SS USADA8
 Unsigned Sum of Absolute Differences and Accumulate

 Unsigned Sum of Absolute Differences and Accumulate performs four unsigned
 8-bit subtractions, and adds the absolute values of the differences to a 32-bit
 accumulate operand.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                                                                   
                                                                   
         28              20      16      12       8       4       0
          |               |       |       |       |       |       |
  |. . . .|0 1 1 1 1 0 0 0|. . . .|. . . .|. . . .|0 0 0 1|. . . .|
  |                       |       |       |               |
  `-cond(!= 1111)         `-Rd    |       `-Rm            `-Rn
                                  `-Ra(!= 1111)
  
  
 
.SS A1
 
 USADA8{<c>}{<q>} <Rd>, <Rn>, <Rm>, <Ra>
 
 if Ra == '1111' then SEE "USAD8";
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);  a = UInt(Ra);
 if d == 15 || n == 15 || m == 15 then UNPREDICTABLE;
.SS T1 - T32
 
                                                                   
                                                                   
                                                                   
                   08    05      01      12       8   6   4       0
                    |     |       |       |       |   |   |       |
   1 1 1 1 1 0 1 1 0|1 1 1|. . . .|. . . .|. . . .|0 0|0 0|. . . .|
                    |     |       |       |           |   |
                    `-op1 `-Rn    |       `-Rd        |   `-Rm
                                  `-Ra(!= 1111)       `-op2
  
  
 
.SS T1
 
 USADA8{<c>}{<q>} <Rd>, <Rn>, <Rm>, <Ra>
 
 if Ra == '1111' then SEE "USAD8";
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);  a = UInt(Ra);
 if d == 15 || n == 15 || m == 15 then UNPREDICTABLE; // Armv8-A removes UNPREDICTABLE for R13
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     absdiff1 = Abs(UInt(R[n]<7:0>)   - UInt(R[m]<7:0>));
     absdiff2 = Abs(UInt(R[n]<15:8>)  - UInt(R[m]<15:8>));
     absdiff3 = Abs(UInt(R[n]<23:16>) - UInt(R[m]<23:16>));
     absdiff4 = Abs(UInt(R[n]<31:24>) - UInt(R[m]<31:24>));
     result = UInt(R[a]) + absdiff1 + absdiff2 + absdiff3 + absdiff4;
     R[d] = result<31:0>;
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rd>
  Encoded in Rd
  Is the general-purpose destination register, encoded in the "Rd" field.

 <Rn>
  Encoded in Rn
  Is the first general-purpose source register, encoded in the "Rn" field.

 <Rm>
  Encoded in Rm
  Is the second general-purpose source register, encoded in the "Rm" field.

 <Ra>
  Encoded in Ra
  Is the third general-purpose source register holding the addend, encoded in
  the "Ra" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     absdiff1 = Abs(UInt(R[n]<7:0>)   - UInt(R[m]<7:0>));
     absdiff2 = Abs(UInt(R[n]<15:8>)  - UInt(R[m]<15:8>));
     absdiff3 = Abs(UInt(R[n]<23:16>) - UInt(R[m]<23:16>));
     absdiff4 = Abs(UInt(R[n]<31:24>) - UInt(R[m]<31:24>));
     result = UInt(R[a]) + absdiff1 + absdiff2 + absdiff3 + absdiff4;
     R[d] = result<31:0>;


.SS Operational Notes

 
 If CPSR.DIT is 1, this instruction has passed its condition execution check, and does not use R15 as either its source or destination: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
