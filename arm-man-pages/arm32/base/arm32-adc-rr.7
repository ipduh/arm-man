.nh
.TH "ADC, ADCS (register-shifted register) -- AArch32" "7" " "  "instruction" "general"
.SS ADC, ADCS (register-shifted register)
 Add with Carry (register-shifted register)

 Add with Carry (register-shifted register) adds a register value, the Carry
 flag value, and a register-shifted register value.  It writes the result to the
 destination register, and can optionally update the condition flags based on
 the result.

 For more information about the constrained unpredictable behavior, see
 Architectural Constraints on UNPREDICTABLE behaviors.



.SS A1 - A32
 
                                                                   
                                                                   
                         20                                        
         28      24    21 |      16      12       8 7   5 4       0
          |       |     | |       |       |       | |   | |       |
  |. . . .|0 0 0 0|1 0 1|.|. . . .|. . . .|. . . .|0|. .|1|. . . .|
  |               |     | |       |       |         |     |
  `-cond(!= 1111) `-opc | `-Rn    `-Rd    `-Rs      |     `-Rm
                        `-S                         `-stype
  
  
 
.SS Flag setting(S == 1)
 
 ADCS{<c>}{<q>} {<Rd>,} <Rn>, <Rm>, <shift> <Rs>
.SS Not flag setting(S == 0)
 
 ADC{<c>}{<q>} {<Rd>,} <Rn>, <Rm>, <shift> <Rs>
 
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);  s = UInt(Rs);
 setflags = (S == '1');  shift_t = DecodeRegShift(stype);
 if d == 15 || n == 15 || m == 15 || s == 15 then UNPREDICTABLE;
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     shift_n = UInt(R[s]<7:0>);
     shifted = Shift(R[m], shift_t, shift_n, PSTATE.C);
     (result, nzcv) = AddWithCarry(R[n], shifted, PSTATE.C);
     R[d] = result;
     if setflags then
         PSTATE.<N,Z,C,V> = nzcv;
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rd>
  Encoded in Rd
  Is the general-purpose destination register, encoded in the "Rd" field.

 <Rn>
  Encoded in Rn
  Is the first general-purpose source register, encoded in the "Rn" field.

 <Rm>
  Encoded in Rm
  Is the second general-purpose source register, encoded in the "Rm" field.

 <shift>
  Encoded in stype
  Is the type of shift to be applied to the second source register,

  stype <shift> 
  00    LSL     
  01    LSR     
  10    ASR     
  11    ROR     

 <Rs>
  Encoded in Rs
  Is the third general-purpose source register holding a shift amount in its
  bottom 8 bits, encoded in the "Rs" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     shift_n = UInt(R[s]<7:0>);
     shifted = Shift(R[m], shift_t, shift_n, PSTATE.C);
     (result, nzcv) = AddWithCarry(R[n], shifted, PSTATE.C);
     R[d] = result;
     if setflags then
         PSTATE.<N,Z,C,V> = nzcv;


.SS Operational Notes

 
 If CPSR.DIT is 1, this instruction has passed its condition execution check, and does not use R15 as either its source or destination: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
