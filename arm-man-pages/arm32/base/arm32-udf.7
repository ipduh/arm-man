.nh
.TH "UDF -- AArch32" "7" " "  "instruction" "general"
.SS UDF
 Permanently Undefined

 Permanently Undefined generates an Undefined Instruction exception.

 The encodings for UDF used in this section are defined as permanently undefined
 in the Armv8-A architecture. However:

 With the T32 instruction set, Arm deprecates using the UDF instruction in an IT
 block.

 In the A32 instruction set, UDF is not conditional.



It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1 and T2).

.SS A1 - A32
 
                                                                   
                                                                   
                                                                   
         28              20                       8       4       0
          |               |                       |       |       |
  |1 1 1 0|0 1 1 1 1 1 1 1|. . . . . . . . . . . .|1 1 1 1|. . . .|
  |                       |                               |
  `-cond                  `-imm12                         `-imm4
  
  
 
.SS A1
 
 UDF{<c>}{<q>} {#}<imm>
 
 imm32 = ZeroExtend(imm12:imm4, 32);
 // imm32 is for assembly and disassembly only, and is ignored by hardware.
.SS T1 - T32
 
                                                                   
                                                                   
                  8                                                
                9 |               0                                
                | |               |                                
   1 1 0 1 1 1 1|0|. . . . . . . .|                                
                | |
                | `-imm8
                `-S
  
  
 
.SS T1
 
 UDF{<c>}{<q>} {#}<imm>
 
 imm32 = ZeroExtend(imm8, 32);
 // imm32 is for assembly and disassembly only, and is ignored by hardware.
.SS T2 - T32
 
                                                                   
                                         12                        
                         05            13 |                        
                       06 |      01  14 | |                       0
                        | |       |   | | |                       |
   1 1 1 1 0 1 1 1 1 1 1|1|. . . .|1 0|1|0|. . . . . . . . . . . .|
                        | |           |   |
                        | `-imm4      |   `-imm12
                        `-o1          `-o2
  
  
 
.SS T2
 
 UDF{<c>}.W {#}<imm>
 
 UDF{<c>}{<q>} {#}<imm>
 
 imm32 = ZeroExtend(imm4:imm12, 32);
 // imm32 is for assembly and disassembly only, and is ignored by hardware.
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     UNDEFINED;
 

.SS Assembler Symbols

 <c>
  For encoding A1: see Standard assembler syntax fields. <c> must be AL or
  omitted.

 <c>
  For encoding T1 and T2: see Standard assembler syntax fields. Arm deprecates
  using any <c> value other than AL.

 <q>
  See Standard assembler syntax fields.

 <imm>
  Encoded in imm12:imm4
  For encoding A1: is a 16-bit unsigned immediate, in the range 0 to 65535,
  encoded in the "imm12:imm4" field. The PE ignores the value of this constant.

 <imm>
  Encoded in imm8
  For encoding T1: is a 8-bit unsigned immediate, in the range 0 to 255, encoded
  in the "imm8" field. The PE ignores the value of this constant.

 <imm>
  Encoded in imm4:imm12
  For encoding T2: is a 16-bit unsigned immediate, in the range 0 to 65535,
  encoded in the "imm4:imm12" field. The PE ignores the value of this constant.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     UNDEFINED;

