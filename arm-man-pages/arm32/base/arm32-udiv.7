.nh
.TH "UDIV -- AArch32" "7" " "  "instruction" "general"
.SS UDIV
 Unsigned Divide

 Unsigned Divide divides a 32-bit unsigned integer register value by a 32-bit
 unsigned integer register value, and writes the result to the destination
 register. The condition flags are not affected.

 See Divide instructions for more information about this instruction.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                                                                   
                                                                   
         28        23    20      16      12       8     5 4       0
          |         |     |       |       |       |     | |       |
  |. . . .|0 1 1 1 0|0 1 1|. . . .|1 1 1 1|. . . .|0 0 0|1|. . . .|
  |                 |     |       |       |       |       |
  `-cond(!= 1111)   `-op1 `-Rd    `-Ra    `-Rm    `-op2   `-Rn
  
  
 
.SS A1
 
 UDIV{<c>}{<q>} {<Rd>,} <Rn>, <Rm>
 
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);  a = UInt(Ra);
 if d == 15 || n == 15 || m == 15 || a != 15 then UNPREDICTABLE;
.SS T1 - T32
 
                                                                   
                                                                   
                                                                   
                   08    05      01      12       8       4       0
                    |     |       |       |       |       |       |
   1 1 1 1 1 0 1 1 1|0 1 1|. . . .|1 1 1 1|. . . .|1 1 1 1|. . . .|
                    |     |       |       |       |       |
                    `-op1 `-Rn    `-Ra    `-Rd    `-op2   `-Rm
  
  
 
.SS T1
 
 UDIV{<c>}{<q>} {<Rd>,} <Rn>, <Rm>
 
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);  a = UInt(Ra);
 if d == 15 || n == 15 || m == 15 || a != 15 then UNPREDICTABLE; // Armv8-A removes UNPREDICTABLE for R13
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     if UInt(R[m]) == 0 then
         result = 0;
     else
         result = RoundTowardsZero(Real(UInt(R[n])) / Real(UInt(R[m])));
     R[d] = result<31:0>;
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rd>
  Encoded in Rd
  Is the general-purpose destination register, encoded in the "Rd" field.

 <Rn>
  Encoded in Rn
  Is the first general-purpose source register holding the dividend, encoded in
  the "Rn" field.

 <Rm>
  Encoded in Rm
  Is the second general-purpose source register holding the divisor, encoded in
  the "Rm" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     if UInt(R[m]) == 0 then
         result = 0;
     else
         result = RoundTowardsZero(Real(UInt(R[n])) / Real(UInt(R[m])));
     R[d] = result<31:0>;

