.nh
.TH "SMLAWB, SMLAWT -- AArch32" "7" " "  "instruction" "general"
.SS SMLAWB, SMLAWT
 Signed Multiply Accumulate (word by halfword)

 Signed Multiply Accumulate (word by halfword) performs a signed multiply
 accumulate operation. The multiply acts on a signed 32-bit quantity and a
 signed 16-bit quantity. The signed 16-bit quantity is taken from either the
 bottom or the top half of its source register. The other half of the second
 source register is ignored. The top 32 bits of the 48-bit product are added to
 a 32-bit accumulate value and the result is written to the destination
 register. The bottom 16 bits of the 48-bit product are ignored.

 If overflow occurs during the addition of the accumulate value, the instruction
 sets PSTATE.Q to 1. No overflow can occur during the multiplication.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                                                                   
                         20                                        
         28        23  21 |      16      12       8 7 6 5 4       0
          |         |   | |       |       |       | | | | |       |
  |. . . .|0 0 0 1 0|0 1|0|. . . .|. . . .|. . . .|1|.|0|0|. . . .|
  |                 |     |       |       |         | |   |
  `-cond(!= 1111)   `-opc `-Rd    `-Ra    `-Rm      | `-N `-Rn
                                                    `-M
  
  
 
.SS SMLAWB(M == 0)
 
 SMLAWB{<c>}{<q>} <Rd>, <Rn>, <Rm>, <Ra>
.SS SMLAWT(M == 1)
 
 SMLAWT{<c>}{<q>} <Rd>, <Rn>, <Rm>, <Ra>
 
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);  a = UInt(Ra);  m_high = (M == '1');
 if d == 15 || n == 15 || m == 15 || a == 15 then UNPREDICTABLE;
.SS T1 - T32
 
                                                                   
                                                                   
                                                                   
                   08    05      01      12       8   6 5 4       0
                    |     |       |       |       |   | | |       |
   1 1 1 1 1 0 1 1 0|0 1 1|. . . .|. . . .|. . . .|0 0|0|.|. . . .|
                    |     |       |       |             | |
                    `-op1 `-Rn    |       `-Rd          | `-Rm
                                  `-Ra(!= 1111)         `-M
  
  
 
.SS SMLAWB(M == 0)
 
 SMLAWB{<c>}{<q>} <Rd>, <Rn>, <Rm>, <Ra>
.SS SMLAWT(M == 1)
 
 SMLAWT{<c>}{<q>} <Rd>, <Rn>, <Rm>, <Ra>
 
 if Ra == '1111' then SEE "SMULWB, SMULWT";
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);  a = UInt(Ra);  m_high = (M == '1');
 if d == 15 || n == 15 || m == 15 then UNPREDICTABLE; // Armv8-A removes UNPREDICTABLE for R13
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     operand2 = if m_high then R[m]<31:16> else R[m]<15:0>;
     result = SInt(R[n]) * SInt(operand2) + (SInt(R[a]) << 16);
     R[d] = result<47:16>;
     if (result >> 16) != SInt(R[d]) then  // Signed overflow
         PSTATE.Q = '1';
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rd>
  Encoded in Rd
  Is the general-purpose destination register, encoded in the "Rd" field.

 <Rn>
  Encoded in Rn
  Is the first general-purpose source register holding the multiplicand, encoded
  in the "Rn" field.

 <Rm>
  Encoded in Rm
  Is the second general-purpose source register holding the multiplier in the
  bottom or top half (selected by <y>), encoded in the "Rm" field.

 <Ra>
  Encoded in Ra
  Is the third general-purpose source register holding the addend, encoded in
  the "Ra" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     operand2 = if m_high then R[m]<31:16> else R[m]<15:0>;
     result = SInt(R[n]) * SInt(operand2) + (SInt(R[a]) << 16);
     R[d] = result<47:16>;
     if (result >> 16) != SInt(R[d]) then  // Signed overflow
         PSTATE.Q = '1';


.SS Operational Notes

 
 If CPSR.DIT is 1, this instruction has passed its condition execution check, and does not use R15 as either its source or destination: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
