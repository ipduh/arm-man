.nh
.TH "ADD, ADDS (SP plus immediate) -- AArch32" "7" " "  "instruction" "general"
.SS ADD, ADDS (SP plus immediate)
 Add to SP (immediate)

 Add to SP (immediate) adds an immediate value to the SP value, and writes the
 result to the destination register.

 If the destination register is not the PC, the ADDS variant of the instruction
 updates the condition flags based on the result.

 The field descriptions for <Rd> identify the encodings where the PC is
 permitted as the destination register. However, when the destination register
 is the PC:

 The ADD variant of the instruction is an interworking branch, see Pseudocode
 description of operations on the AArch32 general-purpose registers and the PC.

 The ADDS variant of the instruction performs an exception return without the
 use of the stack. Arm deprecates use of this instruction. However, in this
 case:
 The PE branches to the address written to the PC, and restores PSTATE from
 SPSR_<current_mode>.

 The PE checks SPSR_<current_mode> for an illegal return event.  See Illegal
 return events from AArch32 state.

 The instruction is undefined in Hyp mode.

 The instruction is constrained unpredictable in User mode and System mode.



 For more information about the constrained unpredictable behavior, see
 Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1, T2, T3 and T4).

.SS A1 - A32
 
                                                                   
                                                                   
                         20                                        
         28      24    21 |      16      12                       0
          |       |     | |       |       |                       |
  |. . . .|0 0 1 0|1 0 0|.|1 1 0 1|. . . .|. . . . . . . . . . . .|
  |               |     | |       |       |
  `-cond(!= 1111) `-opc | `-Rn    `-Rd    `-imm12
                        `-S
  
  
 
.SS ADD(S == 0)
 
 ADD{<c>}{<q>} {<Rd>,} SP, #<const>
.SS ADDS(S == 1)
 
 ADDS{<c>}{<q>} {<Rd>,} SP, #<const>
 
 d = UInt(Rd);  setflags = (S == '1');  imm32 = A32ExpandImm(imm12);
.SS T1 - T32
 
                                                                   
                                                                   
           11                                                      
         12 |     8               0                                
          | |     |               |                                
   1 0 1 0|1|. . .|. . . . . . . .|                                
          | |     |
          | `-Rd  `-imm8
          `-SP
  
  
 
.SS T1
 
 ADD{<c>}{<q>} <Rd>, SP, #<imm8>
 
 d = UInt(Rd);  setflags = FALSE;  imm32 = ZeroExtend(imm8:'00', 32);
.SS T2 - T32
 
                                                                   
                                                                   
                    7                                              
                  8 |             0                                
                  | |             |                                
   1 0 1 1 0 0 0 0|0|. . . . . . .|                                
                  | |
                  | `-imm7
                  `-S
  
  
 
.SS T2
 
 ADD{<c>}{<q>} {SP,} SP, #<imm7>
 
 d = 13;  setflags = FALSE;  imm32 = ZeroExtend(imm7:'00', 32);
.SS T3 - T32
 
                                                                   
               10                                                  
             11 |        05        15                              
           12 | |      06 |      01 |    12       8               0
            | | |       | |       | |     |       |               |
   1 1 1 1 0|.|0|1 0 0 0|.|1 1 0 1|0|. . .|. . . .|. . . . . . . .|
            |   |       | |         |     |       |
            `-i `-op1   | `-Rn      |     `-Rd    `-imm8
                        `-S         `-imm3
  
  
 
.SS ADD(S == 0)
 
 ADD{<c>}.W {<Rd>,} SP, #<const>
 
 ADD{<c>}{<q>} {<Rd>,} SP, #<const>
.SS ADDS(S == 1 && Rd != 1111)
 
 ADDS{<c>}{<q>} {<Rd>,} SP, #<const>
 
 if Rd == '1111' && S == '1' then SEE "CMN (immediate)";
 d = UInt(Rd);  setflags = (S == '1');  imm32 = T32ExpandImm(i:imm3:imm8);
 if d == 15 && !setflags then UNPREDICTABLE;
.SS T4 - T32
 
                       06                                          
                     07 |                                          
             11    08 | |          15                              
           12 |  09 | | |05      01 |    12       8               0
            | |   | | | | |       | |     |       |               |
   1 1 1 1 0|.|1 0|0|0|0|0|1 1 0 1|0|. . .|. . . .|. . . . . . . .|
            |     |   |   |         |     |       |
            `-i   |   |   `-Rn      |     `-Rd    `-imm8
                  |   `-o2          `-imm3
                  `-o1
  
  
 
.SS T4
 
 ADD{<c>}{<q>} {<Rd>,} SP, #<imm12>
 
 ADDW{<c>}{<q>} {<Rd>,} SP, #<imm12>
 
 d = UInt(Rd);  setflags = FALSE;  imm32 = ZeroExtend(i:imm3:imm8, 32);
 if d == 15 then UNPREDICTABLE;
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     (result, nzcv) = AddWithCarry(SP, imm32, '0');
     if d == 15 then          // Can only occur for A32 encoding
         if setflags then
             ALUExceptionReturn(result);
         else
             ALUWritePC(result);
     else
         R[d] = result;
         if setflags then
             PSTATE.<N,Z,C,V> = nzcv;
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 SP,
  Is the stack pointer.

 <imm7>
  Encoded in imm7
  Is the unsigned immediate, a multiple of 4, in the range 0 to 508, encoded in
  the "imm7" field as <imm7>/4.

 <Rd>
  Encoded in Rd
  For encoding A1: is the general-purpose destination register, encoded in the
  "Rd" field. If omitted, this register is the SP. Arm deprecates using the PC
  as the destination register, but if the PC is used:                        For
  the ADD variant, the instruction is a branch to the address calculated by the
  operation. This is an interworking branch, see Pseudocode description of
  operations on the AArch32 general-purpose registers and the PC.
  For the ADDS variant, the instruction performs an exception return, that
  restores PSTATE from SPSR_<current_mode>.

 <Rd>
  Encoded in Rd
  For encoding T1: is the general-purpose destination register, encoded in the
  "Rd" field.

 <Rd>
  Encoded in Rd
  For encoding T3 and T4: is the general-purpose destination register, encoded
  in the "Rd" field. If omitted, this register is the SP.

 <imm8>
  Encoded in imm8
  Is an unsigned immediate, a multiple of 4, in the range 0 to 1020, encoded in
  the "imm8" field as <imm8>/4.

 <imm12>
  Encoded in i:imm3:imm8
  Is a 12-bit unsigned immediate, in the range 0 to 4095, encoded in the
  "i:imm3:imm8" field.

 <const>
  Encoded in imm12
  For encoding A1: an immediate value. See Modified immediate constants in A32
  instructions for the range of values.

 <const>
  Encoded in i:imm3:imm8
  For encoding T3: an immediate value. See Modified immediate constants in T32
  instructions for the range of values.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     (result, nzcv) = AddWithCarry(SP, imm32, '0');
     if d == 15 then          // Can only occur for A32 encoding
         if setflags then
             ALUExceptionReturn(result);
         else
             ALUWritePC(result);
     else
         R[d] = result;
         if setflags then
             PSTATE.<N,Z,C,V> = nzcv;

