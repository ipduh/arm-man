.nh
.TH "QADD -- AArch32" "7" " "  "instruction" "general"
.SS QADD
 Saturating Add

 Saturating Add adds two register values, saturates the result to the 32-bit
 signed integer range -231 to (231 - 1), and writes the result to the
 destination register. If saturation occurs, it sets PSTATE.Q to 1.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                                             10                    
                         20                11 |                    
         28        23  21 |      16      12 | | 9 8       4       0
          |         |   | |       |       | | | | |       |       |
  |. . . .|0 0 0 1 0|0 0|0|. . . .|. . . .|0|0|0|0|0 1 0 1|. . . .|
  |                 |     |       |                       |
  `-cond(!= 1111)   `-opc `-Rn    `-Rd                    `-Rm
  
  
 
.SS A1
 
 QADD{<c>}{<q>} {<Rd>,} <Rm>, <Rn>
 
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);
 if d == 15 || n == 15 || m == 15 then UNPREDICTABLE;
.SS T1 - T32
 
                                                                   
                                                                   
                                                                   
                   08    05      01      12       8   6   4       0
                    |     |       |       |       |   |   |       |
   1 1 1 1 1 0 1 0 1|0 0 0|. . . .|1 1 1 1|. . . .|1 0|0 0|. . . .|
                    |     |               |           |   |
                    `-op1 `-Rn            `-Rd        |   `-Rm
                                                      `-op2
  
  
 
.SS T1
 
 QADD{<c>}{<q>} {<Rd>,} <Rm>, <Rn>
 
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);
 if d == 15 || n == 15 || m == 15 then UNPREDICTABLE; // Armv8-A removes UNPREDICTABLE for R13
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     (R[d], sat) = SignedSatQ(SInt(R[m]) + SInt(R[n]), 32);
     if sat then
         PSTATE.Q = '1';
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rd>
  Encoded in Rd
  Is the general-purpose destination register, encoded in the "Rd" field.

 <Rm>
  Encoded in Rm
  Is the first general-purpose source register, encoded in the "Rm" field.

 <Rn>
  Encoded in Rn
  Is the second general-purpose source register, encoded in the "Rn" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     (R[d], sat) = SignedSatQ(SInt(R[m]) + SInt(R[n]), 32);
     if sat then
         PSTATE.Q = '1';

