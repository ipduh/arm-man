.nh
.TH "SVC -- AArch32" "7" " "  "instruction" "general"
.SS SVC
 Supervisor Call

 Supervisor Call causes a Supervisor Call exception. For more information, see
 Supervisor Call (SVC) exception.

 Software can use this instruction as a call to an operating system to provide a
 service.

 In the following cases, the Supervisor Call exception generated by the SVC
 instruction is taken to Hyp mode:

 If the SVC is executed in Hyp mode.

 If HCR. TGE is set to 1, and the SVC is executed in Non-secure User mode.  For
 more information, see Supervisor Call exception, when HCR. TGE is set to 1

 If HCR. TGE is set to 1, and the SVC is executed in Non-secure User mode.  For
 more information, see Supervisor Call exception, when HCR. TGE is set to 1

 If HCR. TGE is set to 1, and the SVC is executed in Non-secure User mode.  For
 more information, see Supervisor Call exception, when HCR. TGE is set to 1


 In these cases, the HSR, Hyp Syndrome Register identifies that the exception
 entry was caused by a Supervisor Call exception, EC value 0x11, see Use of the
 HSR. The immediate field in the HSR:

 If the SVC is unconditional: For the T32 instruction, is the zero-extended
 value of the imm8 field. For the A32 instruction, is the least-significant 16
 bits the imm24 field.

 If the
 For the T32 instruction, is the zero-extended value of the imm8 field.

 For the A32 instruction, is the least-significant 16 bits the imm24 field.


 If the SVC is conditional, is unknown.

 If the SVC is conditional, is unknown.



It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                                                                   
                                                                   
         28      24                                               0
          |       |                                               |
  |. . . .|1 1 1 1|. . . . . . . . . . . . . . . . . . . . . . . .|
  |               |
  `-cond(!= 1111) `-imm24
  
  
 
.SS A1
 
 SVC{<c>}{<q>} {#}<imm>
 
 imm32 = ZeroExtend(imm24, 32);
.SS T1 - T32
 
                                                                   
                                                                   
                  8                                                
                9 |               0                                
                | |               |                                
   1 1 0 1 1 1 1|1|. . . . . . . .|                                
                | |
                | `-imm8
                `-S
  
  
 
.SS T1
 
 SVC{<c>}{<q>} {#}<imm>
 
 imm32 = ZeroExtend(imm8, 32);
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     AArch32.CheckForSVCTrap(imm32<15:0>);
     AArch32.CallSupervisor(imm32<15:0>);
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <imm>
  Encoded in imm24
  For encoding A1: is a 24-bit unsigned immediate, in the range 0 to 16777215,
  encoded in the "imm24" field. This value is for assembly and disassembly only.
  SVC handlers in some systems interpret imm24 in software, for example to
  determine the required service.

 <imm>
  Encoded in imm8
  For encoding T1: is a 8-bit unsigned immediate, in the range 0 to 255, encoded
  in the "imm8" field. This value is for assembly and disassembly only. SVC
  handlers in some systems interpret imm8 in software, for example to determine
  the required service.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     AArch32.CheckForSVCTrap(imm32<15:0>);
     AArch32.CallSupervisor(imm32<15:0>);

