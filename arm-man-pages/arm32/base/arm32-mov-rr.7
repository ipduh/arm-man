.nh
.TH "MOV, MOVS (register-shifted register) -- AArch32" "7" " "  "instruction" "general"
.SS MOV, MOVS (register-shifted register)
 Move (register-shifted register)

 Move (register-shifted register) copies a register-shifted register value to
 the destination register. It can optionally update the condition flags based on
 the value.

 Related encodings: In encoding T1, for an op field value that is not described
 above, see Data-processing (two low registers).

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1 and T2).

.SS A1 - A32
 
                                                                   
                                                                   
                         20                                        
         28        23  21 |      16      12       8 7   5 4       0
          |         |   | |       |       |       | |   | |       |
  |. . . .|0 0 0 1 1|0 1|.|0 0 0 0|. . . .|. . . .|0|. .|1|. . . .|
  |                 |   | |       |       |         |     |
  `-cond(!= 1111)   |   | `-Rn    `-Rd    `-Rs      |     `-Rm
                    |   `-S                         `-stype
                    `-opc
  
  
 
.SS Flag setting(S == 1)
 
 MOVS{<c>}{<q>} <Rd>, <Rm>, <shift> <Rs>
.SS Not flag setting(S == 0)
 
 MOV{<c>}{<q>} <Rd>, <Rm>, <shift> <Rs>
 
 d = UInt(Rd);  m = UInt(Rm);  s = UInt(Rs);
 setflags = (S == '1');  shift_t = DecodeRegShift(stype);
 if d == 15 || m == 15 || s == 15 then UNPREDICTABLE;
.SS T1 - T32
 
                                                                   
                                                                   
                                                                   
             10       6     3     0                                
              |       |     |     |                                
   0 1 0 0 0 0|0 x x x|. . .|. . .|                                
              |       |     |
              `-op    `-Rs  `-Rdm
  
  
 
.SS Arithmetic shift right(op == 0100)
 
 MOV<c>{<q>} <Rdm>, <Rdm>, ASR <Rs>
 
 MOVS{<q>} <Rdm>, <Rdm>, ASR <Rs>
.SS Logical shift left(op == 0010)
 
 MOV<c>{<q>} <Rdm>, <Rdm>, LSL <Rs>
 
 MOVS{<q>} <Rdm>, <Rdm>, LSL <Rs>
.SS Logical shift right(op == 0011)
 
 MOV<c>{<q>} <Rdm>, <Rdm>, LSR <Rs>
 
 MOVS{<q>} <Rdm>, <Rdm>, LSR <Rs>
.SS Rotate right(op == 0111)
 
 MOV<c>{<q>} <Rdm>, <Rdm>, ROR <Rs>
 
 MOVS{<q>} <Rdm>, <Rdm>, ROR <Rs>
 
 if !(op IN {'0010', '0011', '0100', '0111'}) then SEE "Related encodings";
 d = UInt(Rdm);  m = UInt(Rdm);  s = UInt(Rs);
 setflags = !InITBlock();  shift_t = DecodeRegShift(op<2>:op<0>);
.SS T2 - T32
 
                                                                   
                                                                   
                         05                                        
                   08  06 |      01      12       8       4       0
                    |   | |       |       |       |       |       |
   1 1 1 1 1 0 1 0 0|. .|.|. . . .|1 1 1 1|. . . .|0 0 0 0|. . . .|
                    |   | |               |               |
                    |   | `-Rm            `-Rd            `-Rs
                    |   `-S
                    `-stype
  
  
 
.SS Flag setting(S == 1)
 
 MOVS.W <Rd>, <Rm>, <shift> <Rs>
 
 MOVS{<c>}{<q>} <Rd>, <Rm>, <shift> <Rs>
.SS Not flag setting(S == 0)
 
 MOV<c>.W <Rd>, <Rm>, <shift> <Rs>
 
 MOV{<c>}{<q>} <Rd>, <Rm>, <shift> <Rs>
 
 d = UInt(Rd);  m = UInt(Rm);  s = UInt(Rs);
 setflags = (S == '1');  shift_t = DecodeRegShift(stype);
 if d == 15 || m == 15 || s == 15 then UNPREDICTABLE; // Armv8-A removes UNPREDICTABLE for R13
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     shift_n = UInt(R[s]<7:0>);
     (result, carry) = Shift_C(R[m], shift_t, shift_n, PSTATE.C);
     R[d] = result;
     if setflags then
         PSTATE.N = result<31>;
         PSTATE.Z = IsZeroBit(result);
         PSTATE.C = carry;
         // PSTATE.V unchanged
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rdm>
  Encoded in Rdm
  Is the general-purpose source register and the destination register, encoded
  in the "Rdm" field.

 <Rd>
  Encoded in Rd
  Is the general-purpose destination register, encoded in the "Rd" field.

 <Rm>
  Encoded in Rm
  Is the general-purpose source register, encoded in the "Rm" field.

 <shift>
  Encoded in stype
  Is the type of shift to be applied to the second source register,

  stype <shift> 
  00    LSL     
  01    LSR     
  10    ASR     
  11    ROR     

 <Rs>
  Encoded in Rs
  Is the general-purpose source register holding a shift amount in its bottom 8
  bits, encoded in the "Rs" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     shift_n = UInt(R[s]<7:0>);
     (result, carry) = Shift_C(R[m], shift_t, shift_n, PSTATE.C);
     R[d] = result;
     if setflags then
         PSTATE.N = result<31>;
         PSTATE.Z = IsZeroBit(result);
         PSTATE.C = carry;
         // PSTATE.V unchanged


.SS Operational Notes

 
 If CPSR.DIT is 1, this instruction has passed its condition execution check, and does not use R15 as either its source or destination: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
