.nh
.TH "LDRSH (immediate) -- AArch32" "7" " "  "instruction" "general"
.SS LDRSH (immediate)
 Load Register Signed Halfword (immediate)

 Load Register Signed Halfword (immediate) calculates an address from a base
 register value and an immediate offset, loads a halfword from memory, sign-
 extends it to form a 32-bit word, and writes it to a register. It can use
 offset, post-indexed, or pre-indexed addressing.  For information about memory
 accesses see Memory accesses.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.

 Related instructions: Load/store single.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1 and T2).

.SS A1 - A32
 
                     22                                            
                   23 |                                            
                 24 | |  20                                        
         28    25 | | |21 |      16      12       8 7   5 4       0
          |     | | | | | |       |       |       | |   | |       |
  |. . . .|0 0 0|.|.|1|.|1|. . . .|. . . .|. . . .|1|1 1|1|. . . .|
  |             | |   | | |       |       |         |     |
  |             | `-U | | |       `-Rt    `-imm4H   `-op2 `-imm4L
  |             `-P   | | `-Rn(!= 1111)
  `-cond(!= 1111)     | `-o1
                      `-W
  
  
 
.SS Offset(P == 1 && W == 0)
 
 LDRSH{<c>}{<q>} <Rt>, [<Rn> {, #{+/-}<imm>}]
.SS Post-indexed(P == 0 && W == 0)
 
 LDRSH{<c>}{<q>} <Rt>, [<Rn>], #{+/-}<imm>
.SS Pre-indexed(P == 1 && W == 1)
 
 LDRSH{<c>}{<q>} <Rt>, [<Rn>, #{+/-}<imm>]!
 
 if Rn == '1111' then SEE "LDRSH (literal)";
 if P == '0' && W == '1' then SEE "LDRSHT";
 t = UInt(Rt);  n = UInt(Rn);  imm32 = ZeroExtend(imm4H:imm4L, 32);
 index = (P == '1');  add = (U == '1');  wback = (P == '0') || (W == '1');
 if t == 15 || (wback && n == t) then UNPREDICTABLE;
.SS T1 - T32
 
                                                                   
                                                                   
                         05                                        
                   08  06 |      01      12                       0
                    |   | |       |       |                       |
   1 1 1 1 1 0 0 1 1|0 1|1|. . . .|. . . .|. . . . . . . . . . . .|
                    |     |       |       |
                    |     |       |       `-imm12
                    |     |       `-Rt(!= 1111)
                    |     `-Rn(!= 1111)
                    `-size
  
  
 
.SS T1
 
 LDRSH{<c>}{<q>} <Rt>, [<Rn> {, #{+}<imm>}]
 
 if Rn == '1111' then SEE "LDRSH (literal)";
 if Rt == '1111' then SEE "Related instructions";
 t = UInt(Rt);  n = UInt(Rn);  imm32 = ZeroExtend(imm12, 32);
 index = TRUE;  add = TRUE;  wback = FALSE;
 // Armv8-A removes UNPREDICTABLE for R13
.SS T2 - T32
 
                                                                   
                                             10                    
                         05                11 |                    
                   08  06 |      01      12 | | 9 8               0
                    |   | |       |       | | | | |               |
   1 1 1 1 1 0 0 1 0|0 1|1|. . . .|. . . .|1|.|.|.|. . . . . . . .|
                    |     |       |         | | | |
                    |     |       `-Rt      | | | `-imm8
                    |     `-Rn(!= 1111)     | | `-W
                    `-size                  | `-U
                                            `-P
  
  
 
.SS Offset(Rt != 1111 && P == 1 && U == 0 && W == 0)
 
 LDRSH{<c>}{<q>} <Rt>, [<Rn> {, #-<imm>}]
.SS Post-indexed(P == 0 && W == 1)
 
 LDRSH{<c>}{<q>} <Rt>, [<Rn>], #{+/-}<imm>
.SS Pre-indexed(P == 1 && W == 1)
 
 LDRSH{<c>}{<q>} <Rt>, [<Rn>, #{+/-}<imm>]!
 
 if Rn == '1111' then SEE "LDRSH (literal)";
 if Rt == '1111' && P == '1' && U == '0' && W == '0' then SEE "Related instructions";
 if P == '1' && U == '1' && W == '0' then SEE "LDRSHT";
 if P == '0' && W == '0' then UNDEFINED;
 t = UInt(Rt);  n = UInt(Rn);  imm32 = ZeroExtend(imm8, 32);
 index = (P == '1');  add = (U == '1');  wback = (W == '1');
 if (t == 15 && W == '1') || (wback && n == t) then UNPREDICTABLE;
 // Armv8-A removes UNPREDICTABLE for R13
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     offset_addr = if add then (R[n] + imm32) else (R[n] - imm32);
     address = if index then offset_addr else R[n];
     data = MemU[address,2];
     if wback then R[n] = offset_addr;
     R[t] = SignExtend(data, 32);
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rt>
  Encoded in Rt
  Is the general-purpose register to be transferred, encoded in the "Rt" field.

 <Rn>
  Encoded in Rn
  Is the general-purpose base register, encoded in the "Rn" field. For PC use
  see LDRSH (literal).

 +/-
  Encoded in U
  Specifies the offset is added to or subtracted from the base register,
  defaulting to + if omitted and

  U +/- 
  0 -   
  1 +   

 +
  Specifies the offset is added to the base register.

 <imm>
  Encoded in imm4H:imm4L
  For encoding A1: is the 8-bit unsigned immediate byte offset, in the range 0
  to 255, defaulting to 0 if omitted, and encoded in the "imm4H:imm4L" field.

 <imm>
  Encoded in imm12
  For encoding T1: is an optional 12-bit unsigned immediate byte offset, in the
  range 0 to 4095, defaulting to 0 and encoded in the "imm12" field.

 <imm>
  Encoded in imm8
  For encoding T2: is an 8-bit unsigned immediate byte offset, in the range 0 to
  255, defaulting to 0 if omitted, and encoded in the "imm8" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     offset_addr = if add then (R[n] + imm32) else (R[n] - imm32);
     address = if index then offset_addr else R[n];
     data = MemU[address,2];
     if wback then R[n] = offset_addr;
     R[t] = SignExtend(data, 32);


.SS Operational Notes

 
 If CPSR.DIT is 1, the timing of this instruction is insensitive to the value of the data being loaded or stored.
