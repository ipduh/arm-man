.nh
.TH "MUL, MULS -- AArch32" "7" " "  "instruction" "general"
.SS MUL, MULS
 Multiply

 Multiply multiplies two register values. The least significant 32 bits of the
 result are written to the destination register. These 32 bits do not depend on
 whether the source register values are considered to be signed values or
 unsigned values.

 Optionally, it can update the condition flags based on the result. In the T32
 instruction set, this option is limited to only a few forms of the instruction.
 Use of this option adversely affects performance on many implementations.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1 and T2).

.SS A1 - A32
 
                                                                   
                                                                   
                         20                                        
         28      24    21 |      16      12       8       4       0
          |       |     | |       |       |       |       |       |
  |. . . .|0 0 0 0|0 0 0|.|. . . .|0 0 0 0|. . . .|1 0 0 1|. . . .|
  |               |     | |       |       |               |
  `-cond(!= 1111) `-opc | `-Rd    `-RdLo  `-Rm            `-Rn
                        `-S
  
  
 
.SS Flag setting(S == 1)
 
 MULS{<c>}{<q>} <Rd>, <Rn>{, <Rm>}
.SS Not flag setting(S == 0)
 
 MUL{<c>}{<q>} <Rd>, <Rn>{, <Rm>}
 
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);  setflags = (S == '1');
 if d == 15 || n == 15 || m == 15 then UNPREDICTABLE;
.SS T1 - T32
 
                                                                   
                                                                   
                                                                   
             10       6     3     0                                
              |       |     |     |                                
   0 1 0 0 0 0|1 1 0 1|. . .|. . .|                                
              |       |     |
              `-op    `-Rn  `-Rdm
  
  
 
.SS T1
 
 MUL<c>{<q>} <Rdm>, <Rn>{, <Rdm>}
 
 MULS{<q>} <Rdm>, <Rn>{, <Rdm>}
 
 d = UInt(Rdm);  n = UInt(Rn);  m = UInt(Rdm);  setflags = !InITBlock();
.SS T2 - T32
 
                                                                   
                                                                   
                                                                   
                   08    05      01      12       8   6   4       0
                    |     |       |       |       |   |   |       |
   1 1 1 1 1 0 1 1 0|0 0 0|. . . .|1 1 1 1|. . . .|0 0|0 0|. . . .|
                    |     |       |       |           |   |
                    `-op1 `-Rn    `-Ra    `-Rd        |   `-Rm
                                                      `-op2
  
  
 
.SS T2
 
 MUL<c>.W <Rd>, <Rn>{, <Rm>}
 
 MUL{<c>}{<q>} <Rd>, <Rn>{, <Rm>}
 
 d = UInt(Rd);  n = UInt(Rn);  m = UInt(Rm);  setflags = FALSE;
 if d == 15 || n == 15 || m == 15 then UNPREDICTABLE; // Armv8-A removes UNPREDICTABLE for R13
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     operand1 = SInt(R[n]);  // operand1 = UInt(R[n]) produces the same final results
     operand2 = SInt(R[m]);  // operand2 = UInt(R[m]) produces the same final results
     result = operand1 * operand2;
     R[d] = result<31:0>;
     if setflags then
         PSTATE.N = result<31>;
         PSTATE.Z = IsZeroBit(result<31:0>);
         // PSTATE.C, PSTATE.V unchanged
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rdm>
  Encoded in Rdm
  Is the second general-purpose source register holding the multiplier and the
  destination register, encoded in the "Rdm" field.

 <Rd>
  Encoded in Rd
  Is the general-purpose destination register, encoded in the "Rd" field.

 <Rn>
  Encoded in Rn
  Is the first general-purpose source register holding the multiplicand, encoded
  in the "Rn" field.

 <Rm>
  Encoded in Rm
  Is the second general-purpose source register holding the multiplier, encoded
  in the "Rm" field. If omitted, <Rd> is used.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     operand1 = SInt(R[n]);  // operand1 = UInt(R[n]) produces the same final results
     operand2 = SInt(R[m]);  // operand2 = UInt(R[m]) produces the same final results
     result = operand1 * operand2;
     R[d] = result<31:0>;
     if setflags then
         PSTATE.N = result<31>;
         PSTATE.Z = IsZeroBit(result<31:0>);
         // PSTATE.C, PSTATE.V unchanged


.SS Operational Notes

 
 If CPSR.DIT is 1, this instruction has passed its condition execution check, and does not use R15 as either its source or destination: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
