.nh
.TH "BXJ -- AArch32" "7" " "  "instruction" "general"
.SS BXJ
 Branch and Exchange, previously Branch and Exchange Jazelle

 Branch and Exchange, previously Branch and Exchange Jazelle.

 In Armv8, BXJ behaves as a BX instruction, see BX. This means it causes a
 branch to an address and instruction set specified by a register.

 For more information about the constrained unpredictable behavior, see
 Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                               17      13                          
                             18 |    14 |    10                    
                           19 | |  15 | |  11 |                    
         28              20 | | |16 | | |12 | | 9 8       4       0
          |               | | | | | | | | | | | | |       |       |
  |. . . .|0 0 0 1 0 0 1 0|1|1|1|1|1|1|1|1|1|1|1|1|0 0 1 0|. . . .|
  |                                                       |
  `-cond(!= 1111)                                         `-Rm
  
  
 
.SS A1
 
 BXJ{<c>}{<q>} <Rm>
 
 m = UInt(Rm);
 if m == 15 then UNPREDICTABLE;
.SS T1 - T32
 
                                           11                      
                                         12 |                      
                                       13 | |                      
                         05      01  14 | | |10 9 8 7 6 5 4 3 2 1 0
                          |       |   | | | | | | | | | | | | | | |
   1 1 1 1 0 0 1 1 1 1 0 0|. . . .|1 0|0|0|1|1|1|1|0|0|0|0|0|0|0|0|
                          |
                          `-Rm
  
  
 
.SS T1
 
 BXJ{<c>}{<q>} <Rm>
 
 m = UInt(Rm);
 if m == 15 then UNPREDICTABLE;  // Armv8-A removes UNPREDICTABLE for R13
 if InITBlock() && !LastInITBlock() then UNPREDICTABLE;
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     BXWritePC(R[m], BranchType_INDIR);
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rm>
  Encoded in Rm
  Is the general-purpose register holding the address to be branched to, encoded
  in the "Rm" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     BXWritePC(R[m], BranchType_INDIR);

