.nh
.TH "STLEXD -- AArch32" "7" " "  "instruction" "general"
.SS STLEXD
 Store-Release Exclusive Doubleword

 Store-Release Exclusive Doubleword stores a doubleword from two registers to
 memory if the executing PE has exclusive access to the memory at that address,
 and returns a status value of 0 if the store was successful, or of 1 if no
 store was performed.

 The instruction also has memory ordering semantics as described in Load-
 Acquire, Store-Release.

 For more information about support for shared memory see Synchronization and
 semaphores. For information about memory accesses see Memory accesses.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                                                                   
                                             10                    
                         20                11 |                    
         28        23  21 |      16      12 | | 9 8       4       0
          |         |   | |       |       | | | | |       |       |
  |. . . .|0 0 0 1 1|0 1|0|. . . .|. . . .|1|1|1|0|1 0 0 1|. . . .|
  |                 |   | |       |           | |         |
  `-cond(!= 1111)   |   | `-Rn    `-Rd        | `-ord     `-Rt
                    |   `-L                   `-ex
                    `-size
  
  
 
.SS A1
 
 STLEXD{<c>}{<q>} <Rd>, <Rt>, <Rt2>, [<Rn>]
 
 d = UInt(Rd);  t = UInt(Rt);  t2 = t+1;  n = UInt(Rn);
 if d == 15 || Rt<0> == '1' || t2 == 15 || n == 15 then UNPREDICTABLE;
 if d == n || d == t || d == t2 then UNPREDICTABLE;
.SS T1 - T32
 
                                                                   
                                                                   
                         05                                        
                       06 |      01      12       8 7 6   4       0
                        | |       |       |       | | |   |       |
   1 1 1 0 1 0 0 0 1 1 0|0|. . . .|. . . .|. . . .|1|1|1 1|. . . .|
                        | |       |       |         | |   |
                        | `-Rn    `-Rt    `-Rt2     | |   `-Rd
                        `-L                         | `-sz
                                                    `-op
  
  
 
.SS T1
 
 STLEXD{<c>}{<q>} <Rd>, <Rt>, <Rt2>, [<Rn>]
 
 d = UInt(Rd);  t = UInt(Rt);  t2 = UInt(Rt2);  n = UInt(Rn);
 if d == 15 || t == 15 || t2 == 15 || n == 15 then UNPREDICTABLE;
 if d == n || d == t || d == t2 then UNPREDICTABLE;
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     address = R[n];
     // Create doubleword to store such that R[t] will be stored at address and R[t2] at address+4.
     value = if BigEndian() then R[t]:R[t2] else R[t2]:R[t];
     if AArch32.ExclusiveMonitorsPass(address, 8) then
         MemO[address, 8] = value;
         R[d] = ZeroExtend('0');
     else
         R[d] = ZeroExtend('1');
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rd>
  Encoded in Rd
  Is the destination general-purpose register into which the status result of
  the store exclusive is written, encoded in the "Rd" field. The value returned
  is:                                       0If the operation updates memory.
  1If the operation fails to update memory.

 <Rt>
  Encoded in Rt
  For encoding A1: is the first general-purpose register to be transferred,
  encoded in the "Rt" field. <Rt> must be even-numbered and not R14.

 <Rt>
  Encoded in Rt
  For encoding T1: is the first general-purpose register to be transferred,
  encoded in the "Rt" field.

 <Rt2>
  For encoding A1: is the second general-purpose register to be transferred.
  <Rt2> must be <R(t+1)>.

 <Rt2>
  Encoded in Rt2
  For encoding T1: is the second general-purpose register to be transferred,
  encoded in the "Rt2" field.

 <Rn>
  Encoded in Rn
  Is the general-purpose base register, encoded in the "Rn" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     address = R[n];
     // Create doubleword to store such that R[t] will be stored at address and R[t2] at address+4.
     value = if BigEndian() then R[t]:R[t2] else R[t2]:R[t];
     if AArch32.ExclusiveMonitorsPass(address, 8) then
         MemO[address, 8] = value;
         R[d] = ZeroExtend('0');
     else
         R[d] = ZeroExtend('1');


.SS Operational Notes

 
 If CPSR.DIT is 1, the timing of this instruction is insensitive to the value of the data being loaded or stored.
