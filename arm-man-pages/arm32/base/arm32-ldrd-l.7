.nh
.TH "LDRD (literal) -- AArch32" "7" " "  "instruction" "general"
.SS LDRD (literal)
 Load Register Dual (literal)

 Load Register Dual (literal) calculates an address from the PC value and an
 immediate offset, loads two words from memory, and writes them to two
 registers. For information about memory accesses see Memory accesses.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.

 Related encodings: Load/Store dual, Load/Store-Exclusive, Load-Acquire/Store-
 Release, table branch.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                     22                                            
                   23 |                                            
                 24 | |  20                                        
         28    25 | | |21 |      16      12       8 7   5 4       0
          |     | | | | | |       |       |       | |   | |       |
  |. . . .|0 0 0|1|.|1|0|0|1 1 1 1|. . . .|. . . .|1|1 0|1|. . . .|
  |             | |   | | |       |       |         |     |
  |             | `-U | | `-Rn    `-Rt    `-imm4H   `-op2 `-imm4L
  |             `-P   | `-o1
  `-cond(!= 1111)     `-W
  
  
 
.SS A1
 
 LDRD{<c>}{<q>} <Rt>, <Rt2>, <label>
 
 LDRD{<c>}{<q>} <Rt>, <Rt2>, [PC, #{+/-}<imm>]
 
 if Rt<0> == '1' then UNPREDICTABLE;
 t = UInt(Rt);  t2 = t+1;  imm32 = ZeroExtend(imm4H:imm4L, 32);  add = (U == '1');
 if t2 == 15 then UNPREDICTABLE;
.SS T1 - T32
 
                     07                                            
                   08 |                                            
                 09 | |  05                                        
               10 | | |06 |      01      12       8               0
                | | | | | |       |       |       |               |
   1 1 1 0 1 0 0|.|.|1|.|1|1 1 1 1|. . . .|. . . .|. . . . . . . .|
                | |   | |         |       |       |
                | `-U | `-L       `-Rt    `-Rt2   `-imm8
                `-P   `-W
  
  
 
.SS T1(!(P == 0 && W == 0))
 
 LDRD{<c>}{<q>} <Rt>, <Rt2>, <label>
 
 LDRD{<c>}{<q>} <Rt>, <Rt2>, [PC, #{+/-}<imm>]
 
 if P == '0' && W == '0' then SEE "Related encodings";
 t = UInt(Rt);  t2 = UInt(Rt2);
 imm32 = ZeroExtend(imm8:'00', 32);  add = (U == '1');
 if t == 15 || t2 == 15 || t == t2 then UNPREDICTABLE; // Armv8-A removes UNPREDICTABLE for R13
 if W == '1' then UNPREDICTABLE;
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     address = if add then (Align(PC,4) + imm32) else (Align(PC,4) - imm32);
     if address == Align(address, 8) then
         data = MemA[address,8];
         if BigEndian() then
             R[t] = data<63:32>;
             R[t2] = data<31:0>;
         else
             R[t] = data<31:0>;
             R[t2] = data<63:32>;
     else
         R[t] = MemA[address,4];
         R[t2] = MemA[address+4,4];
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rt>
  Encoded in Rt
  For encoding A1: is the first general-purpose register to be transferred,
  encoded in the "Rt" field. This register must be even-numbered and not R14.

 <Rt>
  Encoded in Rt
  For encoding T1: is the first general-purpose register to be transferred,
  encoded in the "Rt" field.

 <Rt2>
  For encoding A1: is the second general-purpose register to be transferred.
  This register must be <R(t+1)>.

 <Rt2>
  Encoded in Rt2
  For encoding T1: is the second general-purpose register to be transferred,
  encoded in the "Rt2" field.

 <label>
  Encoded in imm4H:imm4L
  For encoding A1: the label of the literal data item that is to be loaded into
  <Rt>. The assembler calculates the required value of the offset from the
  Align(PC, 4) value of the instruction to this label. Any value in the range
  -255 to 255 is permitted.           If the offset is zero or positive, imm32
  is equal to the offset and add == TRUE, encoded as U == 1. If the offset is
  negative, imm32 is equal to minus the offset and add == FALSE, encoded as U ==
  0.

 <label>
  Encoded in imm8
  For encoding T1: the label of the literal data item that is to be loaded into
  <Rt>. The assembler calculates the required value of the offset from the
  Align(PC, 4) value of the instruction to this label. Permitted values of the
  offset are multiples of 4 in the range -1020 to 1020.           If the offset
  is zero or positive, imm32 is equal to the offset and add == TRUE, encoded as
  U == 1.           If the offset is negative, imm32 is equal to minus the
  offset and add == FALSE, encoded as U == 0.

 +/-
  Encoded in U
  Specifies the offset is added to or subtracted from the base register,
  defaulting to + if omitted and

  U +/- 
  0 -   
  1 +   

 <imm>
  Encoded in imm4H:imm4L
  For encoding A1: is the 8-bit unsigned immediate byte offset, in the range 0
  to 255, defaulting to 0 if omitted, and encoded in the "imm4H:imm4L" field.

 <imm>
  Encoded in imm8
  For encoding T1: is the optional 8-bit unsigned immediate byte offset, in the
  range 0 to 255, defaulting to 0 and encoded in the "imm8" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     address = if add then (Align(PC,4) + imm32) else (Align(PC,4) - imm32);
     if address == Align(address, 8) then
         data = MemA[address,8];
         if BigEndian() then
             R[t] = data<63:32>;
             R[t2] = data<31:0>;
         else
             R[t] = data<31:0>;
             R[t2] = data<63:32>;
     else
         R[t] = MemA[address,4];
         R[t2] = MemA[address+4,4];


.SS Operational Notes

 
 If CPSR.DIT is 1, the timing of this instruction is insensitive to the value of the data being loaded or stored.
