.nh
.TH "LDC (immediate) -- AArch32" "7" " "  "instruction" "general"
.SS LDC (immediate)
 Load data to System register (immediate)

 Load data to System register (immediate) calculates an address from a base
 register value and an immediate offset, loads a word from memory, and writes it
 to the DBGDTRTXint System register. It can use offset, post-indexed, pre-
 indexed, or unindexed addressing. For information about memory accesses see
 Memory accesses.

 In an implementation that includes EL2, the permitted LDC access to DBGDTRTXint
 can be trapped to Hyp mode, meaning that an attempt to execute an LDC
 instruction in a Non-secure mode other than Hyp mode, that would be permitted
 in the absence of the Hyp trap controls, generates a Hyp Trap exception.  For
 more information, see Trapping general Non-secure System register accesses to
 debug registers.

 For simplicity, the LDC pseudocode does not show this possible trap to Hyp
 mode.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                     22                                            
                   23 |                                            
                 24 | |  20                                        
         28    25 | | |21 |      16      12     9 8               0
          |     | | | | | |       |       |     | |               |
  |. . . .|1 1 0|.|.|0|.|1|. . . .|0 1 0 1|1 1 1|0|. . . . . . . .|
  |             | | | | | |       |             | |
  |             | | | | | |       `-CRd         | `-imm8
  |             | | | | | `-Rn(!= 1111)         `-cp15
  |             | | | | `-L
  |             | | | `-W
  |             | | `-D
  |             | `-U
  |             `-P
  `-cond(!= 1111)
  
  
 
.SS Offset(P == 1 && W == 0)
 
 LDC{<c>}{<q>} p14, c5, [<Rn>{, #{+/-}<imm>}]
.SS Post-indexed(P == 0 && W == 1)
 
 LDC{<c>}{<q>} p14, c5, [<Rn>], #{+/-}<imm>
.SS Pre-indexed(P == 1 && W == 1)
 
 LDC{<c>}{<q>} p14, c5, [<Rn>, #{+/-}<imm>]!
.SS Unindexed(P == 0 && U == 1 && W == 0)
 
 LDC{<c>}{<q>} p14, c5, [<Rn>], <option>
 
 if Rn == '1111' then SEE "LDC (literal)";
 if P == '0' && U == '0' && W == '0' then UNDEFINED;
 n = UInt(Rn);  cp = 14;
 imm32 = ZeroExtend(imm8:'00', 32);  index = (P == '1');  add = (U == '1');  wback = (W == '1');
.SS T1 - T32
 
                     07                                            
                   08 |                                            
         13      09 | |  05                                        
       14 |    10 | | |06 |      01      12     9 8               0
        | |     | | | | | |       |       |     | |               |
   1 1 1|0|1 1 0|.|.|0|.|1|. . . .|0 1 0 1|1 1 1|0|. . . . . . . .|
        |       | | | | | |       |             | |
        `-o0    | | | | | |       `-CRd         | `-imm8
                | | | | | `-Rn(!= 1111)         `-cp15
                | | | | `-L
                | | | `-W
                | | `-D
                | `-U
                `-P
  
  
 
.SS Offset(P == 1 && W == 0)
 
 LDC{<c>}{<q>} p14, c5, [<Rn>{, #{+/-}<imm>}]
.SS Post-indexed(P == 0 && W == 1)
 
 LDC{<c>}{<q>} p14, c5, [<Rn>], #{+/-}<imm>
.SS Pre-indexed(P == 1 && W == 1)
 
 LDC{<c>}{<q>} p14, c5, [<Rn>, #{+/-}<imm>]!
.SS Unindexed(P == 0 && U == 1 && W == 0)
 
 LDC{<c>}{<q>} p14, c5, [<Rn>], <option>
 
 if Rn == '1111' then SEE "LDC (literal)";
 if P == '0' && U == '0' && W == '0' then UNDEFINED;
 n = UInt(Rn);  cp = 14;
 imm32 = ZeroExtend(imm8:'00', 32);  index = (P == '1');  add = (U == '1');  wback = (W == '1');
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     offset_addr = if add then (R[n] + imm32) else (R[n] - imm32);
     address = if index then offset_addr else R[n];
 
     // System register write to DBGDTRTXint.
     DBGDTR_EL0[] = MemA[address,4];
 
     if wback then R[n] = offset_addr;
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rn>
  Encoded in Rn
  Is the general-purpose base register, encoded in the "Rn" field. If the PC is
  used, see LDC (literal).

 <option>
  Encoded in imm8
  Is an 8-bit immediate, in the range 0 to 255 enclosed in { }, encoded in the
  "imm8" field. The value of this field is ignored when executing this
  instruction.

 +/-
  Encoded in U
  Specifies the offset is added to or subtracted from the base register,
  defaulting to + if omitted and

  U +/- 
  0 -   
  1 +   

 <imm>
  Encoded in imm8
  Is the immediate offset used for forming the address, a multiple of 4 in the
  range 0-1020, defaulting to 0 and encoded in the "imm8" field, as <imm>/4.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     offset_addr = if add then (R[n] + imm32) else (R[n] - imm32);
     address = if index then offset_addr else R[n];
 
     // System register write to DBGDTRTXint.
     DBGDTR_EL0[] = MemA[address,4];
 
     if wback then R[n] = offset_addr;


.SS Operational Notes

 
 If CPSR.DIT is 1, the timing of this instruction is insensitive to the value of the data being loaded or stored.
