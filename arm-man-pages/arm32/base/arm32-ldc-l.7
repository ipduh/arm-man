.nh
.TH "LDC (literal) -- AArch32" "7" " "  "instruction" "general"
.SS LDC (literal)
 Load data to System register (literal)

 Load data to System register (literal) calculates an address from the PC value
 and an immediate offset, loads a word from memory, and writes it to the
 DBGDTRTXint System register. For information about memory accesses see Memory
 accesses.

 In an implementation that includes EL2, the permitted LDC access to DBGDTRTXint
 can be trapped to Hyp mode, meaning that an attempt to execute an LDC
 instruction in a Non-secure mode other than Hyp mode, that would be permitted
 in the absence of the Hyp trap controls, generates a Hyp Trap exception.  For
 more information, see Trapping general Non-secure System register accesses to
 debug registers.

 For simplicity, the LDC pseudocode does not show this possible trap to Hyp
 mode.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                     22                                            
                   23 |                                            
                 24 | |  20                                        
         28    25 | | |21 |      16      12     9 8               0
          |     | | | | | |       |       |     | |               |
  |. . . .|1 1 0|.|.|0|.|1|1 1 1 1|0 1 0 1|1 1 1|0|. . . . . . . .|
  |             | | | | | |       |             | |
  |             | | | | | `-Rn    `-CRd         | `-imm8
  |             | | | | `-L                     `-cp15
  |             | | | `-W
  |             | | `-D
  |             | `-U
  |             `-P
  `-cond(!= 1111)
  
  
 
.SS A1(!(P == 0 && U == 0 && W == 0))
 
 LDC{<c>}{<q>} p14, c5, <label>
 
 LDC{<c>}{<q>} p14, c5, [PC, #{+/-}<imm>]
 
 LDC{<c>}{<q>} p14, c5, [PC], <option>
 
 if P == '0' && U == '0' && W == '0' then UNDEFINED;
 index = (P == '1');  add = (U == '1');  cp = 14;  imm32 = ZeroExtend(imm8:'00', 32);
 if W == '1' || (P == '0' && CurrentInstrSet() != InstrSet_A32) then UNPREDICTABLE;
.SS T1 - T32
 
                     07                                            
                   08 |                                            
         13      09 | |  05                                        
       14 |    10 | | |06 |      01      12     9 8               0
        | |     | | | | | |       |       |     | |               |
   1 1 1|0|1 1 0|.|.|0|.|1|1 1 1 1|0 1 0 1|1 1 1|0|. . . . . . . .|
        |       | | | | | |       |             | |
        `-o0    | | | | | `-Rn    `-CRd         | `-imm8
                | | | | `-L                     `-cp15
                | | | `-W
                | | `-D
                | `-U
                `-P
  
  
 
.SS T1(!(P == 0 && U == 0 && W == 0))
 
 LDC{<c>}{<q>} p14, c5, <label>
 
 LDC{<c>}{<q>} p14, c5, [PC, #{+/-}<imm>]
 
 if P == '0' && U == '0' && W == '0' then UNDEFINED;
 index = (P == '1');  add = (U == '1');  cp = 14;  imm32 = ZeroExtend(imm8:'00', 32);
 if W == '1' || (P == '0' && CurrentInstrSet() != InstrSet_A32) then UNPREDICTABLE;
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     offset_addr = if add then (Align(PC,4) + imm32) else (Align(PC,4) - imm32);
     address = if index then offset_addr else Align(PC,4);
 
     // System register write to DBGDTRTXint.
     DBGDTR_EL0[] = MemA[address,4];
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <option>
  Encoded in imm8
  Is an 8-bit immediate, in the range 0 to 255 enclosed in { }, encoded in the
  "imm8" field. The value of this field is ignored when executing this
  instruction.

 <label>
  Encoded in imm8
  The label of the literal data item that is to be loaded into <Rt>. The
  assembler calculates the required value of the offset from the Align(PC, 4)
  value of the instruction to this label. Permitted values of the offset are
  multiples of 4 in the range -1020 to 1020.           If the offset is zero or
  positive, imm32 is equal to the offset and add == TRUE (encoded as U == 1).
  If the offset is negative, imm32 is equal to minus the offset and add == FALSE
  (encoded as U == 0).

 +/-
  Encoded in U
  Specifies the offset is added to or subtracted from the base register,
  defaulting to + if omitted and

  U +/- 
  0 -   
  1 +   

 <imm>
  Encoded in imm8
  Is the immediate offset used for forming the address, a multiple of 4 in the
  range 0-1020, defaulting to 0 and encoded in the "imm8" field, as <imm>/4.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     offset_addr = if add then (Align(PC,4) + imm32) else (Align(PC,4) - imm32);
     address = if index then offset_addr else Align(PC,4);
 
     // System register write to DBGDTRTXint.
     DBGDTR_EL0[] = MemA[address,4];


.SS Operational Notes

 
 If CPSR.DIT is 1, the timing of this instruction is insensitive to the value of the data being loaded or stored.
