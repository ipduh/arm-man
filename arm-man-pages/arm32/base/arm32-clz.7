.nh
.TH "CLZ -- AArch32" "7" " "  "instruction" "general"
.SS CLZ
 Count Leading Zeros

 Count Leading Zeros returns the number of binary zero bits before the first
 binary one bit in a value.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1) and  T32 (T1).

.SS A1 - A32
 
                               17                                  
                             18 |            10                    
                           19 | |          11 |                    
         28              20 | | |16      12 | | 9 8       4       0
          |               | | | | |       | | | | |       |       |
  |. . . .|0 0 0 1 0 1 1 0|1|1|1|1|. . . .|1|1|1|1|0 0 0 1|. . . .|
  |                               |                       |
  `-cond(!= 1111)                 `-Rd                    `-Rm
  
  
 
.SS A1
 
 CLZ{<c>}{<q>} <Rd>, <Rm>
 
 d = UInt(Rd);  m = UInt(Rm);
 if d == 15 || m == 15 then UNPREDICTABLE;
.SS T1 - T32
 
                                                                   
                                                                   
                                                                   
                   08    05      01      12       8   6   4       0
                    |     |       |       |       |   |   |       |
   1 1 1 1 1 0 1 0 1|0 1 1|. . . .|1 1 1 1|. . . .|1 0|0 0|. . . .|
                    |     |               |           |   |
                    `-op1 `-Rn            `-Rd        |   `-Rm
                                                      `-op2
  
  
 
.SS T1
 
 CLZ{<c>}{<q>} <Rd>, <Rm>
 
 d = UInt(Rd);  m = UInt(Rm);  n = UInt(Rn);
 if m != n || d == 15 || m == 15 then UNPREDICTABLE; // Armv8-A removes UNPREDICTABLE for R13
 
 if ConditionPassed() then
     EncodingSpecificOperations();
     result = CountLeadingZeroBits(R[m]);
     R[d] = result<31:0>;
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rd>
  Encoded in Rd
  Is the general-purpose destination register, encoded in the "Rd" field.

 <Rm>
  Encoded in Rm
  For encoding A1: is the general-purpose source register, encoded in the "Rm"
  field.

 <Rm>
  Encoded in Rm
  For encoding T1: is the general-purpose source register, encoded in the "Rm"
  field. It must be encoded with an identical value in the "Rn" field.



.SS Operation

 if ConditionPassed() then
     EncodingSpecificOperations();
     result = CountLeadingZeroBits(R[m]);
     R[d] = result<31:0>;


.SS Operational Notes

 
 If CPSR.DIT is 1, this instruction has passed its condition execution check, and does not use R15 as either its source or destination: 
 
 The execution time of this instruction is independent of: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
 The response of this instruction to asynchronous exceptions does not vary based on: 
 The values of the data supplied in any of its registers.
 The values of the NZCV flags.
