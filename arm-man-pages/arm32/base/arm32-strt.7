.nh
.TH "STRT -- AArch32" "7" " "  "instruction" "general"
.SS STRT
 Store Register Unprivileged

 Store Register Unprivileged stores a word from a register to memory. For
 information about memory accesses see Memory accesses.

 The memory access is restricted as if the PE were running in User mode. This
 makes no difference if the PE is actually running in User mode.

 STRT is unpredictable in Hyp mode.

 The T32 instruction uses an offset addressing mode, that calculates the address
 used for the memory access from a base register value and an immediate offset,
 and leaves the base register unchanged.

 The A32 instruction uses a post-indexed addressing mode, that uses a base
 register value as the address for the memory access, and calculates a new
 address from a base register value and an offset and writes it back to the base
 register. The offset can be an immediate value or an optionally-shifted
 register value.

 For more information about the constrained unpredictable behavior of this
 instruction, see Architectural Constraints on UNPREDICTABLE behaviors.


It has encodings from the following instruction sets:  A32 (A1 and A2) and  T32 (T1).

.SS A1 - A32
 
                     22                                            
                   23 |                                            
                 24 | |  20                                        
         28    25 | | |21 |      16      12                       0
          |     | | | | | |       |       |                       |
  |. . . .|0 1 0|0|.|0|1|0|. . . .|. . . .|. . . . . . . . . . . .|
  |             | | | | | |       |       |
  |             | | | | | `-Rn    `-Rt    `-imm12
  |             | | | | `-o1
  |             | | | `-W
  |             | | `-o2
  |             | `-U
  |             `-P
  `-cond(!= 1111)
  
  
 
.SS A1
 
 STRT{<c>}{<q>} <Rt>, [<Rn>] {, #{+/-}<imm>}
 
 t = UInt(Rt);  n = UInt(Rn);  postindex = TRUE;  add = (U == '1');
 register_form = FALSE;  imm32 = ZeroExtend(imm12, 32);
 if n == 15 || n == t then UNPREDICTABLE;
.SS A2 - A32
 
                     22                                            
                   23 |                                            
                 24 | |  20                                        
         28    25 | | |21 |      16      12         7   5 4       0
          |     | | | | | |       |       |         |   | |       |
  |. . . .|0 1 1|0|.|0|1|0|. . . .|. . . .|. . . . .|. .|0|. . . .|
  |             | | | | | |       |       |         |     |
  |             | | | | | `-Rn    `-Rt    `-imm5    |     `-Rm
  |             | | | | `-o1                        `-stype
  |             | | | `-W
  |             | | `-o2
  |             | `-U
  |             `-P
  `-cond(!= 1111)
  
  
 
.SS A2
 
 STRT{<c>}{<q>} <Rt>, [<Rn>], {+/-}<Rm>{, <shift>}
 
 t = UInt(Rt);  n = UInt(Rn);  m = UInt(Rm);  postindex = TRUE;  add = (U == '1');
 register_form = TRUE;  (shift_t, shift_n) = DecodeImmShift(stype, imm5);
 if n == 15 || n == t || m == 15 then UNPREDICTABLE;
.SS T1 - T32
 
                                                                   
                                                                   
                         05                                        
                   08  06 |      01      12       8               0
                    |   | |       |       |       |               |
   1 1 1 1 1 0 0 0 0|1 0|0|. . . .|. . . .|1 1 1 0|. . . . . . . .|
                    |   | |       |               |
                    |   | |       `-Rt            `-imm8
                    |   | `-Rn(!= 1111)
                    |   `-L
                    `-size
  
  
 
.SS T1
 
 STRT{<c>}{<q>} <Rt>, [<Rn> {, #{+}<imm>}]
 
 if Rn == '1111' then UNDEFINED;
 t = UInt(Rt);  n = UInt(Rn);  postindex = FALSE;  add = TRUE;
 register_form = FALSE;  imm32 = ZeroExtend(imm8, 32);
 if t == 15 then UNPREDICTABLE; // Armv8-A removes UNPREDICTABLE for R13
 
 if ConditionPassed() then
     if PSTATE.EL == EL2 then UNPREDICTABLE;               // Hyp mode
     EncodingSpecificOperations();
     offset = if register_form then Shift(R[m], shift_t, shift_n, PSTATE.C) else imm32;
     offset_addr = if add then (R[n] + offset) else (R[n] - offset);
     address = if postindex then R[n] else offset_addr;
     if t == 15 then  // Only possible for encodings A1 and A2
         data = PCStoreValue();
     else
         data = R[t];
     MemU_unpriv[address,4] = data;
     if postindex then R[n] = offset_addr;
 

.SS Assembler Symbols

 <c>
  See Standard assembler syntax fields.

 <q>
  See Standard assembler syntax fields.

 <Rt>
  Encoded in Rt
  For encoding A1 and A2: is the general-purpose register to be transferred,
  encoded in the "Rt" field. The PC can be used, but this is deprecated.

 <Rt>
  Encoded in Rt
  For encoding T1: is the general-purpose register to be transferred, encoded in
  the "Rt" field.

 <Rn>
  Encoded in Rn
  Is the general-purpose base register, encoded in the "Rn" field.

 +/-
  Encoded in U
  For encoding A1: specifies the offset is added to or subtracted from the base
  register, defaulting to + if omitted and

  U +/- 
  0 -   
  1 +   

 +/-
  Encoded in U
  For encoding A2: specifies the index register is added to or subtracted from
  the base register, defaulting to + if omitted and

  U +/- 
  0 -   
  1 +   

 <Rm>
  Encoded in Rm
  Is the general-purpose index register, encoded in the "Rm" field.

 <shift>
  The shift to apply to the value read from <Rm>. If absent, no shift is
  applied. Otherwise, see Shifts applied to a register.

 +
  Specifies the offset is added to the base register.

 <imm>
  Encoded in imm12
  For encoding A1: is the 12-bit unsigned immediate byte offset, in the range 0
  to 4095, defaulting to 0 if omitted, and encoded in the "imm12" field.

 <imm>
  Encoded in imm8
  For encoding T1: is an optional 8-bit unsigned immediate byte offset, in the
  range 0 to 255, defaulting to 0 and encoded in the "imm8" field.



.SS Operation

 if ConditionPassed() then
     if PSTATE.EL == EL2 then UNPREDICTABLE;               // Hyp mode
     EncodingSpecificOperations();
     offset = if register_form then Shift(R[m], shift_t, shift_n, PSTATE.C) else imm32;
     offset_addr = if add then (R[n] + offset) else (R[n] - offset);
     address = if postindex then R[n] else offset_addr;
     if t == 15 then  // Only possible for encodings A1 and A2
         data = PCStoreValue();
     else
         data = R[t];
     MemU_unpriv[address,4] = data;
     if postindex then R[n] = offset_addr;


.SS Operational Notes

 
 If CPSR.DIT is 1, the timing of this instruction is insensitive to the value of the data being loaded or stored.
